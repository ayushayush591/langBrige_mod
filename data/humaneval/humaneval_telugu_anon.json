{"task_id":"HumanEval\/0","prompt":"from typing import List\n\n\ndef func(numbers: List[float], threshold: float) -> bool:\n    \"\"\" ఇచ్చిన సంఖ్యల జాబితాలో, ఏవైనా రెండు సంఖ్యలు ఇచ్చిన థ్రెషోల్డ్ కంటే ఒకదానికొకటి దగ్గరగా ఉన్నాయో లేదో తనిఖీ చేయండి.\n    >>> func([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> func([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n","canonical_solution":"    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/1","prompt":"from typing import List\n\n\ndef func(paren_string: str) -> List[str]:\n    \"\"\" ఈ ఫంక్షన్‌కు ఇన్‌పుట్ అనేది బహుళ గుంపుల నెస్టెడ్ పరెంథెసిస్‌లను కలిగి ఉన్న స్ట్రింగ్. మీ లక్ష్యం ఆ గుంపులను వేరు వేరు స్ట్రింగ్‌లుగా వేరు చేసి, వాటి జాబితాను రిటర్న్ చేయడం.\n    వేరు చేయబడిన గుంపులు సమతుల్యమైనవి (ప్రతి ఓపెన్ బ్రేస్ సరిగ్గా మూసివేయబడింది) మరియు ఒకదానిలో మరొకటి నెస్టెడ్ కాదు\n    ఇన్‌పుట్ స్ట్రింగ్‌లో ఉన్న ఏవైనా ఖాళీలను పట్టించుకోకండి.\n    >>> func('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n","canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n","entry_point":"func"}
{"task_id":"HumanEval\/2","prompt":"def func(number: float) -> float:\n    \"\"\" ఒక పాజిటివ్ ఫ్లోటింగ్ పాయింట్ సంఖ్యను దాని పూర్ణాంక భాగం (ఇచ్చిన సంఖ్యకంటే చిన్న అతిపెద్ద పూర్ణాంకం) మరియు దశాంశాలు (ఎప్పుడూ 1 కంటే చిన్నది అయ్యే మిగిలిన భాగం) గా విభజించవచ్చు.\n\n    సంఖ్య యొక్క దశాంశ భాగాన్ని రిటర్న్ చేయండి.\n    >>> func(3.5)\n    0.5\n    \"\"\"","canonical_solution":"    return number % 1.0\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n","entry_point":"func"}
{"task_id":"HumanEval\/3","prompt":"from typing import List\n\n\ndef func(operations: List[int]) -> bool:\n    \"\"\" మీకు సున్నా బ్యాలెన్స్‌తో ప్రారంభమయ్యే బ్యాంక్ ఖాతాపై జమ మరియు ఉపసంహరణ ఆపరేషన్ల జాబితా ఇవ్వబడింది. మీ పని ఏదైనా సమయంలో ఖాతా బ్యాలెన్స్ సున్నా కంటే తక్కువకు పడిపోతే, ఆ సమయంలో ఫంక్షన్ ట్రూ రిటర్న్ చేయాలి. లేకపోతే ఇది ఫాల్స్ రిటర్న్ చేయాలి.\n    >>> func([1, 2, 3])\n    False\n    >>> func([1, 2, -4, 5])\n    True\n    \"\"\"\n","canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n","entry_point":"func"}
{"task_id":"HumanEval\/4","prompt":"from typing import List\n\n\ndef func(numbers: List[float]) -> float:\n    \"\"\" ఇచ్చిన సంఖ్యల జాబితా కోసం, ఈ డేటాసెట్ యొక్క సగటు చుట్టూ సగటు సంపూర్ణ విచలనం (Mean Absolute Deviation) లెక్కించండి.\n    సగటు సంపూర్ణ విచలనం అంటే ప్రతి అంశం మరియు ఒక కేంద్రబిందువు (ఈ కేసులో సగటు) మధ్య సగటు సంపూర్ణ తేడా:\n    MAD = average | x - x_mean |\n    >>> func([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n","canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n","entry_point":"func"}
{"task_id":"HumanEval\/5","prompt":"from typing import List\n\n\ndef func(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" 'numbers' అనే ఇన్‌పుట్ జాబితాలోని ప్రతి రెండు వరుస అంశాల మధ్య 'delimeter' అనే సంఖ్యను ఉంచండి\n    >>> func([], 4)\n    []\n    >>> func([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n","canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n","entry_point":"func"}
{"task_id":"HumanEval\/6","prompt":"from typing import List\n\n\ndef func(paren_string: str) -> List[int]:\n    \"\"\" ఈ ఫంక్షన్‌కు ఇన్‌పుట్ అనేది స్పేస్‌లతో వేరుచేయబడిన నెస్టెడ్ పేరెంటీసెస్ యొక్క బహుళ గ్రూపులను ప్రతినిధించే స్ట్రింగ్.\n    ప్రతి గ్రూపు కోసం, పేరెంటీసెస్ యొక్క గరిష్ట లోతు స్థాయిని అవుట్‌పుట్ చేయండి.\n    ఉదాహరణకు, (()()) అనేది గరిష్టంగా రెండు స్థాయిల నెస్టింగ్ కలిగి ఉండగా ((())) అనేది మూడు ఉంటుంది.\n\n    >>> func('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n","canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n","entry_point":"func"}
{"task_id":"HumanEval\/7","prompt":"from typing import List\n\n\ndef func(strings: List[str], substring: str) -> List[str]:\n    \"\"\" ఇచ్చిన ఉపశబ్దం కలిగి ఉన్న స్ట్రింగ్ల జాబితాను మాత్రమే వడపోత చేయండి\n    >>> func([], 'a')\n    []\n    >>> func(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n","canonical_solution":"    return [x for x in strings if substring in x]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n","entry_point":"func"}
{"task_id":"HumanEval\/8","prompt":"from typing import List, Tuple\n\n\ndef func(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" ఇచ్చిన పూర్ణాంకాల జాబితా కోసం, జాబితాలోని అన్ని పూర్ణాంకాల మొత్తం మరియు ఉత్పాదం నుండి ఒక జత ను రిటర్న్ చేయండి.\n    ఖాళీ మొత్తం 0 కు సమానం మరియు ఖాళీ ఉత్పాదం 1 కు సమానం ఉండాలి.\n    >>> func([])\n    (0, 1)\n    >>> func([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n","canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n","entry_point":"func"}
{"task_id":"HumanEval\/9","prompt":"from typing import List, Tuple\n\n\ndef func(numbers: List[int]) -> List[int]:\n    \"\"\" ఇచ్చిన పూర్ణాంకాల జాబితా నుండి, ఆ క్రమంలో ఇచ్చిన క్షణం వరకు కనుగొనబడిన గరిష్ఠ అంశం యొక్క జాబితాను ఉత్పత్తి చేయండి.\n    >>> func([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n","canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n","entry_point":"func"}
{"task_id":"HumanEval\/10","prompt":"def is_palindrome(string: str) -> bool:\n    \"\"\" ఇచ్చిన స్ట్రింగ్ ఒక పాలిండ్రోమ్ అని పరీక్షించండి \"\"\"\n    return string == string[::-1]\n\n\ndef func(string: str) -> str:\n    \"\"\" అందించిన స్ట్రింగ్‌తో ప్రారంభమైన అతి చిన్న పాలిండ్రోమ్‌ను కనుగొనండి.\n    అల్గారిథం ఆలోచన సరళం:\n    - అందించిన స్ట్రింగ్‌లో అతి పెద్ద పోస్ట్‌ఫిక్స్‌ను కనుగొనండి ఇది ఒక పాలిండ్రోమ్.\n    - పాలిండ్రోమిక్ సఫిక్స్‌కు ముందు వచ్చే స్ట్రింగ్ ప్రీఫిక్స్‌ను తిరిగి స్ట్రింగ్ చివరికి జోడించండి.\n    >>> func('')\n    ''\n    >>> func('cat')\n    'catac'\n    >>> func('cata')\n    'catac'\n    \"\"\"","canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n","entry_point":"func"}
{"task_id":"HumanEval\/11","prompt":"from typing import List\n\n\ndef func(a: str, b: str) -> str:\n    \"\"\" ఇన్‌పుట్‌లు రెండు స్ట్రింగ్‌లు a మరియు b, అవి కేవలం 1లు మరియు 0లు మాత్రమే కలిగి ఉంటాయి.\n    ఈ ఇన్‌పుట్‌లపై బైనరీ XOR ఆపరేషన్ చేసి ఫలితాన్ని కూడా స్ట్రింగ్‌గా రిటర్న్ చేయండి.\n    >>> func('010', '110')\n    '100'\n    \"\"\"\n","canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n","entry_point":"func"}
{"task_id":"HumanEval\/12","prompt":"from typing import List, Optional\n\n\ndef func(strings: List[str]) -> Optional[str]:\n    \"\"\" స్ట్రింగ్స్ యొక్క జాబితా నుండి, అతిపెద్దది ఏదో తిరిగి ఇవ్వండి. అదే పొడవు గల అనేక స్ట్రింగ్స్ ఉన్న కేసులో మొదటిదాన్ని ఇవ్వండి. ఇన్‌పుట్ జాబితా ఖాళీగా ఉంటే None ని తిరిగి ఇవ్వండి.\n    >>> func([])\n\n    >>> func(['a', 'b', 'c'])\n    'a'\n    >>> func(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n","canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n","entry_point":"func"}
{"task_id":"HumanEval\/13","prompt":"\ndef func(a: int, b: int) -> int:\n    \"\"\" రెండు పూర్ణాంకాల a మరియు b యొక్క అతిపెద్ద సామాన్య భాజకం నిర్ధారించండి\n    >>> func(3, 5)\n    1\n    >>> func(25, 15)\n    5\n    \"\"\"","canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n","entry_point":"func"}
{"task_id":"HumanEval\/14","prompt":"from typing import List\n\n\ndef func(string: str) -> List[str]:\n    \"\"\" ఇన్‌పుట్ స్ట్రింగ్‌నుండి అతి చిన్నది నుండి అతి పెద్దది వరకు అన్ని ప్రీఫిక్స్‌ల జాబితాను రిటర్న్ చేయండి\n    >>> func('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n","canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n","entry_point":"func"}
{"task_id":"HumanEval\/15","prompt":"def func(n: int) -> str:\n    \"\"\" 0 నుండి n వరకు స్పేస్-డిలిమిటెడ్ నంబర్లను కలిగిన స్ట్రింగ్‌ను రిటర్న్ చేయండి.\n    >>> func(0)\n    '0'\n    >>> func(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n","canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n","entry_point":"func"}
{"task_id":"HumanEval\/16","prompt":"def func(string: str) -> int:\n    \"\"\" ఒక స్ట్రింగ్‌లో ఎన్ని విభిన్న అక్షరాలు (కేసును గమనించకుండా) ఉన్నాయో కనుగొనండి\n    >>> func('xyzXYZ')\n    3\n    >>> func('Jerry')\n    4\n    \"\"\"","canonical_solution":"    return len(set(string.lower()))\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n","entry_point":"func"}
{"task_id":"HumanEval\/17","prompt":"from typing import List\n\n\ndef func(music_string: str) -> List[int]:\n    \"\"\" ఈ ఫంక్షన్‌కు ఇన్‌పుట్ ప్రత్యేక ASCII ఫార్మాట్‌లో సంగీత స్వరాలను ప్రతినిధించే ఒక స్ట్రింగ్. \n    మీ పని ఈ స్ట్రింగ్‌ను పార్స్ చేయడం మరియు ప్రతి స్వరం ఎన్ని బీట్లు ఉంటుందో అనుగుణంగా ఇంటిజర్ల జాబితాను రిటర్న్ చేయడం.\n\n    ఇక్కడ ఒక పురాణం ఉంది:\n    'o' - పూర్తి నోట్, నాలుగు బీట్లు ఉంటుంది\n    'o|' - అర నోట్, రెండు బీట్లు ఉంటుంది\n    '.|' - క్వార్టర్ నోట్, ఒక బీట్ ఉంటుంది\n\n    >>> func('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n","canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n","entry_point":"func"}
{"task_id":"HumanEval\/18","prompt":"def func(string: str, substring: str) -> int:\n    \"\"\" ఒరిజినల్ స్ట్రింగ్‌లో ఒక ఇచ్చిన ఉపస్ట్రింగ్ ఎన్ని సార్లు కనిపించిందో కనుగొనండి. ఓవర్‌లాపింగ్ కేసులను కూడా లెక్కించండి.\n    >>> func('', 'a')\n    0\n    >>> func('aaa', 'a')\n    3\n    >>> func('aaaa', 'aa')\n    3\n    \"\"\"","canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n","entry_point":"func"}
{"task_id":"HumanEval\/19","prompt":"from typing import List\n\n\ndef func(numbers: str) -> str:\n    \"\"\" ఇన్‌పుట్ అనేది 'జీరో' నుండి 'నైన్' వరకు ఉన్న సంఖ్యల స్పేస్-డెలిమిటెడ్ స్ట్రింగ్.\n    వైధ ఎంపికలు 'జీరో', 'వన్', 'టూ', 'త్రీ', 'ఫోర్', 'ఫైవ్', 'సిక్స్', 'సెవెన్', 'ఎయిట్' మరియు 'నైన్'.\n    చిన్న నుండి పెద్ద సంఖ్యల వరకు సార్ట్ చేసిన స్ట్రింగ్‌ను రిటర్న్ చేయండి\n    >>> func('three one five')\n    'one three five'\n    \"\"\"\n","canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n","entry_point":"func"}
{"task_id":"HumanEval\/20","prompt":"from typing import List, Tuple\n\n\ndef func(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" కనీసం రెండు సంఖ్యల పొడవు గల సంఖ్యల జాబితా నుండి, ఒకదానికి ఒకటి అత్యంత సమీపంలో ఉన్న రెండు సంఖ్యలను ఎంచుకొని, వాటిని క్రమంలో (చిన్న సంఖ్య, పెద్ద సంఖ్య) తిరిగి ఇవ్వండి.\n    >>> func([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> func([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n","canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n","entry_point":"func"}
{"task_id":"HumanEval\/21","prompt":"from typing import List\n\n\ndef func(numbers: List[float]) -> List[float]:\n    \"\"\" కనీసం రెండు అంశాలు గల సంఖ్యల జాబితాను ఇచ్చి, ఆ జాబితాకు రేఖీయ మార్పును అమలు చేయండి,\n    అందులో అతి చిన్న సంఖ్య 0 గా మారి, అతి పెద్ద సంఖ్య 1 గా మారుతుంది\n    >>> func([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n","canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n","entry_point":"func"}
{"task_id":"HumanEval\/22","prompt":"from typing import List, Any\n\n\ndef func(values: List[Any]) -> List[int]:\n    \"\"\" ఏదైనా పైథాన్ విలువల జాబితాను కేవలం పూర్ణాంకాల కోసం వడపోత చేయండి\n    >>> func(['a', 3.14, 5])\n    [5]\n    >>> func([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n","canonical_solution":"    return [x for x in values if isinstance(x, int)]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n","entry_point":"func"}
{"task_id":"HumanEval\/23","prompt":"def func(string: str) -> int:\n    \"\"\" ఇచ్చిన స్ట్రింగ్‌ యొక్క పొడవును తిరిగి ఇవ్వండి\n    >>> func('')\n    0\n    >>> func('abc')\n    3\n    \"\"\"","canonical_solution":"    return len(string)\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n","entry_point":"func"}
{"task_id":"HumanEval\/24","prompt":"def func(n: int) -> int:\n    \"\"\" ఇచ్చిన సంఖ్య n కి, n కంటే చిన్నది మరియు n ని సమంగా భాగించగల అతిపెద్ద సంఖ్యను కనుగొనండి\n    >>> func(15)\n    5\n    \"\"\"","canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n","entry_point":"func"}
{"task_id":"HumanEval\/25","prompt":"from typing import List\n\n\ndef func(n: int) -> List[int]:\n    \"\"\" ఇచ్చిన పూర్ణాంకం యొక్క ప్రధాన గుణకాల జాబితాను చిన్నది నుండి పెద్దది వరకు క్రమంలో రిటర్న్ చేయండి.\n    గుణకాలను వాటి గుణనంలో ఎన్ని సార్లు కనిపిస్తాయో అన్ని సార్లు జాబితాలో చూపాలి.\n    ఇన్‌పుట్ సంఖ్య అన్ని గుణకాల ఉత్పత్తికి సమానంగా ఉండాలి\n    >>> func(8)\n    [2, 2, 2]\n    >>> func(25)\n    [5, 5]\n    >>> func(70)\n    [2, 5, 7]\n    \"\"\"\n","canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n","entry_point":"func"}
{"task_id":"HumanEval\/26","prompt":"from typing import List\n\n\ndef func(numbers: List[int]) -> List[int]:\n    \"\"\" ఒక పూర్తి సంఖ్యల జాబితా నుండి, ఒకకంటే ఎక్కువసార్లు జరిగే అన్ని అంశాలను తొలగించండి.\n    ఇన్‌పుట్‌లో ఉన్నట్లుగానే మిగిలిన అంశాల క్రమాన్ని అలాగే ఉంచండి.\n    >>> func([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n","canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n","entry_point":"func"}
{"task_id":"HumanEval\/27","prompt":"def func(string: str) -> str:\n    \"\"\" ఒక ఇచ్చిన స్ట్రింగ్‌లో, చిన్న అక్షరాలను పెద్ద అక్షరాలుగా మరియు పెద్ద అక్షరాలను చిన్న అక్షరాలుగా మార్చండి.\n    >>> func('Hello')\n    'hELLO'\n    \"\"\"","canonical_solution":"    return string.swapcase()\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n","entry_point":"func"}
{"task_id":"HumanEval\/28","prompt":"from typing import List\n\n\ndef func(strings: List[str]) -> str:\n    \"\"\" స్ట్రింగ్‌ల జాబితాను ఒకే స్ట్రింగ్‌గా కలపండి\n    >>> func([])\n    ''\n    >>> func(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n","canonical_solution":"    return ''.join(strings)\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n","entry_point":"func"}
{"task_id":"HumanEval\/29","prompt":"from typing import List\n\n\ndef func(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" ఇచ్చిన ప్రిఫిక్స్‌తో మొదలయ్యే స్ట్రింగ్‌లను మాత్రమే ఫిల్టర్ చేసే స్ట్రింగ్‌ల జాబితాను ఇన్‌పుట్ చేయండి.\n    >>> func([], 'a')\n    []\n    >>> func(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n","canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n","entry_point":"func"}
{"task_id":"HumanEval\/30","prompt":"\ndef func(l: list):\n    \"\"\"జాబితాలో ఉన్న కేవలం పాజిటివ్ సంఖ్యలను మాత్రమే తిరిగి ఇవ్వండి.\n    >>> func([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> func([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n","canonical_solution":"    return [e for e in l if e > 0]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/31","prompt":"def func(n):\n    \"\"\"ఇచ్చిన సంఖ్య ఒక ప్రధాన సంఖ్య అయితే నిజం అని మరియు లేకపోతే అబద్ధం అని తిరిగి ఇవ్వండి.\n    >>> func(6)\n    False\n    >>> func(101)\n    True\n    >>> func(11)\n    True\n    >>> func(13441)\n    True\n    >>> func(61)\n    True\n    >>> func(4)\n    False\n    >>> func(1)\n    False\n    \"\"\"","canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/32","prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    xs గుణకాలతో ఉన్న బహుపదిని x బిందువులో విలువను లెక్కిస్తుంది.\n    xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n అన్న విలువను రిటర్న్ చేస్తుంది.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef func(xs: list):\n    \"\"\" xs అనేవి ఒక బహుపది గుణకాలు.\n    func అనేది poly(x) = 0 అయ్యే x ను కనుగొనడం.\n    func ఒకే ఒక శూన్య బిందువును రిటర్న్ చేస్తుంది, ఎన్ని ఉన్నా కూడా.\n    అంతేకాక, func కేవలం సమ సంఖ్యాక గుణకాలు కలిగిన xs లిస్ట్ ను మాత్రమే తీసుకుంటుంది\n    మరియు పెద్ద గుణకం శూన్యం కానిది ఉండాలి అది పరిష్కారం ఉండటానికి హామీ ఇస్తుంది.\n    >>> round(func([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(func([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"","canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n","entry_point":"func"}
{"task_id":"HumanEval\/33","prompt":"def func(l: list):\n    \"\"\"ఈ ఫంక్షన్ ఒక జాబితా l ను తీసుకొని, జాబితా l' ను రిటర్న్ చేస్తుంది అందులో\n    l' మూడుతో భాగించగలిగే సూచికలు కాని ఇతర సూచికలలో l కు అచ్చమైనది, అయితే మూడుతో భాగించగలిగే సూచికల విలువలు\n    l యొక్క సంబంధిత సూచికల విలువలకు సమానమైనవి, కానీ క్రమబద్ధం చేయబడినవి.\n    >>> func([1, 2, 3])\n    [1, 2, 3]\n    >>> func([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n","canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n","entry_point":"func"}
{"task_id":"HumanEval\/34","prompt":"def func(l: list):\n    \"\"\"జాబితాలో ఉన్న విభిన్నమైన అంశాలను క్రమపరచి తిరిగి ఇవ్వండి\n    >>> func([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n","canonical_solution":"    return sorted(list(set(l)))\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/35","prompt":"def func(l: list):\n    \"\"\"జాబితాలో గరిష్ఠ మూలకాన్ని తిరిగి ఇవ్వండి.\n    >>> func([1, 2, 3])\n    3\n    >>> func([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"","canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n","entry_point":"func"}
{"task_id":"HumanEval\/36","prompt":"def func(n: int):\n    \"\"\"n కంటే తక్కువ సంఖ్యలలో, 11 లేదా 13 కి భాగించబడే సంఖ్యలలో 7 అంకె ఎన్ని సార్లు కనిపిస్తుందో ఆ సంఖ్యను రిటర్న్ చేయండి.\n    >>> func(50)\n    0\n    >>> func(78)\n    2\n    >>> func(79)\n    3\n    \"\"\"","canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n","entry_point":"func"}
{"task_id":"HumanEval\/37","prompt":"def func(l: list):\n    \"\"\"ఈ ఫంక్షన్ ఒక జాబితా l ను తీసుకొని, జాబితా l' ను రిటర్న్ చేస్తుంది అందులో\n    l' అసమాన సూచికలలో l కు అచ్చమైనది కాగా, సమాన సూచికల విలువలు\n    l యొక్క సమాన సూచికల విలువలకు సమానమైనవి, కానీ క్రమబద్ధం చేయబడినవి.\n    >>> func([1, 2, 3])\n    [1, 2, 3]\n    >>> func([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n","canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n","entry_point":"func"}
{"task_id":"HumanEval\/38","prompt":"def encode_cyclic(s: str):\n    \"\"\"\n    మూడు అక్షరాల గ్రూపులను సైకిల్ చేస్తూ ఎన్కోడ్ చేసిన స్ట్రింగ్‌ను రిటర్న్ చేస్తుంది.\n    \"\"\"\n    # స్ట్రింగ్‌ను గ్రూపులుగా విభజించండి. ప్రతి గ్రూపు పొడవు 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # ప్రతి గ్రూపులోని అంశాలను సైకిల్ చేయండి. గ్రూపులో అంశాలు 3 కంటే తక్కువ ఉంటే తప్ప.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef func(s: str):\n    \"\"\"\n    ఎన్కోడ్_సైకిలిక్ ఫంక్షన్‌తో ఎన్కోడ్ చేసిన స్ట్రింగ్‌ను ఇన్‌పుట్‌గా తీసుకుంటుంది. డీకోడ్ చేసిన స్ట్రింగ్‌ను రిటర్న్ చేస్తుంది.\n    \"\"\"\n","canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n","entry_point":"func"}
{"task_id":"HumanEval\/39","prompt":"def func(n: int):\n    \"\"\"\n    func అనేది n-వ సంఖ్యను రిటర్న్ చేస్తుంది, అది ఒక ఫిబొనాచ్చి సంఖ్య మరియు అది ప్రైమ్ కూడా.\n    >>> func(1)\n    2\n    >>> func(2)\n    3\n    >>> func(3)\n    5\n    >>> func(4)\n    13\n    >>> func(5)\n    89\n    \"\"\"","canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n","entry_point":"func"}
{"task_id":"HumanEval\/40","prompt":"def func(l: list):\n    \"\"\"\n    func అనేది ఇన్పుట్‌గా ఇంటిజర్ల జాబితాను తీసుకుంటుంది.\n    జాబితాలో మూడు విభిన్న అంశాలు ఉంటే వాటి మొత్తం సున్నా అయితే True ని,\n    లేకపోతే False ని రిటర్న్ చేస్తుంది.\n\n    >>> func([1, 3, 5, 0])\n    False\n    >>> func([1, 3, -2, 1])\n    True\n    >>> func([1, 2, 3, 7])\n    False\n    >>> func([2, 4, -5, 3, 9, 7])\n    True\n    >>> func([1])\n    False\n    \"\"\"\n","canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/41","prompt":"def func(n: int):\n    \"\"\"\n    ఒక నిజమైన నేరుగా అనంతంగా పొడవైన రోడ్డు అనుకోండి.\n    n కార్లు ఎడమ నుండి కుడికి డ్రైవ్ చేస్తున్నాయి; అదే సమయంలో, వేరే సెట్ ఆఫ్ n కార్లు\n    కుడి నుండి ఎడమకు డ్రైవ్ చేస్తున్నాయి. రెండు సెట్ల కార్లు ఒకదాని నుండి ఒకదానికి చాలా దూరంగా ఉంటాయి.\n    అన్ని కార్లు ఒకే వేగంలో కదులుతాయి. ఎడమ నుండి కుడికి కదులుతున్న కారు ఒకటి కుడి నుండి ఎడమకు కదులుతున్న కారును ఢీకొన్నప్పుడు\n    వాటిని ఢీకొన్నట్టు అనుకుంటారు.\n    అయితే, కార్లు అనంతంగా బలమైనవి మరియు గట్టివి; ఫలితంగా, వాటిని ఢీకొన్నట్టు లేకుండా వాటి ప్రయాణంలో కొనసాగుతాయి.\n\n    ఈ ఫంక్షన్ అలాంటి ఢీకొన్న సంఖ్యను అవుట్పుట్ చేస్తుంది.\n    \"\"\"","canonical_solution":"    return n**2\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n","entry_point":"func"}
{"task_id":"HumanEval\/42","prompt":"def func(l: list):\n    \"\"\"ప్రతి అంశాన్ని 1 చొప్పున పెంచిన జాబితాను రిటర్న్ చేయండి.\n    >>> func([1, 2, 3])\n    [2, 3, 4]\n    >>> func([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n","canonical_solution":"    return [(e + 1) for e in l]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/43","prompt":"\ndef func(l):\n    \"\"\"\n    func అనేది ఇన్పుట్‌గా ఇంటిజర్ల జాబితాను తీసుకుంటుంది.\n    జాబితాలో రెండు విభిన్నమైన అంశాలు సున్నాకు సమానమైన మొత్తానికి కలిస్తే True ని మరియు లేకపోతే False ని రిటర్న్ చేస్తుంది.\n    >>> func([1, 3, 5, 0])\n    False\n    >>> func([1, 3, -2, 1])\n    False\n    >>> func([1, 2, 3, 7])\n    False\n    >>> func([2, 4, -5, 3, 5, 7])\n    True\n    >>> func([1])\n    False\n    \"\"\"\n","canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/44","prompt":"def func(x: int, base: int):\n    \"\"\"ఇన్‌పుట్ సంఖ్య x యొక్క సంఖ్యాత్మక ఆధారాన్ని baseకి మార్చండి.\n    మార్పిడి తర్వాత స్ట్రింగ్ ప్రతినిధిత్వం రిటర్న్ చేయండి.\n    ఆధార సంఖ్యలు 10 కంటే తక్కువ.\n    >>> func(8, 3)\n    '22'\n    >>> func(8, 2)\n    '1000'\n    >>> func(7, 2)\n    '111'\n    \"\"\"\n","canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n","entry_point":"func"}
{"task_id":"HumanEval\/45","prompt":"\ndef func(a, h):\n    \"\"\"ఒక వైపు మరియు ఎత్తు యొక్క పొడవు ఇవ్వబడినప్పుడు ఒక త్రిభుజం యొక్క ప్రాంతాన్ని తిరిగి ఇవ్వండి.\n    >>> func(5, 3)\n    7.5\n    \"\"\"","canonical_solution":"    return a * h \/ 2.0\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n","entry_point":"func"}
{"task_id":"HumanEval\/46","prompt":"def func(n: int):\n    \"\"\"Fib4 సంఖ్య శ్రేణి అనేది ఫిబోనాచ్చి శ్రేణికి సమానమైన ఒక శ్రేణి, దీనిని క్రింది విధంగా నిర్వచించబడింది:\n    func(0) -> 0\n    func(1) -> 0\n    func(2) -> 2\n    func(3) -> 0\n    func(n) -> func(n-1) + func(n-2) + func(n-3) + func(n-4).\n    దయచేసి పునరావృత్తి (recursion) ఉపయోగించకుండా func సంఖ్య శ్రేణిలో n-వ అంశాన్ని సమర్థవంతంగా లెక్కించే ఫంక్షన్‌ను రాయండి.\n    >>> func(5)\n    4\n    >>> func(6)\n    8\n    >>> func(7)\n    14\n    \"\"\"","canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n","entry_point":"func"}
{"task_id":"HumanEval\/47","prompt":"def func(l: list):\n    \"\"\"జాబితా l లోని అంశాల మధ్యస్థానాన్ని తిరిగి ఇవ్వండి.\n    >>> func([3, 1, 2, 4, 5])\n    3\n    >>> func([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"","canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n","entry_point":"func"}
{"task_id":"HumanEval\/48","prompt":"def func(text: str):\n    \"\"\"\n    ఇచ్చిన స్ట్రింగ్ ఒక పాలిండ్రోమ్ అయినట్లు తనిఖీ చేస్తుంది\n    >>> func('')\n    True\n    >>> func('aba')\n    True\n    >>> func('aaaaa')\n    True\n    >>> func('zbcd')\n    False\n    \"\"\"\n","canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/49","prompt":"def func(n: int, p: int):\n    \"\"\"2^n ను p మోడ్యులో తిరిగి ఇవ్వండి (సంఖ్యాశాస్త్రం గురించి జాగ్రత్తలు ఉండాలి).\n    >>> func(3, 5)\n    3\n    >>> func(1101, 101)\n    2\n    >>> func(0, 101)\n    1\n    >>> func(3, 11)\n    8\n    >>> func(100, 101)\n    1\n    \"\"\"\n","canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n","entry_point":"func"}
{"task_id":"HumanEval\/50","prompt":"def encode_shift(s: str):\n    \"\"\"\n    ప్రతి అక్షరాన్ని ఆల్ఫాబెట్‌లో 5 స్థానాలు మార్చి ఎన్కోడ్ చేసిన స్ట్రింగ్‌ను రిటర్న్ చేస్తుంది.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef func(s: str):\n    \"\"\"\n    encode_shift ఫంక్షన్‌తో ఎన్కోడ్ చేయబడిన స్ట్రింగ్‌ను ఇన్‌పుట్‌గా తీసుకుంటుంది. డీకోడ్ చేయబడిన స్ట్రింగ్‌ను రిటర్న్ చేస్తుంది.\n    \"\"\"","canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n","entry_point":"func"}
{"task_id":"HumanEval\/51","prompt":"def func(text):\n    \"\"\"\n    func అనేది ఒక ఫంక్షన్, ఇది స్ట్రింగ్‌ను తీసుకొని అచ్చులు లేని స్ట్రింగ్‌ను రిటర్న్ చేస్తుంది.\n    >>> func('')\n    ''\n    >>> func(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> func('abcdef')\n    'bcdf'\n    >>> func('aaaaa')\n    ''\n    >>> func('aaBAA')\n    'B'\n    >>> func('zbcd')\n    'zbcd'\n    \"\"\"\n","canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n","entry_point":"func"}
{"task_id":"HumanEval\/52","prompt":"def func(l: list, t: int):\n    \"\"\"జాబితా l లోని అన్ని సంఖ్యలు పరిమితి t కంటే తక్కువైతే True ని రిటర్న్ చేయండి.\n    >>> func([1, 2, 4, 10], 100)\n    True\n    >>> func([1, 20, 4, 10], 5)\n    False\n    \"\"\"","canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n","entry_point":"func"}
{"task_id":"HumanEval\/53","prompt":"def func(x: int, y: int):\n    \"\"\"రెండు సంఖ్యలు x మరియు y ను కలపండి\n    >>> func(2, 3)\n    5\n    >>> func(5, 7)\n    12\n    \"\"\"","canonical_solution":"    return x + y\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n","entry_point":"func"}
{"task_id":"HumanEval\/54","prompt":"def func(s0: str, s1: str):\n    \"\"\"\n    రెండు పదాలు ఒకే అక్షరాలను కలిగి ఉన్నాయో లేదో తనిఖీ చేయండి.\n    >>> func('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> func('abcd', 'dddddddabc')\n    True\n    >>> func('dddddddabc', 'abcd')\n    True\n    >>> func('eabcd', 'dddddddabc')\n    False\n    >>> func('abcd', 'dddddddabce')\n    False\n    >>> func('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n","canonical_solution":"    return set(s0) == set(s1)\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/55","prompt":"\ndef func(n: int):\n    \"\"\"n-వ Fibonacci సంఖ్యను తిరిగి ఇవ్వండి.\n    >>> func(10)\n    55\n    >>> func(1)\n    1\n    >>> func(8)\n    21\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n","entry_point":"func"}
{"task_id":"HumanEval\/56","prompt":"def func(brackets: str):\n    \"\"\" brackets అనేది \"<\" మరియు \">\" గుర్తుల స్ట్రింగ్.\n    ప్రతి ఓపెనింగ్ బ్రాకెట్‌కి సంబంధిత క్లోజింగ్ బ్రాకెట్ ఉంటే True ని రిటర్న్ చేయండి.\n\n    >>> func(\"<\")\n    False\n    >>> func(\"<>\")\n    True\n    >>> func(\"<<><>>\")\n    True\n    >>> func(\"><<>\")\n    False\n    \"\"\"","canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n","entry_point":"func"}
{"task_id":"HumanEval\/57","prompt":"def func(l: list):\n    \"\"\"జాబితా అంశాలు ఒకదాని తర్వాత ఒకటి పెరుగుతూ లేదా తగ్గుతూ ఉంటే True ని రిటర్న్ చేయండి.\n    >>> func([1, 2, 4, 20])\n    True\n    >>> func([1, 20, 4, 10])\n    False\n    >>> func([4, 1, 0, -10])\n    True\n    \"\"\"","canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/58","prompt":"def func(l1: list, l2: list):\n    \"\"\"రెండు జాబితాల కోసం క్రమబద్ధం చేయబడిన అద్వితీయ సాధారణ అంశాలను తిరిగి ఇవ్వండి.\n    >>> func([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> func([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"","canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/59","prompt":"def func(n: int):\n    \"\"\"n యొక్క అతిపెద్ద ప్రధాన కారకాన్ని తిరిగి ఇవ్వండి. n > 1 మరియు ప్రధానం కాదు అని ఊహించండి.\n    >>> func(13195)\n    29\n    >>> func(2048)\n    2\n    \"\"\"","canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n","entry_point":"func"}
{"task_id":"HumanEval\/60","prompt":"def func(n: int):\n    \"\"\"func అనేది 1 నుండి n వరకు ఉన్న సంఖ్యలను కలిపే ఫంక్షన్.\n    >>> func(30)\n    465\n    >>> func(100)\n    5050\n    >>> func(5)\n    15\n    >>> func(10)\n    55\n    >>> func(1)\n    1\n    \"\"\"","canonical_solution":"    return sum(range(n + 1))\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n","entry_point":"func"}
{"task_id":"HumanEval\/61","prompt":"def func(brackets: str):\n    \"\"\" brackets అనేది \"(\" మరియు \")\" గుర్తుల స్ట్రింగ్.\n    ప్రతి ఓపెనింగ్ బ్రాకెట్‌కి సంబంధిత క్లోజింగ్ బ్రాకెట్ ఉంటే True ని రిటర్న్ చేయండి.\n\n    >>> func(\"(\")\n    False\n    >>> func(\"()\")\n    True\n    >>> func(\"(()())\")\n    True\n    >>> func(\")(()\")\n    False\n    \"\"\"\n","canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n","entry_point":"func"}
{"task_id":"HumanEval\/62","prompt":"def func(xs: list):\n    \"\"\" xs ఒక బహుపది గుణకాలను సూచిస్తుంది.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    ఈ బహుపది యొక్క వ్యుత్పన్నాన్ని అదే రూపంలో తిరిగి ఇవ్వండి.\n    >>> func([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> func([1, 2, 3])\n    [2, 6]\n    \"\"\"\n","canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/63","prompt":"def func(n: int):\n    \"\"\"FibFib సంఖ్య శ్రేణి అనేది Fibbonacci శ్రేణికి సమానమైన ఒక శ్రేణి, దీనిని క్రింది విధంగా నిర్వచించబడింది:\n    func(0) == 0\n    func(1) == 0\n    func(2) == 1\n    func(n) == func(n-1) + func(n-2) + func(n-3).\n    దయచేసి func సంఖ్య శ్రేణిలో n-వ అంశాన్ని సమర్థవంతంగా లెక్కించే ఫంక్షన్ రాయండి.\n    >>> func(1)\n    0\n    >>> func(5)\n    4\n    >>> func(8)\n    24\n    \"\"\"","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n","entry_point":"func"}
{"task_id":"HumanEval\/64","prompt":"FIX = \"\"\"\nమరిన్ని టెస్ట్ కేసులను జోడించండి.\n\"\"\"\n\ndef func(s):\n    \"\"\"ఒక పదంగా ఉన్న స్ట్రింగ్‌ను ఇన్‌పుట్‌గా తీసుకుని, ఆ స్ట్రింగ్‌లో ఉన్న అచ్చుల సంఖ్యను తిరిగి ఇచ్చే ఫంక్షన్ func రాయండి.\n    ఈ కేసులో అచ్చులు 'a', 'e', 'i', 'o', 'u' మరియు ఇచ్చిన పదం చివరలో 'y' ఉంటే అది కూడా ఒక అచ్చుగా పరిగణించబడుతుంది.\n\n    ఉదాహరణ:\n    >>> func(\"abcde\")\n    2\n    >>> func(\"ACEDY\")\n    3\n    \"\"\"\n","canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/65","prompt":"def func(x, shift):\n    \"\"\"పూర్ణాంకం x యొక్క అంకెలను సర్క్యులర్ షిఫ్ట్ చేయండి, అంకెలను కుడివైపుకు shift మేర షిఫ్ట్ చేసి ఫలితాన్ని స్ట్రింగ్‌గా రిటర్న్ చేయండి.\n    షిఫ్ట్ > అంకెల సంఖ్య అయితే, అంకెలను తిరగబెట్టి రిటర్న్ చేయండి.\n    >>> func(12, 1)\n    \"21\"\n    >>> func(12, 2)\n    \"12\"\n    \"\"\"","canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/66","prompt":"def func(s):\n    \"\"\"పని\n    ఒక స్ట్రింగ్‌ను ఇన్‌పుట్‌గా తీసుకొని, కేవలం అప్పర్ కేస్ అక్షరాల యొక్క ASCII కోడ్‌ల మొత్తాన్ని రిటర్న్ చేసే ఫంక్షన్‌ను రాయండి.\n\n    ఉదాహరణలు:\n        func(\"\") => 0\n        func(\"abAB\") => 131\n        func(\"abcCd\") => 67\n        func(\"helloE\") => 69\n        func(\"woArBld\") => 131\n        func(\"aAaaaXa\") => 153\n    \"\"\"","canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/67","prompt":"def func(s,n):\n    \"\"\"\n    ఈ పనిలో, మీకు ఒక బుట్టలో పంచిన యాపిల్స్ మరియు ఆరెంజ్ల సంఖ్యను సూచించే ఒక స్ట్రింగ్ ఇవ్వబడుతుంది. ఈ బుట్టలో \n    యాపిల్స్, ఆరెంజ్లు, మరియు మామిడి పండ్లు ఉంటాయి. మొత్తం ఆరెంజ్లు మరియు యాపిల్స్ సంఖ్యను సూచించే స్ట్రింగ్ మరియు \n    బుట్టలో ఉన్న మొత్తం పండ్ల సంఖ్యను సూచించే ఒక పూర్ణాంకం ఇవ్వబడితే, బుట్టలో ఉన్న మామిడి పండ్ల సంఖ్యను \n    తిరిగి ఇవ్వండి.\n    ఉదాహరణకు:\n    func(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    func(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    func(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    func(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n","canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n","entry_point":"func"}
{"task_id":"HumanEval\/68","prompt":"def func(arr):\n    \"\"\"\n    \"ఒక చెట్టు యొక్క శాఖను ప్రతినిధించే ఒక అర్రే ఇచ్చారు, అందులో అన్ని సంఖ్యలు సున్నా లేదా అవి కన్నా ఎక్కువ అయిన పూర్ణాంకాలు ఉంటాయి.\n    మీ పని ఒక నోడ్‌ను ప్లక్ చేసి దాన్ని రిటర్న్ చేయడం.\n    ప్లక్ చేయబడిన నోడ్ అతి చిన్న సమ విలువ గల నోడ్ అయి ఉండాలి.\n    ఒకే అతి చిన్న సమ విలువ గల అనేక నోడ్‌లు కనిపిస్తే, అతి చిన్న ఇండెక్స్ గల నోడ్‌ను రిటర్న్ చేయండి.\n\n    ప్లక్ చేయబడిన నోడ్‌ను ఒక జాబితాలో రిటర్న్ చేయాలి, [ అతి చిన్న విలువ, దాని ఇండెక్స్ ],\n    సమ విలువలు లేదా ఇచ్చిన అర్రే ఖాళీ అయితే, [] రిటర్న్ చేయాలి.\n\n    ఉదాహరణ 1:\n        ఇన్‌పుట్: [4,2,3]\n        అవుట్‌పుట్: [2, 1]\n        వివరణ: 2 కు అతి చిన్న సమ విలువ ఉంది, మరియు 2 కు అతి చిన్న ఇండెక్స్ ఉంది.\n\n    ఉదాహరణ 2:\n        ఇన్‌పుట్: [1,2,3]\n        అవుట్‌పుట్: [2, 1]\n        వివరణ: 2 కు అతి చిన్న సమ విలువ ఉంది, మరియు 2 కు అతి చిన్న ఇండెక్స్ ఉంది.\n\n    ఉదాహరణ 3:\n        ఇన్‌పుట్: []\n        అవుట్‌పుట్: []\n    \n    ఉదాహరణ 4:\n        ఇన్‌పుట్: [5, 0, 3, 0, 4, 2]\n        అవుట్‌పుట్: [0, 1]\n        వివరణ: 0 అతి చిన్న విలువ, కానీ రెండు సున్నాలు ఉన్నాయి,\n                     కాబట్టి మేము మొదటి సున్నాను ఎంచుకుంటాము, దానికి అతి చిన్న ఇండెక్స్ ఉంది.\n\n    నిబంధనలు:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n","canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/69","prompt":"def func(lst):\n    '''\n    మీకు ఖాళీ కాని పాజిటివ్ ఇంటిజర్ల జాబితా ఇవ్వబడింది. సున్నా కంటే గొప్ప ఇంటిజర్ ను మరియు దాని విలువ కంటే సమానంగా లేదా ఎక్కువగా ఫ్రీక్వెన్సీ ఉన్న ఇంటిజర్ ను తిరిగి ఇవ్వండి.\n    ఒక ఇంటిజర్ యొక్క ఫ్రీక్వెన్సీ అనేది అది జాబితాలో ఎన్ని సార్లు కనిపిస్తుందో అని అర్థం.\n    అలాంటి విలువ లేకపోతే, -1 ను తిరిగి ఇవ్వండి.\n    ఉదాహరణలు:\n        func([4, 1, 2, 2, 3, 1]) == 2\n        func([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        func([5, 5, 4, 4, 4]) == -1\n    '''","canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n","test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n","entry_point":"func"}
{"task_id":"HumanEval\/70","prompt":"def func(lst):\n    '''\n    ఇచ్చిన పూర్ణాంకాల జాబితాను వింత క్రమంలో తిరిగి ఇవ్వండి.\n    వింత క్రమం అంటే, మొదట కనిష్ట విలువ నుండి ప్రారంభించి,\n    మిగిలిన పూర్ణాంకాలలో గరిష్ట విలువ, తరువాత కనిష్ట విలువ మరియు అలాగే కొనసాగుతుంది.\n\n    ఉదాహరణలు:\n    func([1, 2, 3, 4]) == [1, 4, 2, 3]\n    func([5, 5, 5, 5]) == [5, 5, 5, 5]\n    func([]) == []\n    '''\n","canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/71","prompt":"def func(a, b, c):\n    '''\n    మూడు పక్షుల పొడవులు ఇచ్చిన ఒక త్రిభుజం యొక్క వైశాల్యం ని రెండు దశాంశాల స్థానంలో గుండ్రంగా మార్చి తిరిగి ఇవ్వండి. \n    మూడు పక్షులు సరైన త్రిభుజం ఏర్పరచలేదు అనుకుంటే -1 ని తిరిగి ఇవ్వండి.\n    ఏ రెండు పక్షుల మొత్తం మూడవ పక్షం కంటే ఎక్కువ అయితే మూడు పక్షులు సరైన త్రిభుజం ఏర్పరచుతాయి.\n    ఉదాహరణ:\n    func(3, 4, 5) == 6.00\n    func(1, 2, 10) == -1\n    '''\n","canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n","entry_point":"func"}
{"task_id":"HumanEval\/72","prompt":"def func(q,w):\n    '''\n    ఒబ్జెక్ట్ q ఎగరడం సాధ్యమైతే True ని మరియు లేకపోతే False ని రిటర్న్ చేసే ఫంక్షన్ రాయండి.\n    ఒబ్జెక్ట్ q సమతుల్యమైనది (అది ఒక పాలిండ్రోమిక్ జాబితా) మరియు దాని అంశాల మొత్తం గరిష్ఠ సాధ్యమైన బరువు w కంటే తక్కువ లేదా సమానమైతే అది ఎగరుతుంది.\n\n    ఉదాహరణ:\n    func([1, 2], 5) ➞ False \n    # 1+2 గరిష్ఠ సాధ్యమైన బరువు కంటే తక్కువ, కానీ అది సమతుల్యం కాదు.\n\n    func([3, 2, 3], 1) ➞ False\n    # అది సమతుల్యం, కానీ 3+2+3 గరిష్ఠ సాధ్యమైన బరువు కంటే ఎక్కువ.\n\n    func([3, 2, 3], 9) ➞ True\n    # 3+2+3 గరిష్ఠ సాధ్యమైన బరువు కంటే తక్కువ, మరియు అది సమతుల్యం.\n\n    func([3], 5) ➞ True\n    # 3 గరిష్ఠ సాధ్యమైన బరువు కంటే తక్కువ, మరియు అది సమతుల్యం.\n    '''\n","canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/73","prompt":"def func(arr):\n    \"\"\"\n    ఇంటిజర్ల యొక్క ఒక అర్రే arr ఇవ్వబడింది, అర్రేను పాలిండ్రోమిక్ గా మార్చడానికి కనీసం ఎన్ని ఎలిమెంట్లను మార్చాలో కనుగొనండి. ఒక పాలిండ్రోమిక్ అర్రే అనేది వెనుకకు మరియు ముందుకు ఒకేలా చదవబడే అర్రే. ఒక మార్పులో, మీరు ఒక ఎలిమెంట్ను ఏ ఇతర ఎలిమెంట్కు అయినా మార్చవచ్చు.\n\n    ఉదాహరణకు:\n    func([1,2,3,5,4,7,9,6]) == 4\n    func([1, 2, 3, 4, 3, 2, 2]) == 1\n    func([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n","canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n","entry_point":"func"}
{"task_id":"HumanEval\/74","prompt":"def func(lst1, lst2):\n    '''\n    రెండు స్ట్రింగ్ లిస్ట్‌లను స్వీకరించే ఫంక్షన్‌ను వ్రాయండి, అందులో ఉన్న అన్ని స్ట్రింగ్‌లలో మొత్తం అక్షరాల సంఖ్య మరొక లిస్ట్‌కంటే తక్కువ ఉన్న లిస్ట్‌ను రిటర్న్ చేస్తుంది.\n\n    రెండు లిస్ట్‌లలో అక్షరాల సంఖ్య సమానమైనప్పుడు, మొదటి లిస్ట్‌ను రిటర్న్ చేయండి.\n\n    ఉదాహరణలు\n    func([], []) ➞ []\n    func(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    func(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    func(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    func(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n","canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/75","prompt":"def func(a):\n    \"\"\"ఇచ్చిన సంఖ్య మూడు ప్రధాన సంఖ్యల గుణకం అయితే నిజం అని మరియు లేకపోతే తప్పు అని రిటర్న్ చేసే ఫంక్షన్ రాయండి.\n    (a) 100 కంటే తక్కువ అని తెలుసు.\n    ఉదాహరణ:\n    func(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"","canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n","test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/76","prompt":"def func(x, n):\n    \"\"\"మీ పని ఒక సంఖ్య x ను సరళమైన n యొక్క శక్తిగా ఉంటే నిజం అని మరియు ఇతర కేసులలో అబద్ధం అని రిటర్న్ చేసే ఫంక్షన్ రాయడం.\n    x ఒక సరళమైన n యొక్క శక్తి అయితే n**int=x\n    ఉదాహరణకు:\n    func(1, 4) => true\n    func(2, 2) => true\n    func(8, 2) => true\n    func(3, 2) => false\n    func(3, 1) => false\n    func(5, 3) => false\n    \"\"\"","canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/77","prompt":"def func(a):\n    '''\n    ఒక పూర్ణాంకం a తీసుకొని, ఆ పూర్ణాంకం ఏదైనా పూర్ణాంక సంఖ్య ఘనం అయితే True ని రిటర్న్ చేసే ఫంక్షన్ రాయండి.\n    గమనిక: ఇన్‌పుట్ ఎప్పుడూ సరైనది అని భావించవచ్చు.\n    ఉదాహరణలు:\n    func(1) ==> True\n    func(2) ==> False\n    func(-1) ==> True\n    func(64) ==> True\n    func(0) ==> True\n    func(180) ==> False\n    '''\n","canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n","entry_point":"func"}
{"task_id":"HumanEval\/78","prompt":"def func(num):\n    \"\"\"మీరు ఒక హెక్సాడెసిమల్ సంఖ్యను స్ట్రింగ్‌గా పొంది, హెక్సాడెసిమల్ అంకెలలో ప్రైమ్ అంకెలు (ప్రైమ్ సంఖ్య, లేదా ప్రైమ్, అనేది 1 కంటే పెద్ద సహజ సంఖ్య మరియు రెండు చిన్న సహజ సంఖ్యల ఉత్పత్తి కాదు) ఎన్ని ఉన్నాయో లెక్కించే ఫంక్షన్‌ను రాయడానికి మీకు పని ఇచ్చారు.\n    హెక్సాడెసిమల్ అంకెలు 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    ప్రైమ్ సంఖ్యలు 2, 3, 5, 7, 11, 13, 17,...\n    కాబట్టి మీరు ఈ క్రింది అంకెల సంఖ్యను నిర్ధారించాలి: 2, 3, 5, 7, \n    B (=దశాంశం 11), D (=దశాంశం 13).\n    గమనిక: మీరు ఇన్‌పుట్ ఎప్పుడూ సరైనది లేదా ఖాళీ స్ట్రింగ్ అని, మరియు A,B,C,D,E,F అక్షరాలు ఎప్పుడూ అప్పర్‌కేస్‌లో ఉంటాయని భావించవచ్చు.\n    ఉదాహరణలు:\n    num = \"AB\" కొరకు అవుట్‌పుట్ 1 ఉండాలి.\n    num = \"1077E\" కొరకు అవుట్‌పుట్ 2 ఉండాలి.\n    num = \"ABED1A33\" కొరకు అవుట్‌పుట్ 4 ఉండాలి.\n    num = \"123456789ABCDEF0\" కొరకు అవుట్‌పుట్ 6 ఉండాలి.\n    num = \"2020\" కొరకు అవుట్‌పుట్ 2 ఉండాలి.\n    \"\"\"","canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n","entry_point":"func"}
{"task_id":"HumanEval\/79","prompt":"def func(decimal):\n    \"\"\"మీకు ఒక సంఖ్యను దశాంశ రూపంలో ఇవ్వబడుతుంది మరియు మీ పని దానిని బైనరీ ఫార్మాట్‌కు మార్చడం. ఫంక్షన్ ఒక స్ట్రింగ్‌ను రిటర్న్ చేయాలి, ప్రతి అక్షరం ఒక బైనరీ సంఖ్యను ప్రతినిధించాలి. స్ట్రింగ్‌లోని ప్రతి అక్షరం '0' లేదా '1' గా ఉంటుంది.\n\n    స్ట్రింగ్ ప్రారంభంలో మరియు చివరలో 'db' అనే అదనపు జత అక్షరాలు ఉంటాయి.\n    అదనపు అక్షరాలు ఫార్మాట్‌తో సహాయం చేయడానికి ఉంటాయి.\n\n    ఉదాహరణలు:\n    func(15)   # \"db1111db\" అని రిటర్న్ చేస్తుంది\n    func(32)   # \"db100000db\" అని రిటర్న్ చేస్తుంది\n    \"\"\"","canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/80","prompt":"def func(s):\n    \"\"\"మీకు ఒక స్ట్రింగ్ s ఇవ్వబడింది.\n    ఆ స్ట్రింగ్ హ్యాపీగా ఉందో లేదో మీరు తనిఖీ చేయాలి.\n    ఒక స్ట్రింగ్ దాని పొడవు కనీసం 3 ఉండి, ప్రతి 3 వరుస అక్షరాలు విభిన్నమైనప్పుడు హ్యాపీగా ఉంటుంది\n    ఉదాహరణకు:\n    func(a) => False\n    func(aa) => False\n    func(abcd) => True\n    func(aabb) => False\n    func(adb) => True\n    func(xyy) => False\n    \"\"\"","canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n","entry_point":"func"}
{"task_id":"HumanEval\/81","prompt":"def func(grades):\n    \"\"\"సెమిస్టర్ యొక్క చివరి వారం మరియు ఉపాధ్యాయురాలు విద్యార్థులకు గ్రేడ్లు ఇవ్వాలి. ఉపాధ్యాయురాలు తన స్వంత గ్రేడింగ్ అల్గారిథం తయారు చేసుకుంది.\n    ఏకైక సమస్య ఏమిటంటే, ఆమె గ్రేడింగ్ కోసం ఉపయోగించిన కోడ్ పోయింది.\n    ఆమె కొన్ని విద్యార్థుల జీపీఏల జాబితా ఇచ్చింది మరియు మీరు క్రింది పట్టిక ఉపయోగించి అక్షర గ్రేడ్ల జాబితాను అవుట్పుట్ చేయగల ఫంక్షన్ రాయాలి:\n             GPA       |    అక్షర గ్రేడ్\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    ఉదాహరణ:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"","canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/82","prompt":"def func(string):\n    \"\"\"ఒక స్ట్రింగ్ తీసుకొని దాని పొడవు ప్రైమ్ సంఖ్య అయితే True ని లేదా False ని రిటర్న్ చేసే ఫంక్షన్ రాయండి\n    ఉదాహరణలు\n    func('Hello') == True\n    func('abcdcba') == True\n    func('kittens') == True\n    func('orange') == False\n    \"\"\"","canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/83","prompt":"def func(n):\n    \"\"\"\n    ఒక పాజిటివ్ ఇంటిజర్ n ఇవ్వబడినప్పుడు, n-అంకెల పాజిటివ్ ఇంటిజర్లలో 1 తో ప్రారంభమైన లేదా ముగిసిన సంఖ్యల సంఖ్యను తిరిగి ఇవ్వండి.\n    \"\"\"\n","canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/84","prompt":"def func(N):\n    \"\"\"ఒక పాజిటివ్ ఇంటిజర్ N ఇచ్చినప్పుడు, దాని అంకెల యొక్క బైనరీలో మొత్తం సంఖ్యను తిరిగి ఇవ్వండి.\n    \n    ఉదాహరణ\n        N = 1000 అయితే, అంకెల మొత్తం 1 అవుతుంది, దానిని \"1\" గా తిరిగి ఇవ్వాలి.\n        N = 150 అయితే, అంకెల మొత్తం 6 అవుతుంది, దానిని \"110\" గా తిరిగి ఇవ్వాలి.\n        N = 147 అయితే, అంకెల మొత్తం 12 అవుతుంది, దానిని \"1100\" గా తిరిగి ఇవ్వాలి.\n    \n    వేరియబుల్స్:\n        @N ఇంటిజర్\n             పరిమితులు: 0 ≤ N ≤ 10000.\n    అవుట్‌పుట్:\n         ఒక బైనరీ సంఖ్య యొక్క స్ట్రింగ్\n    \"\"\"","canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/85","prompt":"def func(lst):\n    \"\"\"ఖాళీ కాని పూర్తి సంఖ్యల జాబితా lst ఇచ్చారు. విషమ సూచికలలో ఉన్న సమ అంశాలను కలపండి.\n\n\n    ఉదాహరణలు:\n        func([4, 2, 6, 7]) ==> 2 \n    \"\"\"","canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n","entry_point":"func"}
{"task_id":"HumanEval\/86","prompt":"def func(s):\n    \"\"\"\n    ఒక స్ట్రింగ్‌ను తీసుకొని, దాని క్రమబద్ధమైన వెర్షన్‌ను రిటర్న్ చేసే ఫంక్షన్‌ను రాయండి.\n    క్రమబద్ధమైన వెర్షన్ అనేది ఒక స్ట్రింగ్ ఉండి, అందులోని అన్ని పదాలు (స్పేస్ ద్వారా వేరు చేయబడినవి)\n    ఆస్కీ విలువ ఆధారంగా ఆరోహణ క్రమంలో అమర్చబడిన కొత్త పదంతో మార్చబడతాయి.\n    గమనిక: మీరు వాక్యంలో పదాల క్రమం మరియు ఖాళీ స్థలాలను యథాతథంగా ఉంచాలి.\n\n    ఉదాహరణకు:\n    func('Hi') రిటర్న్స్ 'Hi'\n    func('hello') రిటర్న్స్ 'ehllo'\n    func('Hello World!!!') రిటర్న్స్ 'Hello !!!Wdlor'\n    \"\"\"\n","canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/87","prompt":"def func(lst, x):\n    \"\"\"\n    మీకు 2 డైమెన్షనల్ డేటా, నెస్టెడ్ లిస్ట్స్ రూపంలో ఇవ్వబడింది,\n    ఇది మ్యాట్రిక్స్‌లాగా ఉంది, అయితే, మ్యాట్రిక్స్‌లకు భిన్నంగా,\n    ప్రతి వరుసలో వేర్వేరు సంఖ్యలో కాలమ్స్ ఉండవచ్చు.\n    ఇచ్చిన lst, మరియు పూర్ణాంకం x కొరకు, లిస్ట్‌లో ఉన్న x పూర్ణాంకాలను కనుగొని,\n    టపుల్స్ యొక్క లిస్ట్‌ను [(x1, y1), (x2, y2) ...] రీతిలో రిటర్న్ చేయండి, అందులో\n    ప్రతి టపుల్ ఒక కోఆర్డినేట్ - (వరుస, కాలమ్స్), 0 నుండి ప్రారంభించి.\n    మొదట వరుసల క్రమంలో ఆరోహణ క్రమంలో కోఆర్డినేట్స్‌ను సార్ట్ చేయండి.\n    అలాగే, వరుస యొక్క కోఆర్డినేట్స్‌ను కాలమ్స్‌లో అవరోహణ క్రమంలో సార్ట్ చేయండి.\n    \n    ఉదాహరణలు:\n    func([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    func([], 1) == []\n    func([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n","canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/88","prompt":"def func(array):\n    \"\"\"\n    సున్నితమైన పూర్ణాంకాల యొక్క ఒక అర్రే ఇవ్వబడింది, ఇచ్చిన అర్రేను క్రమబద్ధం చేసిన కాపీని తిరిగి ఇవ్వండి,\n    మీరు ఇచ్చిన అర్రేను ఆరోహణ క్రమంలో క్రమబద్ధం చేయాలి ఒకవేళ (మొదటి ఇండెక్స్ విలువ, చివరి ఇండెక్స్ విలువ) యొక్క మొత్తం ఒడ్డు అయితే,\n    లేదా అది సమం అయితే అవరోహణ క్రమంలో క్రమబద్ధం చేయాలి.\n\n    గమనిక:\n    * ఇచ్చిన అర్రేను మార్చకండి.\n\n    ఉదాహరణలు:\n    * func([]) => []\n    * func([5]) => [5]\n    * func([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * func([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n","canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/89","prompt":"def func(s):\n    \"\"\"ఒక స్ట్రింగ్‌ను ఆర్గ్యుమెంట్‌గా తీసుకుని అక్షరాలను రొటేట్ చేసి ఎన్‌క్రిప్ట్ చేసే ఫంక్షన్ func ను సృష్టించండి.\n    అక్షరాలు రెండు స్థానాలకు రెండు రెట్లు కిందకి షిఫ్ట్ అయ్యే విధంగా అల్ఫాబెట్ రొటేట్ చేయబడాలి.\n    ఉదాహరణకు:\n    func('hi') అనేది 'lm' ను రిటర్న్ చేస్తుంది\n    func('asdfghjkl') అనేది 'ewhjklnop' ను రిటర్న్ చేస్తుంది\n    func('gf') అనేది 'kj' ను రిటర్న్ చేస్తుంది\n    func('et') అనేది 'ix' ను రిటర్న్ చేస్తుంది\n    \"\"\"","canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/90","prompt":"def func(lst):\n    \"\"\"\n    మీకు ఒక పూర్తి సంఖ్యల జాబితా ఇవ్వబడింది.\n    జాబితాలోని 2వ అతి చిన్న అంశాన్ని రిటర్న్ చేసే func() అనే ఫంక్షన్‌ను వ్రాయండి.\n    అలాంటి అంశం లేకపోతే None ని రిటర్న్ చేయండి.\n    \n    func([1, 2, 3, 4, 5]) == 2\n    func([5, 1, 4, 3, 2]) == 2\n    func([]) == None\n    func([1, 1]) == None\n    \"\"\"\n","canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/91","prompt":"def func(S):\n    \"\"\"\n    మీకు పదాల స్ట్రింగ్ ఇవ్వబడుతుంది, మీ పని ఎన్ని బోర్డమ్స్ ఉన్నాయో లెక్కించడం. ఒక బోర్డమ్ అనేది \"I\" అనే పదంతో మొదలయ్యే వాక్యం. వాక్యాలు '.' లేదా '?' లేదా '!' చిహ్నాలతో పరిమితం అవుతాయి.\n   \n    ఉదాహరణకు:\n    >>> func(\"Hello world\")\n    0\n    >>> func(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n","canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/92","prompt":"def func(x, y, z):\n    '''\n    మూడు సంఖ్యలను తీసుకునే ఒక ఫంక్షన్ సృష్టించండి.\n    మూడు సంఖ్యలలో ఒకటి మిగిలిన రెండు సంఖ్యల మొత్తానికి సమానమైనప్పుడు, మరియు అన్ని సంఖ్యలు పూర్ణాంకాలు అయినప్పుడు నిజం అని తిరిగి ఇవ్వండి.\n    ఇతర ఏ కేసులలోనైనా అబద్ధం అని తిరిగి ఇవ్వండి.\n    \n    ఉదాహరణలు\n    func(5, 2, 7) ➞ నిజం\n    \n    func(3, 2, 2) ➞ అబద్ధం\n\n    func(3, -2, 1) ➞ నిజం\n    \n    func(3.6, -2.2, 2) ➞ అబద్ధం\n  \n\n    \n    '''\n","canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/93","prompt":"def func(message):\n    \"\"\"\n    ఒక సందేశాన్ని తీసుకొని, అన్ని అక్షరాల కేసును మార్చి, సందేశంలోని అన్ని అచ్చులను ఆ అచ్చుకు ఆంగ్ల అక్షరాల శ్రేణిలో రెండు స్థానాలు ముందుగా ఉన్న అచ్చుతో మార్చే విధంగా ఎన్కోడ్ చేసే ఫంక్షన్ రాయండి.\n    కేవలం అక్షరాలను మాత్రమే అనుకోండి.\n    \n    ఉదాహరణలు:\n    >>> func('test')\n    'TGST'\n    >>> func('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n","canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/94","prompt":"def func(lst):\n    \"\"\"మీకు ఒక పూర్ణాంకాల జాబితా ఇవ్వబడింది.\n    మీరు అతిపెద్ద ప్రైమ్ విలువను కనుగొని దాని అంకెల మొత్తాన్ని తిరిగి ఇవ్వాలి.\n\n    ఉదాహరణలు:\n    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] కొరకు ఫలితం 10 ఉండాలి\n    lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] కొరకు ఫలితం 25 ఉండాలి\n    lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] కొరకు ఫలితం 13 ఉండాలి\n    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] కొరకు ఫలితం 11 ఉండాలి\n    lst = [0,81,12,3,1,21] కొరకు ఫలితం 3 ఉండాలి\n    lst = [0,8,1,2,1,7] కొరకు ఫలితం 7 ఉండాలి\n    \"\"\"","canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n","entry_point":"func"}
{"task_id":"HumanEval\/95","prompt":"def func(dict):\n    \"\"\"\n    ఒక నిఘంటువు ఇచ్చారు, అందులో అన్ని కీలు చిన్న అక్షరాలలో ఉన్న స్ట్రింగ్‌లు లేదా అన్ని కీలు పెద్ద అక్షరాలలో ఉన్న స్ట్రింగ్‌లు అయితే True ని రిటర్న్ చేయాలి, లేకపోతే False ని రిటర్న్ చేయాలి.\n    ఇచ్చిన నిఘంటువు ఖాళీ అయితే ఫంక్షన్ False ని రిటర్న్ చేయాలి.\n    ఉదాహరణలు:\n    func({\"a\":\"apple\", \"b\":\"banana\"}) అనేది True ని రిటర్న్ చేయాలి.\n    func({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) అనేది False ని రిటర్న్ చేయాలి.\n    func({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) అనేది False ని రిటర్న్ చేయాలి.\n    func({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) అనేది False ని రిటర్న్ చేయాలి.\n    func({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) అనేది True ని రిటర్న్ చేయాలి.\n    \"\"\"\n","canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n","entry_point":"func"}
{"task_id":"HumanEval\/96","prompt":"def func(n):\n    \"\"\"ఒక అనాహత పూర్ణాంకం తీసుకొని, n కంటే తక్కువ మరియు ప్రధమ సంఖ్యలు అయిన మొదటి n పూర్ణాంకాల యొక్క ఒక అర్రేను రిటర్న్ చేసే ఫంక్షన్ అమలు చేయండి.\n    ఉదాహరణకు:\n    func(5) => [2,3]\n    func(11) => [2,3,5,7]\n    func(0) => []\n    func(20) => [2,3,5,7,11,13,17,19]\n    func(1) => []\n    func(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n","canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n","test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/97","prompt":"def func(a, b):\n    \"\"\"రెండు పూర్ణాంకాలను తీసుకొని వాటి ఏకాంక అంకెల గుణకారం రిటర్న్ చేసే ఫంక్షన్‌ను పూర్తి చేయండి.\n    ఇన్‌పుట్ ఎప్పుడూ సరైనది అని ఊహించండి.\n    ఉదాహరణలు:\n    func(148, 412) అనేది 16 ని రిటర్న్ చేయాలి.\n    func(19, 28) అనేది 72 ని రిటర్న్ చేయాలి.\n    func(2020, 1851) అనేది 0 ని రిటర్న్ చేయాలి.\n    func(14,-15) అనేది 20 ని రిటర్న్ చేయాలి.\n    \"\"\"","canonical_solution":"    return abs(a % 10) * abs(b % 10)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n","entry_point":"func"}
{"task_id":"HumanEval\/98","prompt":"def func(s):\n    \"\"\"\n    ఒక స్ట్రింగ్ s ఇచ్చినప్పుడు, సమ సూచికలలో ఉన్న పెద్దక్షరాల అచ్చుల సంఖ్యను లెక్కించండి.\n    \n    ఉదాహరణకు:\n    func('aBCdEf') 1 ని రిటర్న్ చేస్తుంది\n    func('abcdefg') 0 ని రిటర్న్ చేస్తుంది\n    func('dBBE') 0 ని రిటర్న్ చేస్తుంది\n    \"\"\"","canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/99","prompt":"def func(value):\n    '''\n    ఒక సంఖ్యను ప్రతినిధించే విలువ (స్ట్రింగ్) తీసుకుని, దానికి అత్యంత సమీపంగా ఉన్న పూర్ణాంకాన్ని రిటర్న్ చేసే ఫంక్షన్‌ను సృష్టించండి. ఒక సంఖ్య రెండు పూర్ణాంకాల మధ్య సమాన దూరంలో ఉంటే, దానిని సున్నా నుండి దూరంగా రౌండ్ చేయండి.\n\n    ఉదాహరణలు\n    >>> func(\"10\")\n    10\n    >>> func(\"15.3\")\n    15\n\n    గమనిక:\n    సున్నా నుండి దూరంగా రౌండ్ చేయడం అంటే, ఇచ్చిన సంఖ్య రెండు పూర్ణాంకాల మధ్య సమాన దూరంలో ఉంటే, మీరు రిటర్న్ చేయవలసినది సున్నా నుండి అత్యంత దూరంలో ఉన్నది. ఉదాహరణకు func(\"14.5\") అనేది 15ని మరియు func(\"-14.5\") అనేది -15ని రిటర్న్ చేయాలి.\n    '''\n","canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/100","prompt":"def func(n):\n    \"\"\"\n    ఒక పాజిటివ్ ఇంటిజర్ n ఇవ్వబడినప్పుడు, మీరు n స్థాయిల రాళ్ళ కుప్పను ఏర్పరచాలి.\n    మొదటి స్థాయిలో n రాళ్ళు ఉంటాయి.\n    తర్వాతి స్థాయిలో రాళ్ళ సంఖ్య ఈ క్రింది ప్రకారం:\n        - ఒక విషమ సంఖ్య అయితే తర్వాతి విషమ సంఖ్య.\n        - ఒక సమ సంఖ్య అయితే తర్వాతి సమ సంఖ్య.\n    ప్రతి స్థాయిలో ఉన్న రాళ్ళ సంఖ్యను ఒక జాబితాలో తిరిగి ఇవ్వండి, అందులో ఇండెక్స్ i వద్ద ఉన్న మూలకం స్థాయి (i+1) లో ఉన్న రాళ్ళ సంఖ్యను సూచిస్తుంది.\n\n    ఉదాహరణలు:\n    >>> func(3)\n    [3, 5, 7]\n    \"\"\"\n","canonical_solution":"    return [n + 2*i for i in range(n)]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/101","prompt":"def func(s):\n    \"\"\"\n    మీకు కామాలు లేదా స్పేస్‌లతో వేరు చేయబడిన పదాల స్ట్రింగ్ ఇవ్వబడుతుంది. మీ పని ఈ స్ట్రింగ్‌ను పదాలుగా విడదీసి, పదాల అర్రేను రిటర్న్ చేయడం.\n    \n    ఉదాహరణకు:\n    func(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    func(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"","canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/102","prompt":"def func(x, y):\n    \"\"\"ఈ ఫంక్షన్ రెండు పాజిటివ్ సంఖ్యలు x మరియు y తీసుకొని, [x, y] పరిధిలో ఉన్న అతిపెద్ద సమ పూర్ణాంక సంఖ్యను రిటర్న్ చేస్తుంది. అలాంటి సంఖ్య లేకపోతే, ఫంక్షన్ -1 ని రిటర్న్ చేయాలి.\n\n    ఉదాహరణకు:\n    func(12, 15) = 14\n    func(13, 12) = -1\n    \"\"\"","canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n","entry_point":"func"}
{"task_id":"HumanEval\/103","prompt":"def func(n, m):\n    \"\"\"మీకు రెండు సానుకూల పూర్ణాంకాలు n మరియు m ఇవ్వబడ్డాయి, మీ పని n నుండి m వరకు (n మరియు m కలిపి) పూర్ణాంకాల సగటును లెక్కించడం.\n    సమాధానాన్ని సమీప పూర్ణాంకానికి గుండ్రంగా మార్చి దానిని బైనరీకి మార్చండి.\n    ఒకవేళ n మరియు m కంటే పెద్దదైతే, -1 ని రిటర్న్ చేయండి.\n    ఉదాహరణ:\n    func(1, 5) => \"0b11\"\n    func(7, 5) => -1\n    func(10, 20) => \"0b1111\"\n    func(20, 33) => \"0b11010\"\n    \"\"\"\n","canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/104","prompt":"def func(x):\n    \"\"\"పాజిటివ్ ఇంటిజర్స్ యొక్క జాబితా x ఇచ్చినప్పుడు, ఏ సంఖ్యలోనూ సమ అంకెలు లేని అన్ని అంశాలను క్రమంగా పెంచిన జాబితాను రిటర్న్ చేయండి.\n\n    గమనిక: రిటర్న్ చేయబడిన జాబితా పెరిగే క్రమంలో ఉండాలి.\n    \n    ఉదాహరణకు:\n    >>> func([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> func([152, 323, 1422, 10])\n    []\n    \"\"\"","canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/105","prompt":"def func(arr):\n    \"\"\"\n    ఒక పూర్ణాంకాల అర్రే ఇవ్వబడినప్పుడు, 1 నుండి 9 మధ్య ఉన్న పూర్ణాంకాలను క్రమంగా పెట్టి, ఆ అర్రేను తిరగబెట్టి, ఆ తరువాత ప్రతి అంకెను దానికి సంబంధించిన పేరుతో \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" అనే పేర్లతో మార్చండి.\n\n    ఉదాహరణకు:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> arr ను క్రమంగా పెట్టు -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> arr ను తిరగబెట్టు -> [8, 5, 4, 3, 2, 2, 1, 1]\n      రిటర్న్ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      అర్రే ఖాళీగా ఉంటే, ఖాళీ అర్రేను రిటర్న్ చేయండి:\n      arr = []\n      రిటర్న్ []\n    \n      అర్రేలో ఏదైనా వింత సంఖ్య ఉంటే దానిని పట్టించుకోకండి:\n      arr = [1, -1 , 55] \n            -> arr ను క్రమంగా పెట్టు -> [-1, 1, 55]\n            -> arr ను తిరగబెట్టు -> [55, 1, -1]\n      రిటర్న్ = ['One']\n    \"\"\"\n","canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/106","prompt":"defunc func(n):\n    \"\"\" n అనే పరామితిని తీసుకునే func అనే ఫంక్షన్ అమలు చేయండి,\n    మరియు n పరిమాణం గల జాబితాను రిటర్న్ చేయండి, అందులో i సూచిక వద్ద ఉన్న మూలకం విలువ i యొక్క ఫ్యాక్టరియల్ అయితే i సమం ఉంటుంది\n    లేదా 1 నుండి i వరకు సంఖ్యల మొత్తం ఉంటుంది.\n    i 1 నుండి ప్రారంభమవుతుంది.\n    i యొక్క ఫ్యాక్టరియల్ అంటే 1 నుండి i వరకు సంఖ్యల గుణకం (1 * 2 * ... * i).\n    ఉదాహరణ:\n    func(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n","canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n","test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n","entry_point":"func"}
{"task_id":"HumanEval\/107","prompt":"def func(n):\n    \"\"\"\n    ఒక పాజిటివ్ ఇంటిజర్ n ఇచ్చినప్పుడు, అందులో ఉన్న సంఖ్యల్లో ఎన్ని సమ మరియు విషమ ఇంటిజర్ పాలిండ్రోమ్‌లు ఉన్నాయో అనే సంఖ్యలను కలిగిన ఒక జతను రిటర్న్ చేయాలి.\n\n    ఉదాహరణ 1:\n\n        ఇన్‌పుట్: 3\n        అవుట్‌పుట్: (1, 2)\n        వివరణ:\n        ఇంటిజర్ పాలిండ్రోమ్‌లు 1, 2, 3. వాటిలో ఒకటి సమం, రెండు విషమం.\n\n    ఉదాహరణ 2:\n\n        ఇన్‌పుట్: 12\n        అవుట్‌పుట్: (4, 6)\n        వివరణ:\n        ఇంటిజర్ పాలిండ్రోమ్‌లు 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. వాటిలో నాలుగు సమం, ఆరు విషమం.\n\n    గమనిక:\n        1. 1 <= n <= 10^3\n        2. రిటర్న్ చేయబడిన జతలో సమ మరియు విషమ ఇంటిజర్ పాలిండ్రోమ్‌ల సంఖ్యలు వరుసగా ఉంటాయి.\n    \"\"\"\n","canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/108","prompt":"def func(arr):\n    \"\"\"\n    ఒక పూర్ణాంకాల అర్రేను తీసుకొని, అంకెల మొత్తం > 0 గల అంశాల సంఖ్యను తిరిగి ఇచ్చే func అనే ఫంక్షన్‌ను వ్రాయండి.\n    ఒక సంఖ్య నెగటివ్ అయితే, దాని మొదటి సైన్ చేసిన అంకె నెగటివ్ ఉంటుంది:\n    ఉదా. -123 యొక్క సైన్ చేసిన అంకెలు -1, 2, మరియు 3.\n    >>> func([]) == 0\n    >>> func([-1, 11, -11]) == 1\n    >>> func([1, 1, 2]) == 3\n    \"\"\"\n","canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/109","prompt":"def func(arr):\n    \"\"\"మనకు 'arr' అనే N పూర్ణాంకాల అర్రే arr[1], arr[2], ..., arr[N] ఉంటుంది.అర్రేలోని సంఖ్యలు యాదృచ్ఛిక క్రమంలో ఉంటాయి. మీ పని ఈ క్రింది ఆపరేషన్‌ను ఇచ్చిన అర్రేపై చేస్తూ అర్రేను ఆరోహణ క్రమంలో సర్ట్ చేయగలమో లేదో నిర్ణయించడం:\n        మీరు ఎన్ని సార్లు అయినా కుడి షిఫ్ట్ ఆపరేషన్‌ను చేయవచ్చు.\n    \n    ఒక కుడి షిఫ్ట్ ఆపరేషన్ అంటే అర్రేలోని అన్ని అంశాలను కుడి దిశలో ఒక స్థానం మేర షిఫ్ట్ చేయడం. అర్రేలోని చివరి అంశం అర్రేలోని ప్రారంభ స్థానం అయిన 0వ సూచికకు తరలించబడుతుంది.\n\n    పైన చెప్పిన ఆపరేషన్‌ను చేస్తూ సర్ట్ చేసిన అర్రేను పొందగలిగితే నిజం లేదా తప్పు అని తిరిగి ఇవ్వండి.\n    ఇచ్చిన అర్రే ఖాళీ అయితే నిజం అని తిరిగి ఇవ్వండి.\n\n    గమనిక: ఇచ్చిన జాబితాలో అద్వితీయ అంశాలు ఉంటాయి.\n\n    ఉదాహరణకు:\n    \n    func([3, 4, 5, 1, 2])==>True\n    వివరణ: 2 కుడి షిఫ్ట్ ఆపరేషన్‌లను చేస్తూ, ఇచ్చిన అర్రేకు ఆరోహణ క్రమం సాధించవచ్చు.\n    func([3, 5, 4, 1, 2])==>False\n    వివరణ:ఎన్ని కుడి షిఫ్ట్ ఆపరేషన్‌లను చేసినా, ఇచ్చిన అర్రేకు ఆరోహణ క్రమం సాధించలేము.\n                \n    \"\"\"","canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n","entry_point":"func"}
{"task_id":"HumanEval\/110","prompt":"def func(lst1, lst2):\n    \"\"\"ఈ సమస్యలో, మీరు రెండు సంఖ్యల జాబితాలను తీసుకునే ఒక ఫంక్షన్‌ను అమలు చేయాలి,\n    మరియు lst1ని కేవలం సమ సంఖ్యల జాబితాగా చేయడానికి వాటి మధ్య అంశాల మార్పిడిని\n    చేయగలిగేది కాదో నిర్ధారించాలి.\n    lst1 మరియు lst2 మధ్య మార్పిడి చేయబడిన అంశాల సంఖ్యపై పరిమితి లేదు.\n    lst1 మరియు lst2 మధ్య అంశాలను మార్చి lst1 యొక్క అన్ని అంశాలను\n    సమ సంఖ్యలుగా చేయగలిగితే, \"YES\" అని తిరిగి ఇవ్వండి.\n    లేకపోతే, \"NO\" అని తిరిగి ఇవ్వండి.\n    ఉదాహరణకు:\n    func([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    func([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    ఇన్‌పుట్ జాబితాలు ఖాళీ కాకుండా ఉంటాయని అనుకుంటారు.\n    \"\"\"","canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/111","prompt":"def func(test):\n    \"\"\"ఒక స్పేస్ సెపరేటెడ్ లోయర్‌కేస్ అక్షరాలను ప్రతినిధించే స్ట్రింగ్ ఇవ్వబడినప్పుడు, అత్యధిక పునరావృత్తి గల అక్షరం మరియు సంబంధిత కౌంట్‌ను కలిగిన ఒక నిఘంటువును రిటర్న్ చేయండి.\n    ఒకే సంఘటన అనేక అక్షరాలు ఉంటే, వాటిని అన్నింటినీ రిటర్న్ చేయండి.\n    \n    ఉదాహరణ:\n    func('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    func('a b b a') == {'a': 2, 'b': 2}\n    func('a b c a b') == {'a': 2, 'b': 2}\n    func('b b b b a') == {'b': 4}\n    func('') == {}\n\n    \"\"\"","canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/112","prompt":"def func(s,c):\n    \"\"\"Task\n    మనకు రెండు strings s మరియు c ఇవ్వబడ్డాయి, s లోని అన్ని characters ని తొలగించాలి అవి c లోని ఏదైనా character కి సమానమైనవి\n    ఆ తరువాత ఫలితంగా వచ్చిన string palindrome అయినది కాదా అని చెక్ చేయాలి.\n    ఒక string ని palindrome అని అంటారు అది వెనకకు చదివినప్పుడు మరియు ముందుకు చదివినప్పుడు ఒకేలా ఉంటే.\n    మీరు ఫలితంగా వచ్చిన string మరియు True\/False చెక్ ని కలిగిన tuple ని return చేయాలి.\n    Example\n    s = \"abcde\", c = \"ae\" కు ఫలితం ('bcd',False) గా ఉండాలి\n    s = \"abcdef\", c = \"b\" కు ఫలితం ('acdef',False) గా ఉండాలి\n    s = \"abcdedcba\", c = \"ab\" కు ఫలితం ('cdedc',True) గా ఉండాలి\n    \"\"\"","canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n","test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n","entry_point":"func"}
{"task_id":"HumanEval\/113","prompt":"def func(lst):\n    \"\"\"ఒక జాబితాలో ఉన్న ప్రతి స్ట్రింగ్ కేవలం అంకెలతో ఉంటుంది, ఒక జాబితాను రిటర్న్ చేయండి.\n    అవుట్‌పుట్‌లో ప్రతి అంశం i \"ఇన్‌పుట్‌లోని స్ట్రింగ్ i లో ఉన్న వింత అంశాల సంఖ్య.\" అని ఉండాలి, అక్కడ అన్ని i లను ఇన్‌పుట్‌లోని i వ స్ట్రింగ్‌లో ఉన్న వింత అంకెల సంఖ్యతో మార్చాలి.\n\n    >>> func(['1234567'])\n    [\"ఇన్‌పుట్‌లోని స్ట్రింగ్ 4 లో ఉన్న వింత అంశాల సంఖ్య 4.\"]\n    >>> func(['3',\"11111111\"])\n    [\"ఇన్‌పుట్‌లోని స్ట్రింగ్ 1 లో ఉన్న వింత అంశాల సంఖ్య 1.\",\n     \"ఇన్‌పుట్‌లోని స్ట్రింగ్ 8 లో ఉన్న వింత అంశాల సంఖ్య 8.\"]\n    \"\"\"","canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/114","prompt":"def func(nums):\n    \"\"\"\n    ఇంటిజర్ల యొక్క అర్రే nums ఇచ్చినప్పుడు, nums యొక్క ఏ ఖాళీ కాని ఉప-అర్రేయ్ యొక్క కనిష్ట మొత్తం కనుగొనండి.\n    ఉదాహరణ\n    func([2, 3, 4, 1, 2, 4]) == 1\n    func([-1, -2, -3]) == -6\n    \"\"\"","canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n","entry_point":"func"}
{"task_id":"HumanEval\/115","prompt":"def func(grid, capacity):\n    import math\n    \"\"\"\n    మీకు ఒక చదరపు గ్రిడ్ ను బావులుగా ఇవ్వబడింది. ప్రతి వరుస ఒక ఒంటరి బావిని ప్రతినిధించడం జరుగుతుంది,\n    మరియు వరుసలో ప్రతి 1 ఒక యూనిట్ నీరును ప్రతినిధించడం జరుగుతుంది.\n    ప్రతి బావికి ఒక బకెట్ ఉంది, దానిని వాడి బావి నుండి నీరు తీయవచ్చు,\n    మరియు అన్ని బకెట్లు ఒకే సామర్థ్యం కలిగి ఉంటాయి.\n    మీ పని బకెట్లను వాడి బావులను ఖాళీ చేయడం.\n    మీరు బకెట్లను ఎన్ని సార్లు దింపాలో ఆ సంఖ్యను వెల్లడించండి.\n\n    ఉదాహరణ 1:\n        ఇన్‌పుట్: \n            గ్రిడ్ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            బకెట్_సామర్థ్యం : 1\n        అవుట్‌పుట్: 6\n\n    ఉదాహరణ 2:\n        ఇన్‌పుట్: \n            గ్రిడ్ : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            బకెట్_సామర్థ్యం : 2\n        అవుట్‌పుట్: 5\n    \n    ఉదాహరణ 3:\n        ఇన్‌పుట్: \n            గ్రిడ్ : [[0,0,0], [0,0,0]]\n            బకెట్_సామర్థ్యం : 5\n        అవుట్‌పుట్: 0\n\n    నిబంధనలు:\n        * అన్ని బావులు ఒకే పొడవు కలిగి ఉంటాయి\n        * 1 <= గ్రిడ్.పొడవు <= 10^2\n        * 1 <= గ్రిడ్[:,1].పొడవు <= 10^2\n        * గ్రిడ్[i][j] -> 0 | 1\n        * 1 <= సామర్థ్యం <= 10\n    \"\"\"\n","canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n","test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/116","prompt":"def func(arr):\n    \"\"\"\n    ఈ కాటాలో, మీరు అవి బైనరీ ప్రతినిధిత్వంలో ఉన్న ఒక్కల సంఖ్య ప్రకారం అవి ఆరోహణ క్రమంలో ఉండేలా అనుమానిత పూర్వక పూర్ణాంకాల ఒక అర్రేను సార్ట్ చేయాలి.\n    ఒకే సంఖ్యలో ఒక్కల కోసం, దశాంశ విలువ ఆధారంగా సార్ట్ చేయండి.\n\n    దీనిని ఇలా అమలు చేయాలి:\n    >>> func([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> func([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> func([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n","canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/117","prompt":"def func(s, n):\n    \"\"\"ఒక స్ట్రింగ్ s మరియు సహజ సంఖ్య n ఇవ్వబడినప్పుడు, మీరు స్ట్రింగ్ s నుండి ఖచ్చితంగా n హల్లులు కలిగిన అన్ని పదాలను వరుసలో ఉన్న పదాల జాబితాను రిటర్న్ చేసే ఫంక్షన్ అమలు చేయడానికి మీకు పని ఇచ్చారు.\n    స్ట్రింగ్ s ఖాళీగా ఉంటే అప్పుడు ఫంక్షన్ ఖాళీ జాబితాను రిటర్న్ చేయాలి.\n    గమనిక: ఇన్‌పుట్ స్ట్రింగ్ కేవలం అక్షరాలు మరియు స్పేస్‌లు మాత్రమే కలిగి ఉందని మీరు భావించవచ్చు.\n    ఉదాహరణలు:\n    func(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    func(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    func(\"simple white space\", 2) ==> []\n    func(\"Hello world\", 4) ==> [\"world\"]\n    func(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"","canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n","entry_point":"func"}
{"task_id":"HumanEval\/118","prompt":"def func(word):\n    \"\"\"మీకు ఒక పదం ఇవ్వబడింది. మీ పని పదం యొక్క కుడి వైపు నుండి రెండు హల్లుల మధ్య నిలబడిన అతి సమీప అచ్చును కనుగొనడం.\n    \n    పదం ప్రారంభం మరియు ముగింపులో ఉన్న అచ్చులు లెక్కించబడవు. పైన ఉన్న షరతును కలిగిన ఏ అచ్చును మీరు కనుగొనకపోతే ఖాళీ స్ట్రింగ్ ను రిటర్న్ చేయండి.\n\n    ఇచ్చిన స్ట్రింగ్ లో కేవలం ఆంగ్ల అక్షరాలు మాత్రమే ఉన్నాయని భావించవచ్చు.\n\n    ఉదాహరణ:\n    func(\"yogurt\") ==> \"u\"\n    func(\"FULL\") ==> \"U\"\n    func(\"quick\") ==> \"\"\n    func(\"ab\") ==> \"\"\n    \"\"\"","canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/119","prompt":"def func(lst):\n    '''\n    మీకు రెండు స్ట్రింగ్‌ల జాబితా ఇవ్వబడింది, రెండు స్ట్రింగ్‌లు కూడా తెరిచిన\n    కోసం '(' లేదా మూసిన కోసం ')' పరెన్తెసిస్ మాత్రమే ఉంటాయి.\n    మీ పని రెండు స్ట్రింగ్‌లను కొన్ని క్రమంలో కలపడం ద్వారా ఫలితంగా వచ్చే స్ట్రింగ్ మంచిది అయ్యేలా చూడటం.\n    ఒక స్ట్రింగ్ S అన్ని పరెన్తెసిస్ S లో సమతుల్యంగా ఉంటే మాత్రమే మంచిదిగా పరిగణించబడుతుంది. ఉదాహరణకు: స్ట్రింగ్ '(())()' మంచిది, అయితే స్ట్రింగ్\n    '())' కాదు.\n    మంచి స్ట్రింగ్ చేయడానికి ఒక మార్గం ఉంటే 'Yes' అని మరియు లేకపోతే 'No' అని తిరిగి ఇవ్వండి.\n\n    ఉదాహరణలు:\n    func(['()(', ')']) == 'Yes'\n    func([')', ')']) == 'No'\n    '''\n","canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n","entry_point":"func"}
{"task_id":"HumanEval\/120","prompt":"def func(arr, k):\n    \"\"\"\n    ఒక పూర్ణాంకాల అర్రే arr మరియు ఒక పాజిటివ్ ఇంటిజర్ k ఇవ్వబడినప్పుడు, arr లోని గరిష్ఠ k సంఖ్యలతో కూడిన ఒక క్రమబద్ధమైన జాబితాను k పొడవుతో రిటర్న్ చేయండి.\n\n    ఉదాహరణ 1:\n\n        ఇన్‌పుట్: arr = [-3, -4, 5], k = 3\n        అవుట్‌పుట్: [-4, -3, 5]\n\n    ఉదాహరణ 2:\n\n        ఇన్‌పుట్: arr = [4, -4, 4], k = 2\n        అవుట్‌పుట్: [4, 4]\n\n    ఉదాహరణ 3:\n\n        ఇన్‌పుట్: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        అవుట్‌పుట్: [2]\n\n    గమనిక:\n        1. అర్రే యొక్క పొడవు [1, 1000] శ్రేణిలో ఉంటుంది.\n        2. అర్రేలోని అంశాలు [-1000, 1000] శ్రేణిలో ఉంటాయి.\n        3. 0 <= k <= len(arr)\n    \"\"\"","canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/121","prompt":"def func(lst):\n    \"\"\"ఖాళీ కాని పూర్తి సంఖ్యల జాబితా ఇవ్వబడినప్పుడు, సమ స్థానాలలో ఉన్న విషమ అంశాల మొత్తం సంఖ్యను తిరిగి ఇవ్వండి.\n    \n\n    ఉదాహరణలు\n    func([5, 8, 7, 1]) ==> 12\n    func([3, 3, 3, 3, 3]) ==> 9\n    func([30, 13, 24, 321]) ==>0\n    \"\"\"","canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n","entry_point":"func"}
{"task_id":"HumanEval\/122","prompt":"def func(arr, k):\n    \"\"\"\n    ఖాళీ కాని పూర్ణాంకాల అర్రే arr మరియు ఒక పూర్ణాంకం k ఇవ్వబడినప్పుడు, arr యొక్క మొదటి k అంశాల నుండి గరిష్టంగా రెండు అంకెలు కలిగిన అంశాల మొత్తం రిటర్న్ చేయండి.\n\n    ఉదాహరణ:\n\n        ఇన్‌పుట్: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        అవుట్‌పుట్: 24 # 21 + 3 యొక్క మొత్తం\n\n    నిబంధనలు:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"","canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/123","prompt":"def func(n):\n    \"\"\"\n    ఒక పాజిటివ్ ఇంటిజర్ n ఇవ్వబడినప్పుడు, collatz అనుక్రమణికలో ఉన్న విషమ సంఖ్యలను కలిగిన ఒక క్రమబద్ధమైన జాబితాను రిటర్న్ చేయండి.\n\n    కాలాట్జ్ ఊహాజనితం అనేది గణితంలో ఒక ఊహాజనితం, ఇది ఒక అనుక్రమణికను కింది విధంగా నిర్వచిస్తుంది: ఏ పాజిటివ్ ఇంటిజర్ n తో మొదలుపెట్టండి. అప్పుడు ప్రతి పదం మునుపటి పదం నుండి ఇలా పొందబడుతుంది: మునుపటి పదం సమం అయితే, తర్వాత పదం మునుపటి పదం యొక్క సగం. మునుపటి పదం విషమం అయితే, తర్వాత పదం మునుపటి పదం యొక్క 3 రెట్లు ప్లస్ 1. ఊహాజనితం ఏమిటంటే, n యొక్క విలువ ఏమి అయినా, అనుక్రమణిక ఎప్పుడూ 1 కి చేరుతుంది.\n\n    గమనిక: \n        1. Collatz(1) అంటే [1].\n        2. రిటర్న్ చేయబడిన జాబితా పెరుగుతూ క్రమంలో ఉండాలి.\n\n    ఉదాహరణకు:\n    func(5) అనేది [1, 5] ను రిటర్న్ చేస్తుంది # 5 కొరకు collatz అనుక్రమణిక [5, 16, 8, 4, 2, 1], కాబట్టి విషమ సంఖ్యలు 1 మరియు 5 మాత్రమే.\n    \"\"\"\n","canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/124","prompt":"def func(date):\n    \"\"\"మీరు ఇచ్చిన తేదీ స్ట్రింగ్‌ను ధ్రువీకరించే ఫంక్షన్‌ను రాయాలి మరియు తేదీ సరైనది అయితే True లేదా తప్పు అయితే False అని రిటర్న్ చేయాలి.\n    తేదీ సరైనది అని అన్ని కింది నియమాలు సంతృప్తి అయితే:\n    1. తేదీ స్ట్రింగ్ ఖాళీ కాకూడదు.\n    2. 1,3,5,7,8,10,12 నెలలకు రోజుల సంఖ్య 1 కంటే తక్కువ లేదా 31 రోజుల కంటే ఎక్కువ కాకూడదు. మరియు 4,6,9,11 నెలలకు రోజుల సంఖ్య 1 కంటే తక్కువ లేదా 30 రోజుల కంటే ఎక్కువ కాకూడదు. మరియు, 2 నెలకు రోజుల సంఖ్య 1 కంటే తక్కువ లేదా 29 కంటే ఎక్కువ కాకూడదు.\n    3. నెలలు 1 కంటే తక్కువ లేదా 12 కంటే ఎక్కువ కాకూడదు.\n    4. తేదీ ఫార్మాట్: mm-dd-yyyy లో ఉండాలి\n\n    ఉదాహరణకు: \n    func('03-11-2000') => True\n\n    func('15-01-2012') => False\n\n    func('04-0-2040') => False\n\n    func('06-04-2020') => True\n\n    func('06\/04\/2020') => False\n    \"\"\"","canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n","entry_point":"func"}
{"task_id":"HumanEval\/125","prompt":"def func(txt):\n    '''\n    ఒక పదాల స్ట్రింగ్ ఇవ్వబడినప్పుడు, ఖాళీ స్థలంపై పదాలను విడిగా చేసి ఒక జాబితాను రిటర్న్ చేయండి, ఒకవేళ టెక్స్ట్‌లో ఖాళీ స్థలాలు లేకపోతే మీరు\n    కామాలు ',' మీద విడిగా చేయాలి, ఒకవేళ కామాలు లేకపోతే మీరు ఆంగ్ల అక్షరమాలలో అసమాన క్రమంలో ఉన్న చిన్న అక్షరాల సంఖ్యను రిటర్న్ చేయాలి, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    ఉదాహరణలు\n    func(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    func(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    func(\"abcdef\") == 3 \n    '''\n","canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n","test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n","entry_point":"func"}
{"task_id":"HumanEval\/126","prompt":"def func(lst):\n    '''\n    సంఖ్యల జాబితా ఇచ్చినప్పుడు, అవి ఆరోహణ క్రమంలో ఉన్నాయో లేదో తెలుపుతుంది. ఒకే సంఖ్యను ఒకటి కంటే ఎక్కువ సార్లు డుప్లికేట్ చేసినట్లయితే, False ని రిటర్న్ చేయండి. నెగటివ్ సంఖ్యలు లేనివి మరియు కేవలం పూర్ణాంకాలు అనుకోండి.\n\n    ఉదాహరణలు\n    func([5]) ➞ True\n    func([1, 2, 3, 4, 5]) ➞ True\n    func([1, 3, 2, 4, 5]) ➞ False\n    func([1, 2, 3, 4, 5, 6]) ➞ True\n    func([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    func([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    func([1, 2, 2, 3, 3, 4]) ➞ True\n    func([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n","canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/127","prompt":"def func(interval1, interval2):\n    \"\"\"మీకు రెండు అంతరాలు ఇవ్వబడ్డాయి,\n    ప్రతి అంతరం ఒక జత పూర్ణాంకాలు. ఉదాహరణకు, అంతరం = (ప్రారంభం, అంతం) = (1, 2).\n    ఇచ్చిన అంతరాలు మూసివేయబడ్డాయి అనగా అంతరం (ప్రారంభం, అంతం)\n    ప్రారంభం మరియు అంతం రెండింటినీ కలిగి ఉంటుంది.\n    ఇచ్చిన ప్రతి అంతరం కోసం, దాని ప్రారంభం దాని అంతం కంటే తక్కువ లేదా సమానం అని భావిస్తారు.\n    మీ పని ఈ రెండు అంతరాల క్రాసింగ్ యొక్క పొడవు ఒక ప్రధాన సంఖ్య అయితే నిర్ధారించడం.\n    ఉదాహరణకు, అంతరాల (1, 3), (2, 4) యొక్క క్రాసింగ్ (2, 3)\n    దాని పొడవు 1, ఇది ఒక ప్రధాన సంఖ్య కాదు.\n    క్రాసింగ్ యొక్క పొడవు ఒక ప్రధాన సంఖ్య అయితే, \"YES\" అని తిరిగి ఇవ్వండి,\n    లేకపోతే, \"NO\" అని తిరిగి ఇవ్వండి.\n    రెండు అంతరాలు క్రాస్ కాకపోతే, \"NO\" అని తిరిగి ఇవ్వండి.\n\n\n    [input\/output] నమూనాలు:\n    func((1, 2), (2, 3)) ==> \"NO\"\n    func((-1, 1), (0, 4)) ==> \"NO\"\n    func((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"","canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/128","prompt":"def func(arr):\n    \"\"\"\n    మీకు ఒక పూర్ణాంకాల అర్రే arr ఇవ్వబడింది మరియు మీరు ప్రతి సంఖ్యలోని సంకేతాల ఉత్పత్తిని (అది 1, -1 లేదా 0 ద్వారా ప్రాతినిధ్యం చేయబడుతుంది) పూర్ణాంకాల పరిమాణాల యొక్క సంఖ్యా మొత్తం తిరిగి ఇవ్వాలి.\n    గమనిక: arr ఖాళీ ఉంటే None ని తిరిగి ఇవ్వండి.\n\n    ఉదాహరణ:\n    >>> func([1, 2, 2, -4]) == -9\n    >>> func([0, 1]) == 0\n    >>> func([]) == None\n    \"\"\"\n","canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/129","prompt":"def func(grid, k):\n    \"\"\"\n    N వరుసలు మరియు N నిలువులు కలిగిన ఒక గ్రిడ్ (N >= 2) మరియు ఒక పాజిటివ్ ఇంటిజర్ k ఇచ్చినప్పుడు, \n    గ్రిడ్ యొక్క ప్రతి సెల్ ఒక విలువను కలిగి ఉంటుంది. [1, N * N] శ్రేణిలో ప్రతి ఇంటిజర్ \n    గ్రిడ్ యొక్క సెల్స్ పై ఖచ్చితంగా ఒకసారి మాత్రమే కనిపిస్తుంది.\n\n    మీరు గ్రిడ్ లో k పొడవు గల కనిష్ట మార్గాన్ని కనుగొనాలి. మీరు ఏ సెల్ నుండి అయినా ప్రారంభించవచ్చు, \n    మరియు ప్రతి అడుగులో మీరు ఏ పొరుగు సెల్స్ కు అయినా కదలవచ్చు,\n    అంటే, మీ ప్రస్తుత సెల్ తో అంచును పంచుకునే సెల్స్ కు మీరు వెళ్ళవచ్చు.\n    దయచేసి గమనించండి కేవలం k సెల్స్ ను సందర్శించడం అంటే k పొడవు గల మార్గం (అవసరం లేనిది కాదు).\n    మీరు గ్రిడ్ నుండి బయటకు వెళ్ళలేరు.\n    ఒక మార్గం A (k పొడవు గల) మరియు మార్గం B (k పొడవు గల) తో పోల్చినప్పుడు, A మరియు B గుండా వెళ్ళే సెల్స్ పై విలువల ఆర్డర్ చేసిన జాబితాలను \n    (వాటిని lst_A మరియు lst_B అని పిలుద్దాం), lst_A పదానుక్రమంగా lst_B కంటే తక్కువ అయితే,\n    అంటే, ఒక ఇంటిజర్ ఇండెక్స్ i (1 <= i <= k) ఉండి, lst_A[i] < lst_B[i] మరియు ఏ జె (1 <= j < i) కొరకు మనం\n    lst_A[j] = lst_B[j] అని ఉంటుంది.\n    జవాబు ఏకైకమైనది అని హామీ ఇవ్వబడింది.\n    కనిష్ట మార్గం గుండా వెళ్ళే సెల్స్ పై విలువల ఆర్డర్ చేసిన జాబితాను రిటర్న్ చేయండి.\n\n    ఉదాహరణలు:\n\n        ఇన్‌పుట్: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        అవుట్‌పుట్: [1, 2, 1]\n\n        ఇన్‌పుట్: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        అవుట్‌పుట్: [1]\n    \"\"\"\n","canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/130","prompt":"def func(n):\n    \"\"\"ప్రతి ఒక్కరూ ఫిబోనాచ్చి శ్రేణిని తెలుసు, ఇది గత కొన్ని శతాబ్దాలుగా గణితజ్ఞులు లోతుగా అధ్యయనం చేసారు. అయితే, ప్రజలు తెలియనిది ట్రిబోనాచ్చి శ్రేణి.\n    ట్రిబోనాచ్చి శ్రేణి పునరావృత్తి ద్వారా నిర్వచించబడింది:\n    func(1) = 3\n    func(n) = 1 + n \/ 2, ఒకవేళ n సమం అయితే.\n    func(n) = func(n - 1) + func(n - 2) + func(n + 1), ఒకవేళ n అసమం అయితే.\n    ఉదాహరణకు:\n    func(2) = 1 + (2 \/ 2) = 2\n    func(4) = 3\n    func(3) = func(2) + func(1) + func(4)\n           = 2 + 3 + 3 = 8 \n    మీకు ఒక సున్నా కాని పూర్ణాంకం n ఇవ్వబడింది, మీరు ట్రిబోనాచ్చి శ్రేణిలో మొదటి n + 1 సంఖ్యలను జాబితాగా తిరిగి ఇవ్వాలి.\n    ఉదాహరణలు:\n    func(3) = [1, 3, 2, 8]\n    \"\"\"","canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n","test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n","entry_point":"func"}
{"task_id":"HumanEval\/131","prompt":"def func(n):\n    \"\"\"ఒక పాజిటివ్ ఇంటిజర్ n ఇచ్చినప్పుడు, అసమాన అంకెల ఉత్పత్తిని రిటర్న్ చేయండి.\n    అన్ని అంకెలు సమానమైనప్పుడు 0 ని రిటర్న్ చేయండి.\n    ఉదాహరణకు:\n    func(1)  == 1\n    func(4)  == 0\n    func(235) == 15\n    \"\"\"\n","canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n","entry_point":"func"}
{"task_id":"HumanEval\/132","prompt":"def func(string):\n    '''\n    కేవలం చదరపు బ్రాకెట్లు మాత్రమే ఉండే ఒక స్ట్రింగ్‌ను ఇన్‌పుట్‌గా తీసుకునే ఫంక్షన్‌ను సృష్టించండి.\n    ఉపశ్రేణిలో కనీసం ఒక బ్రాకెట్ నెస్టెడ్ ఉంటే మాత్రమే ఫంక్షన్ ట్రూను రిటర్న్ చేయాలి.\n\n    func('[[]]') ➞ True\n    func('[]]]]]]][[[[[]') ➞ False\n    func('[][]') ➞ False\n    func('[]') ➞ False\n    func('[[][]]') ➞ True\n    func('[[]][[') ➞ True\n    '''\n","canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/133","prompt":"def func(lst):\n    \"\"\"మీకు సంఖ్యల జాబితా ఇవ్వబడింది.\n    మీరు ఇచ్చిన జాబితాలోని సంఖ్యల చదరపు మొత్తాన్ని తిరిగి ఇవ్వాలి,\n    జాబితాలోని ప్రతి అంశాన్ని మొదట పైకి గుండ్రంగా మార్చండి (Ceiling).\n    ఉదాహరణలు:\n    lst = [1,2,3] కొరకు ఫలితం 14 ఉండాలి\n    lst = [1,4,9] కొరకు ఫలితం 98 ఉండాలి\n    lst = [1,3,5,7] కొరకు ఫలితం 84 ఉండాలి\n    lst = [1.4,4.2,0] కొరకు ఫలితం 29 ఉండాలి\n    lst = [-2.4,1,1] కొరకు ఫలితం 6 ఉండాలి\n    \n    \"\"\"\n","canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/134","prompt":"def func(txt):\n    '''\n    ఒక స్ట్రింగ్ యొక్క చివరి అక్షరం ఒక ఆల్ఫాబెటికల్ అక్షరం అయినప్పుడు మరియు అది ఒక పదం భాగం కాకుండా ఉన్నప్పుడు True ని రిటర్న్ చేసే ఫంక్షన్ ను సృష్టించండి, లేకపోతే False.\n    గమనిక: \"పదం\" అనేది స్పేస్ ద్వారా వేరు చేయబడిన అక్షరాల సమూహం.\n\n    ఉదాహరణలు:\n    func(\"apple pie\") ➞ False\n    func(\"apple pi e\") ➞ True\n    func(\"apple pi e \") ➞ False\n    func(\"\") ➞ False \n    '''\n","canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/135","prompt":"def func(arr):\n    \"\"\"ఒక ఫంక్షన్ సృష్టించండి ఇది ఒక అంశం యొక్క అతిపెద్ద సూచికను రిటర్న్ చేస్తుంది ఇది వెంటనే ముందు ఉన్న అంశం కంటే పెద్దగా లేదా సమానంగా ఉండదు. అలాంటి అంశం ఉనికిలో లేకపోతే అప్పుడు -1 ని రిటర్న్ చేయండి. ఇచ్చిన అర్రేలో నకిలీ విలువలు ఉండవు.\n\n    ఉదాహరణలు:\n    func([1,2,4,3,5]) = 3\n    func([1,2,3]) = -1\n    \"\"\"","canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n","entry_point":"func"}
{"task_id":"HumanEval\/136","prompt":"def func(lst):\n    '''\n    ఒక జాబితాలో 'a' అతిపెద్ద నెగటివ్ ఇంటిజర్స్ మరియు 'b' అతిచిన్న పాజిటివ్ ఇంటిజర్స్ అని ఒక టపిల్ (a, b) ని రిటర్న్ చేసే ఫంక్షన్ సృష్టించండి.\n    నెగటివ్ లేదా పాజిటివ్ ఇంటిజర్స్ లేనప్పుడు, వాటిని None గా రిటర్న్ చేయండి.\n\n    ఉదాహరణలు:\n    func([2, 4, 1, 3, 5, 7]) == (None, 1)\n    func([]) == (None, None)\n    func([0]) == (None, None)\n    '''\n","canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n","entry_point":"func"}
{"task_id":"HumanEval\/137","prompt":"def func(a, b):\n    \"\"\"\n    పూర్ణాంకాలు, ఫ్లోట్లు లేదా వాస్తవ సంఖ్యలను సూచించే స్ట్రింగ్లను తీసుకునే ఫంక్షన్‌ను సృష్టించండి, మరియు ఇచ్చిన వేరియబుల్ రకంలో పెద్ద వేరియబుల్‌ను రిటర్న్ చేయండి.\n    విలువలు సమానమైనప్పుడు None ని రిటర్న్ చేయండి.\n    గమనిక: ఒక వాస్తవ సంఖ్య స్ట్రింగ్‌గా ప్రతినిధించబడితే, ఫ్లోటింగ్ పాయింట్ . లేదా , ఉండవచ్చు\n\n    func(1, 2.5) ➞ 2.5\n    func(1, \"2,3\") ➞ \"2,3\"\n    func(\"5,1\", \"6\") ➞ \"6\"\n    func(\"1\", 1) ➞ None\n    \"\"\"\n","canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/138","prompt":"def func(n):\n    \"\"\"ఇచ్చిన సంఖ్య n ని ఖచ్చితంగా 4 సానుకూల సమ సంఖ్యల మొత్తంగా వ్రాయగలిగేది కాదా అని మూల్యాంకనం చేయండి\n    ఉదాహరణ\n    func(4) == False\n    func(6) == False\n    func(8) == True\n    \"\"\"","canonical_solution":"    return n%2 == 0 and n >= 8\n","test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n","entry_point":"func"}
{"task_id":"HumanEval\/139","prompt":"def func(n):\n    \"\"\"బ్రెజిలియన్ ఫ్యాక్టరియల్ ని ఇలా నిర్వచించవచ్చు:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    ఇక్కడ n > 0\n\n    ఉదాహరణకు:\n    >>> func(4)\n    288\n\n    ఈ ఫంక్షన్ ఒక పూర్ణాంకం ఇన్‌పుట్‌గా పొంది, ఆ పూర్ణాంకం యొక్క ప్రత్యేక ఫ్యాక్టరియల్‌ను రిటర్న్ చేయాలి.\n    \"\"\"","canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/140","prompt":"def func(text):\n    \"\"\"\n    ఒక string text ఇవ్వబడినప్పుడు, అందులోని అన్ని స్పేస్‌లను అండర్‌స్కోర్‌లతో మార్చండి,\n    మరియు ఒక string లో 2 కంటే ఎక్కువ వరుస స్పేస్‌లు ఉంటే,\n    అప్పుడు అన్ని వరుస స్పేస్‌లను - తో మార్చండి\n\n    func(\"Example\") == \"Example\"\n    func(\"Example 1\") == \"Example_1\"\n    func(\" Example 2\") == \"_Example_2\"\n    func(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n","canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/141","prompt":"def func(file_name):\n    \"\"\"ఒక ఫైల్ పేరును సూచించే స్ట్రింగ్‌ను తీసుకుని, ఫైల్ పేరు చెల్లుబాటు అయితే 'Yes' ని మరియు లేకపోతే 'No' ని రిటర్న్ చేసే ఫంక్షన్‌ను సృష్టించండి.\n    ఒక ఫైల్ పేరు చెల్లుబాటు అయినట్లు గరిష్టంగా క్రింది షరతులన్ని తీరాలి:\n    - ఫైల్ పేరులో మూడు అంకెలు ('0'-'9') కంటే ఎక్కువ ఉండకూడదు.\n    - ఫైల్ పేరులో ఖచ్చితంగా ఒక చుక్క '.' ఉండాలి.\n    - చుక్క ముందు ఉన్న ఉపశీర్షిక ఖాళీ ఉండకూడదు, మరియు అది లాటిన్ అక్షరమాల ('a'-'z' మరియు 'A'-'Z') నుండి ఒక అక్షరంతో మొదలవ్వాలి.\n    - చుక్క తర్వాత ఉన్న ఉపశీర్షిక ఈ వాటిలో ఒకటి అయి ఉండాలి: ['txt', 'exe', 'dll']\n    ఉదాహరణలు:\n    func(\"example.txt\") # => 'Yes'\n    func(\"1example.dll\") # => 'No' (పేరు లాటిన్ అక్షరమాల అక్షరంతో మొదలవ్వాలి)\n    \"\"\"","canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n","entry_point":"func"}
{"task_id":"HumanEval\/142","prompt":"def func(lst):\n    \"\"\"\"\n    ఈ ఫంక్షన్ ఒక పూర్ణాంకాల జాబితాను తీసుకుంటుంది. జాబితాలోని అన్ని ఎంట్రీల కోసం, ఫంక్షన్ పూర్ణాంక ఎంట్రీని దాని ఇండెక్స్ 3 యొక్క బహుళం అయితే చదరపు చేస్తుంది మరియు ఇండెక్స్ 4 యొక్క బహుళం అయితే మరియు 3 యొక్క బహుళం కాకపోతే పూర్ణాంక ఎంట్రీని ఘనం చేస్తుంది. ఫంక్షన్ ఇండెక్స్‌లు 3 లేదా 4 యొక్క బహుళం కాని ఎంట్రీలను మార్చదు. ఆ తరువాత ఫంక్షన్ అన్ని ఎంట్రీల మొత్తాన్ని రిటర్న్ చేస్తుంది.\n    \n    ఉదాహరణలు:\n    lst = [1,2,3] కోసం అవుట్‌పుట్ 6 ఉండాలి\n    lst = [] కోసం అవుట్‌పుట్ 0 ఉండాలి\n    lst = [-1,-5,2,-1,-5] కోసం అవుట్‌పుట్ -126 ఉండాలి\n    \"\"\"","canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n","entry_point":"func"}
{"task_id":"HumanEval\/143","prompt":"def func(sentence):\n    \"\"\"\n    మీకు ఒక వాక్యం ఉన్న స్ట్రింగ్ ఇవ్వబడింది,\n    ఆ వాక్యంలో కొన్ని పదాలు స్పేస్ ద్వారా వేరు చేయబడి ఉన్నాయి,\n    మరియు మీరు అసలు వాక్యం నుండి పదాల పొడవులు ప్రైమ్ సంఖ్యలు అయిన పదాలను కలిగి ఉన్న ఒక స్ట్రింగ్ ను రిటర్న్ చేయాలి,\n    కొత్త స్ట్రింగ్ లో పదాల క్రమం అసలు వాక్యంలో ఉన్నట్లే ఉండాలి.\n\n    ఉదాహరణ 1:\n        ఇన్‌పుట్: sentence = \"This is a test\"\n        అవుట్‌పుట్: \"is\"\n\n    ఉదాహరణ 2:\n        ఇన్‌పుట్: sentence = \"lets go for swimming\"\n        అవుట్‌పుట్: \"go for\"\n\n    నిబంధనలు:\n        * 1 <= len(sentence) <= 100\n        * sentence కేవలం అక్షరాలను మాత్రమే కలిగి ఉంటుంది\n    \"\"\"","canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/144","prompt":"def func(x, n):\n    \"\"\"మీ పని వ్యక్తి x * n అనే వ్యక్తిని సరళీకరించే ఫంక్షన్‌ను అమలు చేయడం. ఫంక్షన్ x * n పూర్తి సంఖ్యగా విలువను ఇస్తే True ని మరియు లేకపోతే False ని రిటర్న్ చేస్తుంది. x మరియు n రెండూ ఒక భిన్నం యొక్క స్ట్రింగ్ ప్రతినిధిత్వం, మరియు క్రింది ఫార్మాట్‌లో ఉంటాయి,\n    <అంశం>\/<హరణం> ఇక్కడ అంశం మరియు హరణం రెండూ పాజిటివ్ పూర్తి సంఖ్యలు.\n\n    x మరియు n చెల్లుబాటు అయ్యే భిన్నాలు మరియు వాటిలో హరణం సున్నా కాదు అని మీరు ఊహించవచ్చు.\n\n    func(\"1\/5\", \"5\/1\") = True\n    func(\"1\/6\", \"2\/1\") = False\n    func(\"7\/10\", \"10\/2\") = False\n    \"\"\"","canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n","entry_point":"func"}
{"task_id":"HumanEval\/145","prompt":"def func(nums):\n    \"\"\"\n    ఇచ్చిన పూర్ణాంకాల జాబితాను వారి అంకెల మొత్తం ప్రకారం ఆరోహణ క్రమంలో క్రమపరచే ఫంక్షన్ రాయండి.\n    గమనిక: ఒకే అంకెల మొత్తం కలిగిన పలు అంశాలు ఉంటే, వాటిని అసలు జాబితాలో వారి సూచిక ఆధారంగా క్రమపరచండి.\n\n    ఉదాహరణకు:\n    >>> func([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> func([]) == []\n    \"\"\"\n","canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/146","prompt":"def func(nums):\n    \"\"\"ఇన్‌పుట్‌గా సంఖ్యల అర్రేను తీసుకొని, అందులోని పదికి కంటే పెద్ద సంఖ్యలు ఎన్ని ఉన్నాయో మరియు ఒక సంఖ్య యొక్క మొదటి మరియు చివరి అంకెలు ఇరవై (1, 3, 5, 7, 9) అయినవి ఎన్ని ఉన్నాయో చెప్పే ఫంక్షన్‌ను వ్రాయండి.\n    ఉదాహరణకు:\n    func([15, -73, 14, -15]) => 1 \n    func([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"","canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n","entry_point":"func"}
{"task_id":"HumanEval\/147","prompt":"def func(n):\n    \"\"\"\n    మీకు ఒక పాజిటివ్ ఇంటెజర్ n ఇవ్వబడింది. మీరు n పొడవు గల ఒక ఇంటెజర్ అర్రే a ను సృష్టించాలి.\n        ప్రతి i కి (1 ≤ i ≤ n), a[i] యొక్క విలువ = i * i - i + 1.\n        i < j < k మరియు a[i] + a[j] + a[k] 3 యొక్క బహుళం అయిన అర్రే a యొక్క మూడు జతల (a[i], a[j], a[k]) యొక్క సంఖ్యను తిరిగి ఇవ్వండి.\n\n    ఉదాహరణ :\n        ఇన్‌పుట్: n = 5\n        అవుట్‌పుట్: 1\n        వివరణ: \n        a = [1, 3, 7, 13, 21]\n        ఒకే ఒక చెల్లుబాటు అయ్యే మూడు జతలు (1, 7, 13).\n    \"\"\"","canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n","test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n","entry_point":"func"}
{"task_id":"HumanEval\/148","prompt":"def func(planet1, planet2):\n    '''\n    మన సౌరకుటుంబంలో ఎనిమిది గ్రహాలు ఉన్నాయి: సూర్యునికి అతి సమీపంలో ఉన్నది బుధుడు, తరువాతిది శుక్రుడు, ఆ తరువాత భూమి, అంగారకుడు, బృహస్పతి, శని, యురేనస్, నెప్ట్యూన్.\n    రెండు గ్రహాల పేర్లను స్ట్రింగ్లు గా తీసుకునే ఫంక్షన్ రాయండి planet1 మరియు planet2. \n    ఈ ఫంక్షన్ సూర్యునికి సమీపంలో ఉన్న క్రమంలో సరిపోల్చి, planet1 మరియు planet2 యొక్క కక్ష్యల మధ్య ఉన్న అన్ని గ్రహాలను కలిగి ఉన్న ఒక టపాలు రిటర్న్ చేయాలి. \n    ఒక ఖాళీ టపాలు రిటర్న్ చేయాలి ఒకవేళ planet1 లేదా planet2\n    సరైన గ్రహాల పేర్లు కాకపోతే. \n    ఉదాహరణలు\n    func(\"బృహస్పతి\", \"నెప్ట్యూన్\") ==> (\"శని\", \"యురేనస్\")\n    func(\"భూమి\", \"బుధుడు\") ==> (\"శుక్రుడు\")\n    func(\"బుధుడు\", \"యురేనస్\") ==> (\"శుక్రుడు\", \"భూమి\", \"అంగారకుడు\", \"బృహస్పతి\", \"శని\")\n    '''\n","canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n","entry_point":"func"}
{"task_id":"HumanEval\/149","prompt":"def func(lst):\n    \"\"\"ఒక స్ట్రింగ్స్ జాబితాను పారామితిగా అంగీకరించే ఫంక్షన్ రాయండి,\n    అసమాన పొడవులు గల స్ట్రింగ్స్ ను దాని నుండి తొలగించండి,\n    మరియు ప్రతి పదం పొడవు ప్రకారం ఆరోహణ క్రమంలో ఉండే క్రమంలో ఫలితం జాబితాను తిరిగి ఇవ్వండి,\n    జాబితా ఎప్పుడూ స్ట్రింగ్స్ యొక్క జాబితా మాత్రమే మరియు సంఖ్యల అర్రే కాదు,\n    మరియు ఇది నకలులను కలిగి ఉండవచ్చు.\n    జాబితాను ఆ నియమం ప్రకారం క్రమపరచి ఇవ్వాలి.\n    రెండు పదాలు ఒకే పొడవు ఉంటే, జాబితాను అక్షరాల క్రమంలో క్రమపరచండి.\n    ఫంక్షన్ క్రమపరచిన స్ట్రింగ్స్ జాబితాను రిటర్న్ చేయాలి.\n    అన్ని పదాలు ఒకే పొడవు కలిగి ఉంటాయని మీరు ఊహించవచ్చు.\n    ఉదాహరణకు:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n","canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/150","prompt":"def func(n, x, y):\n    \"\"\"ఒక సాధారణ ప్రోగ్రామ్ ఇది, ఒకవేళ n ఒక ప్రధాన సంఖ్య అయితే x యొక్క విలువను రిటర్న్ చేయాలి, లేకపోతే y యొక్క విలువను రిటర్న్ చేయాలి.\n\n    ఉదాహరణలు:\n    func(7, 34, 12) == 34 కోసం\n    func(15, 8, 5) == 5 కోసం\n    \n    \"\"\"","canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n","entry_point":"func"}
{"task_id":"HumanEval\/151","prompt":"def func(lst):\n    '''\n    సంఖ్యల జాబితా ఇచ్చినప్పుడు, జాబితాలోని విషమ సంఖ్యల చదరపుల మొత్తాన్ని తిరిగి ఇవ్వండి. ప్రతికూల సంఖ్యలను లేదా పూర్ణాంకాలు కానివి పట్టించుకోకండి.\n    \n    func([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    func([-1, -2, 0]) == 0\n    func([9, -2]) == 81\n    func([0]) == 0  \n    \n    ఇన్‌పుట్ జాబితా ఖాళీ అయితే, 0 ని తిరిగి ఇవ్వండి.\n    '''","canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/152","prompt":"def func(game, guess):\n    \"\"\"మనం అందరం కొన్ని చాలా ఎదురుచూసిన సంఘటనల ఫలితం తెలిసినప్పుడు ఉండే ఆ అనుభూతిని గుర్తుంచుకుంటాము. ఆ క్షణంలో మీరు ఉండే భావాలు మరియు ఆలోచనలు ఖచ్చితంగా గమనించడం మరియు పోల్చడం విలువైనవి.\n    మీ పని ఒక వ్యక్తి పలు మ్యాచ్‌ల ఫలితాలను సరిగ్గా ఊహించారో లేదో నిర్ణయించడం. మీకు సమాన పొడవు గల స్కోర్లు మరియు ఊహల రెండు అర్రేలు ఇవ్వబడతాయి, ప్రతి ఇండెక్స్ ఒక మ్యాచ్‌ను చూపిస్తుంది.\n    ప్రతి ఊహ ఎంత తప్పు ఉందో సూచించే అదే పొడవు గల అర్రేను రిటర్న్ చేయండి. వారు సరిగ్గా ఊహించినట్లయితే, విలువ 0, లేకపోతే, విలువ ఊహ మరియు స్కోర్ మధ్య నిజమైన తేడా.\n    \n    \n    ఉదాహరణ:\n\n    func([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    func([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"","canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/153","prompt":"def func(class_name, extensions):\n    \"\"\"మీకు ఒక తరగతి పేరు (ఒక స్ట్రింగ్) మరియు పొడిగింపుల జాబితా ఇవ్వబడుతుంది.\n    పొడిగింపులను తరగతికి అదనపు తరగతులను లోడ్ చేయడానికి ఉపయోగించాలి. పొడిగింపు బలం ఈ విధంగా ఉంటుంది: CAP అనేది పొడిగింపు పేరులోని పెద్దక్షరాల సంఖ్య, మరియు SM అనేది చిన్నక్షరాల సంఖ్య, బలం CAP - SM అనే భిన్నం ద్వారా ఇవ్వబడుతుంది.\n    మీరు అత్యంత బలమైన పొడిగింపును కనుగొని ఈ ఫార్మాట్‌లో ఒక స్ట్రింగ్‌ను రిటర్న్ చేయాలి: ClassName.StrongestExtensionName.\n    ఒకే బలంతో రెండు లేదా మరిన్ని పొడిగింపులు ఉంటే, మీరు జాబితాలో మొదటిది ఎంచుకోవాలి.\n    ఉదాహరణకు, మీకు \"Slices\" అనే తరగతి మరియు పొడిగింపుల జాబితా: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ఇవ్వబడితే, మీరు 'Slices.SErviNGSliCes' అని రిటర్న్ చేయాలి ఎందుకంటే 'SErviNGSliCes' అత్యంత బలమైన పొడిగింపు (దాని బలం -1).\n    ఉదాహరణ:\n    func('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n","canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n","entry_point":"func"}
{"task_id":"HumanEval\/154","prompt":"def func(a , b):\n    \"\"\"మీకు 2 పదాలు ఇవ్వబడ్డాయి. రెండవ పదం లేదా దాని ఏ రోటేషన్ అయినా మొదటి పదంలో ఉపశబ్దంగా ఉంటే True ని రిటర్న్ చేయాలి\n    func(\"abcd\",\"abd\") => False\n    func(\"hello\",\"ell\") => True\n    func(\"whassup\",\"psus\") => False\n    func(\"abab\",\"baa\") => True\n    func(\"efef\",\"eeff\") => False\n    func(\"himenss\",\"simen\") => True\n\n    \"\"\"","canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/155","prompt":"def func(num):\n    \"\"\"ఒక పూర్ణాంకం ఇవ్వబడింది. సమాంక మరియు విషమాంక అంకెల సంఖ్యను వరుసగా కలిగిన ఒక జతను రిటర్న్ చేయండి.\n\n     ఉదాహరణ:\n        func(-12) ==> (1, 1)\n        func(123) ==> (1, 2)\n    \"\"\"","canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/156","prompt":"def func(number):\n    \"\"\"\n    ఒక పాజిటివ్ ఇంటిజర్ ఇచ్చినప్పుడు, దాని రోమన్ న్యూమరల్ సమానం ఒక స్ట్రింగ్‌గా పొందండి,\n    మరియు దానిని లోయర్‌కేస్‌లో రిటర్న్ చేయండి.\n    పరిమితులు: 1 <= num <= 1000\n\n    ఉదాహరణలు:\n    >>> func(19) == 'xix'\n    >>> func(152) == 'clii'\n    >>> func(426) == 'cdxxvi'\n    \"\"\"\n","canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/157","prompt":"def func(a, b, c):\n    '''\n    ఒక త్రిభుజం యొక్క మూడు పక్కల పొడవులు ఇచ్చారు. ఆ మూడు పక్కలు ఒక లంబ కోణ త్రిభుజంగా ఏర్పడితే True ని లేదా False ని తిరిగి ఇవ్వండి.\n    ఒక లంబ కోణ త్రిభుజం అంటే ఒక కోణం లంబ కోణం లేదా 90 డిగ్రీలు ఉండే త్రిభుజం.\n    ఉదాహరణ:\n    func(3, 4, 5) == True\n    func(1, 2, 3) == False\n    '''\n","canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/158","prompt":"def func(words):\n    \"\"\"వివిధ పదాలను కలిగిన స్ట్రింగ్స్ యొక్క జాబితాను అంగీకరించే ఒక ఫంక్షన్ రాయండి.\n    జాబితాలో వివిధ పదాలు ఉన్నాయి. అద్వితీయ అక్షరాల గరిష్ఠ సంఖ్యతో ఉన్న పదాన్ని తిరిగి ఇవ్వండి. ఒకవేళ అనేక స్ట్రింగ్స్ అద్వితీయ అక్షరాల గరిష్ఠ సంఖ్యను కలిగి ఉంటే, పదజాల క్రమంలో మొదటిదాన్ని తిరిగి ఇవ్వండి.\n\n    func([\"name\", \"of\", \"string\"]) == \"string\"\n    func([\"name\", \"enam\", \"game\"]) == \"enam\"\n    func([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n","canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n","entry_point":"func"}
{"task_id":"HumanEval\/159","prompt":"def func(number, need, remaining):\n    \"\"\"\n    మీరు ఒక ఆకలితో ఉన్న కుందేలు, మీరు ఇప్పటికే కొన్ని క్యారెట్లు తిన్నారు,\n    కానీ ఇప్పుడు రోజు భోజనాలను పూర్తి చేయడానికి మరిన్ని క్యారెట్లు తినాలి.\n    మీరు మీ భోజనాల తర్వాత తిన్న క్యారెట్ల మొత్తం సంఖ్య, మీ భోజనాల తర్వాత మిగిలిన క్యారెట్ల సంఖ్య అనే అర్రేను రిటర్న్ చేయాలి.\n    మిగిలిన క్యారెట్లు సరిపోకపోతే, మీరు అన్ని మిగిలిన క్యారెట్లను తింటారు, కానీ ఇంకా ఆకలితో ఉంటారు.\n    \n    ఉదాహరణ:\n    * func(5, 6, 10) -> [11, 4]\n    * func(4, 8, 9) -> [12, 1]\n    * func(1, 10, 10) -> [11, 0]\n    * func(2, 11, 5) -> [7, 0]\n    \n    వేరియబుల్స్:\n    @number : ఇంటిజర్\n        మీరు తిన్న క్యారెట్ల సంఖ్య.\n    @need : ఇంటిజర్\n        మీరు తినాల్సిన క్యారెట్ల సంఖ్య.\n    @remaining : ఇంటిజర్\n        స్టాక్‌లో ఉన్న మిగిలిన క్యారెట్ల సంఖ్య\n    \n    పరిమితులు:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    ఆనందించండి :)\n    \"\"\"\n","canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/160","prompt":"def func(operator, operand):\n    \"\"\"\n    రెండు జాబితాలు operator, మరియు operand ఇచ్చారు. మొదటి జాబితాలో ప్రాథమిక బీజగణిత ఆపరేషన్లు ఉన్నాయి, మరియు \n    రెండవ జాబితాలో పూర్ణాంకాల జాబితా ఉంది. ఈ రెండు జాబితాలను ఉపయోగించి బీజగణిత సమీకరణం నిర్మించి ఈ సమీకరణం \n    యొక్క విలువను తిరిగి ఇవ్వండి.\n\n    ప్రాథమిక బీజగణిత ఆపరేషన్లు:\n    కూడిక ( + )\n    వ్యవకలనం ( - )\n    గుణకారం ( * )\n    నేల విభజన ( \/\/ )\n    ఘాతాంకం ( ** )\n\n    ఉదాహరణ:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    గమనిక:\n        operator జాబితా పొడవు operand జాబితా పొడవు కంటే ఒకటి తక్కువ.\n        Operand అనేది సున్నా లేదా అధిక పూర్ణాంకాల జాబితా.\n        Operator జాబితాలో కనీసం ఒక ఆపరేషన్ ఉండాలి, మరియు operand జాబితాలో కనీసం రెండు operands ఉండాలి.\n\n    \"\"\"","canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/161","prompt":"def func(s):\n    \"\"\"మీకు ఒక స్ట్రింగ్ s ఇవ్వబడింది.\n    ఒకవేళ s[i] ఒక అక్షరమైతే, దాని కేసును లోయర్ నుండి అప్పర్ లేదా అదే విధంగా రివర్స్ చేయండి,\n    లేకపోతే అది యథాతథంగా ఉంచండి.\n    స్ట్రింగ్ లో అక్షరాలు లేకపోతే, స్ట్రింగ్ ను రివర్స్ చేయండి.\n    ఫంక్షన్ ఫలితంగా వచ్చిన స్ట్రింగ్ ను రిటర్న్ చేయాలి.\n    ఉదాహరణలు\n    func(\"1234\") = \"4321\"\n    func(\"ab\") = \"AB\"\n    func(\"#a@C\") = \"#A@c\"\n    \"\"\"\n","canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n","entry_point":"func"}
{"task_id":"HumanEval\/162","prompt":"def func(text):\n    \"\"\"\n    ఒక స్ట్రింగ్ 'text' ఇవ్వబడినప్పుడు, దాని md5 హాష్ సమానమైన స్ట్రింగ్‌ను రిటర్న్ చేయండి.\n    ఒకవేళ 'text' ఖాళీ స్ట్రింగ్ అయితే, None ను రిటర్న్ చేయండి.\n\n    >>> func('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"","canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/163","prompt":"def func(a, b):\n    \"\"\"\n    రెండు సానుకూల పూర్ణాంకాలు a మరియు b ఇవ్వబడినప్పుడు, a మరియు b మధ్య ఉన్న సమ అంకెలను ఆరోహణ క్రమంలో తిరిగి ఇవ్వండి.\n\n    ఉదాహరణకు:\n    func(2, 8) => [2, 4, 6, 8]\n    func(8, 2) => [2, 4, 6, 8]\n    func(10, 14) => []\n    \"\"\"\n","canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
