{"task_id":"HumanEval\/0","prompt":"from typing import List\n\n\ndef func(numbers: List[float], threshold: float) -> bool:\n    \"\"\" প্রদত্ত সংখ্যার তালিকায়, কোন দুটি সংখ্যা প্রদত্ত থ্রেশহোল্ডের চেয়ে কাছাকাছি আছে কিনা তা যাচাই করুন।\n    >>> func([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> func([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n","canonical_solution":"    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/1","prompt":"from typing import List\n\n\ndef func(paren_string: str) -> List[str]:\n    \"\"\" এই ফাংশনের ইনপুট হল একটি স্ট্রিং যা একাধিক গ্রুপের নেস্টেড প্যারেনথেসিস ধারণ করে। আপনার লক্ষ্য হল\n    এই গ্রুপগুলিকে আলাদা স্ট্রিংগুলিতে পৃথক করা এবং সেগুলির একটি তালিকা ফেরত দেওয়া।\n    পৃথক গ্রুপগুলি ভারসাম্যপূর্ণ (প্রতিটি খোলা বন্ধনী সঠিকভাবে বন্ধ করা হয়েছে) এবং একে অপরের মধ্যে নেস্টেড নয়\n    ইনপুট স্ট্রিংয়ে থাকা যেকোনো স্পেস উপেক্ষা করুন।\n    >>> func('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n","canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n","entry_point":"func"}
{"task_id":"HumanEval\/2","prompt":"def func(number: float) -> float:\n    \"\"\" একটি ধনাত্মক ভাসমান বিন্দু সংখ্যা দেওয়া হলে, এটি দুই অংশে ভাগ করা যায়\n    একটি পূর্ণসংখ্যা অংশ (দেওয়া সংখ্যার চেয়ে ছোট সবচেয়ে বড় পূর্ণসংখ্যা) এবং দশমিক\n    (বাকি অংশ সবসময় 1 এর চেয়ে ছোট)।\n\n    সংখ্যার দশমিক অংশটি ফেরত দিন।\n    >>> func(3.5)\n    0.5\n    \"\"\"","canonical_solution":"    return number % 1.0\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n","entry_point":"func"}
{"task_id":"HumanEval\/3","prompt":"from typing import List\n\n\ndef func(operations: List[int]) -> bool:\n    \"\"\" আপনাকে একটি ব্যাংক অ্যাকাউন্টের জমা এবং উত্তোলনের অপারেশনের একটি তালিকা দেওয়া হয়েছে যা শূন্য ব্যালেন্স দিয়ে শুরু হয়। আপনার কাজ হল এটি সনাক্ত করা যে কোনো সময়ে অ্যাকাউন্টের ব্যালেন্স শূন্যের নিচে নেমে গেছে কিনা, এবং\n    সেই সময়ে ফাংশনটি সত্য ফেরত দেওয়া উচিত। অন্যথায় এটি মিথ্যা ফেরত দেবে।\n    >>> func([1, 2, 3])\n    False\n    >>> func([1, 2, -4, 5])\n    True\n    \"\"\"\n","canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n","entry_point":"func"}
{"task_id":"HumanEval\/4","prompt":"from typing import List\n\n\ndef func(numbers: List[float]) -> float:\n    \"\"\" প্রদত্ত সংখ্যার তালিকার জন্য, এই ডেটাসেটের গড়ের চারপাশে গড় পরিমাণগত বিচ্যুতি গণনা করুন।\n    গড় পরিমাণগত বিচ্যুতি হল প্রতিটি উপাদান এবং একটি কেন্দ্রবিন্দু (এই ক্ষেত্রে গড়) এর মধ্যে গড় পরিমাণগত পার্থক্য:\n    MAD = average | x - x_mean |\n    >>> func([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n","canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n","entry_point":"func"}
{"task_id":"HumanEval\/5","prompt":"from typing import List\n\n\ndef func(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" ইনপুট লিস্ট `numbers` এর প্রতিটি পরপর দুটি উপাদানের মধ্যে 'delimeter' নামক সংখ্যাটি ঢোকান\n    >>> func([], 4)\n    []\n    >>> func([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n","canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n","entry_point":"func"}
{"task_id":"HumanEval\/6","prompt":"from typing import List\n\n\ndef func(paren_string: str) -> List[int]:\n    \"\"\" এই ফাংশনের ইনপুট হল একটি স্ট্রিং যা বিভিন্ন গ্রুপের জন্য নেস্টেড প্যারেনথেসিস প্রতিনিধিত্ব করে যা স্পেস দ্বারা পৃথক করা হয়েছে।\n    প্রতিটি গ্রুপের জন্য, প্যারেনথেসিসের সর্বাধিক গভীর স্তরের নেস্টিং আউটপুট করুন।\n    যেমন (()()) এর সর্বাধিক দুই স্তরের নেস্টিং আছে যখন ((())) এর তিনটি আছে।\n\n    >>> func('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n","canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n","entry_point":"func"}
{"task_id":"HumanEval\/7","prompt":"from typing import List\n\n\ndef func(strings: List[str], substring: str) -> List[str]:\n    \"\"\" একটি ইনপুট স্ট্রিং তালিকা থেকে কেবল সেই স্ট্রিংগুলি ফিল্টার করুন যা নির্দিষ্ট সাবস্ট্রিং ধারণ করে\n    >>> func([], 'a')\n    []\n    >>> func(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n","canonical_solution":"    return [x for x in strings if substring in x]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n","entry_point":"func"}
{"task_id":"HumanEval\/8","prompt":"from typing import List, Tuple\n\n\ndef func(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" একটি নির্দিষ্ট পূর্ণসংখ্যার তালিকার জন্য, তালিকার সমস্ত পূর্ণসংখ্যার যোগফল এবং গুণফল নিয়ে একটি টুপল ফেরত দিন।\n    খালি যোগফল সমান হওয়া উচিত 0 এবং খালি গুণফল সমান হওয়া উচিত 1।\n    >>> func([])\n    (0, 1)\n    >>> func([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n","canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n","entry_point":"func"}
{"task_id":"HumanEval\/9","prompt":"from typing import List, Tuple\n\n\ndef func(numbers: List[int]) -> List[int]:\n    \"\"\" একটি নির্দিষ্ট পূর্ণসংখ্যার তালিকা থেকে, অনুক্রমে দেওয়া মুহূর্ত পর্যন্ত পাওয়া সর্বাধিক উপাদানের একটি তালিকা তৈরি করুন।\n    >>> func([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n","canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n","entry_point":"func"}
{"task_id":"HumanEval\/10","prompt":"def is_palindrome(string: str) -> bool:\n    \"\"\" পরীক্ষা করুন যে দেওয়া স্ট্রিংটি একটি প্যালিনড্রোম কিনা \"\"\"\n    return string == string[::-1]\n\n\ndef func(string: str) -> str:\n    \"\"\" সরবরাহ করা স্ট্রিং দিয়ে শুরু হওয়া সবচেয়ে ছোট প্যালিনড্রোমটি খুঁজুন।\n    অ্যালগরিদমের ধারণা সহজ:\n    - সরবরাহ করা স্ট্রিংয়ের সবচেয়ে দীর্ঘ পোস্টফিক্স খুঁজুন যা একটি প্যালিনড্রোম।\n    - প্যালিনড্রোমিক সাফিক্সের আগে আসা স্ট্রিং প্রিফিক্সের বিপরীতটি স্ট্রিংয়ের শেষে যোগ করুন।\n    >>> func('')\n    ''\n    >>> func('cat')\n    'catac'\n    >>> func('cata')\n    'catac'\n    \"\"\"","canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n","entry_point":"func"}
{"task_id":"HumanEval\/11","prompt":"from typing import List\n\n\ndef func(a: str, b: str) -> str:\n    \"\"\" ইনপুট হল দুটি স্ট্রিং a এবং b, যা শুধুমাত্র 1 এবং 0 দ্বারা গঠিত।\n    এই ইনপুটগুলিতে বাইনারি XOR প্রদর্শন করুন এবং ফলাফলও একটি স্ট্রিং হিসাবে ফেরত দিন।\n    >>> func('010', '110')\n    '100'\n    \"\"\"\n","canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n","entry_point":"func"}
{"task_id":"HumanEval\/12","prompt":"from typing import List, Optional\n\n\ndef func(strings: List[str]) -> Optional[str]:\n    \"\"\" স্ট্রিংগুলির তালিকা থেকে, সবচেয়ে দীর্ঘটি ফেরত দিন। একই দৈর্ঘ্যের একাধিক স্ট্রিংগুলির ক্ষেত্রে প্রথমটি ফেরত দিন। ইনপুট তালিকা খালি হলে কিছুই ফেরত দেবেন না।\n    >>> func([])\n\n    >>> func(['a', 'b', 'c'])\n    'a'\n    >>> func(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n","canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n","entry_point":"func"}
{"task_id":"HumanEval\/13","prompt":"def func(a: int, b: int) -> int:\n    \"\"\" দুটি পূর্ণসংখ্যা a এবং b এর সর্বোচ্চ সাধারণ ভাজক ফেরত দিন\n    >>> func(3, 5)\n    1\n    >>> func(25, 15)\n    5\n    \"\"\"","canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n","entry_point":"func"}
{"task_id":"HumanEval\/14","prompt":"from typing import List\n\n\ndef func(string: str) -> List[str]:\n    \"\"\" ইনপুট স্ট্রিং এর সবচেয়ে ছোট থেকে সবচেয়ে দীর্ঘ পর্যন্ত সব উপসর্গের তালিকা ফেরত দিন\n    >>> func('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n","canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n","entry_point":"func"}
{"task_id":"HumanEval\/15","prompt":"\ndef func(n: int) -> str:\n    \"\"\" 0 থেকে শুরু করে n পর্যন্ত সংখ্যাগুলি স্পেস-দ্বারা পৃথক করে একটি স্ট্রিং ফেরত দিন।\n    >>> func(0)\n    '0'\n    >>> func(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n","canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n","entry_point":"func"}
{"task_id":"HumanEval\/16","prompt":"def func(string: str) -> int:\n    \"\"\" একটি স্ট্রিং দেওয়া হলে, তাতে কতগুলি আলাদা অক্ষর (কেস উপেক্ষা করে) আছে তা বের করুন\n    >>> func('xyzXYZ')\n    3\n    >>> func('Jerry')\n    4\n    \"\"\"","canonical_solution":"    return len(set(string.lower()))\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n","entry_point":"func"}
{"task_id":"HumanEval\/17","prompt":"from typing import List\n\n\ndef func(music_string: str) -> List[int]:\n    \"\"\" এই ফাংশনের ইনপুট হল একটি স্ট্রিং যা একটি বিশেষ ASCII ফরম্যাটে সঙ্গীতের নোটগুলি প্রতিনিধিত্ব করে।\n    আপনার কাজ হল এই স্ট্রিংটি পার্স করা এবং প্রতিটি নোট কতগুলি বিট স্থায়ী হয় তার সম্পর্কিত পূর্ণসংখ্যার তালিকা ফেরত দেওয়া।\n\n    এখানে একটি কিংবদন্তি রয়েছে:\n    'o' - পূর্ণ নোট, চারটি বিট স্থায়ী হয়\n    'o|' - অর্ধ নোট, দুটি বিট স্থায়ী হয়\n    '.|' - চতুর্থাংশ নোট, একটি বিট স্থায়ী হয়\n\n    >>> func('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n","canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n","entry_point":"func"}
{"task_id":"HumanEval\/18","prompt":"def func(string: str, substring: str) -> int:\n    \"\"\" মূল স্ট্রিংয়ে দেওয়া সাবস্ট্রিংটি কতবার পাওয়া যায় তা খুঁজে বের করুন। ওভারল্যাপিং কেসগুলিও গণনা করুন।\n    >>> func('', 'a')\n    0\n    >>> func('aaa', 'a')\n    3\n    >>> func('aaaa', 'aa')\n    3\n    \"\"\"","canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n","entry_point":"func"}
{"task_id":"HumanEval\/19","prompt":"from typing import List\n\n\ndef func(numbers: str) -> str:\n    \"\"\" ইনপুট হল 'zero' থেকে 'nine' পর্যন্ত সংখ্যার শব্দগুলির একটি স্পেস-বিভক্ত স্ট্রিং।\n    বৈধ পছন্দগুলি হল 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' এবং 'nine'।\n    সংখ্যাগুলিকে সবচেয়ে ছোট থেকে বড় পর্যন্ত সাজানো স্ট্রিং ফেরত দিন\n    >>> func('three one five')\n    'one three five'\n    \"\"\"\n","canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n","entry_point":"func"}
{"task_id":"HumanEval\/20","prompt":"from typing import List, Tuple\n\n\ndef func(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" সরবরাহ করা সংখ্যার তালিকা থেকে (দৈর্ঘ্য অন্তত দুটি) দুটি সংখ্যা নির্বাচন করুন যেগুলি একে অপরের সবচেয়ে কাছাকাছি এবং তাদেরকে ক্রমানুসারে ফেরত দিন (ছোট সংখ্যা, বড় সংখ্যা)।\n    >>> func([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> func([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n","canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n","entry_point":"func"}
{"task_id":"HumanEval\/21","prompt":"from typing import List\n\n\ndef func(numbers: List[float]) -> List[float]:\n    \"\"\" কমপক্ষে দুটি উপাদান সম্বলিত সংখ্যার তালিকা দেওয়া হলে, সেই তালিকায় একটি রৈখিক রূপান্তর প্রয়োগ করুন,\n    যাতে সবচেয়ে ছোট সংখ্যাটি 0 এবং সবচেয়ে বড় সংখ্যাটি 1 হয়ে যাবে\n    >>> func([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n","canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n","entry_point":"func"}
{"task_id":"HumanEval\/22","prompt":"from typing import List, Any\n\n\ndef func(values: List[Any]) -> List[int]:\n    \"\"\" যেকোনো পাইথন মান সম্বলিত দেওয়া তালিকা থেকে শুধুমাত্র পূর্ণসংখ্যাগুলি ফিল্টার করুন\n    >>> func(['a', 3.14, 5])\n    [5]\n    >>> func([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n","canonical_solution":"    return [x for x in values if isinstance(x, int)]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n","entry_point":"func"}
{"task_id":"HumanEval\/23","prompt":"\ndef func(string: str) -> int:\n    \"\"\" প্রদত্ত স্ট্রিংয়ের দৈর্ঘ্য ফেরত দিন\n    >>> func('')\n    0\n    >>> func('abc')\n    3\n    \"\"\"","canonical_solution":"    return len(string)\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n","entry_point":"func"}
{"task_id":"HumanEval\/24","prompt":"\ndef func(n: int) -> int:\n    \"\"\" একটি নির্দিষ্ট সংখ্যা n এর জন্য, n কে সমানভাবে ভাগ করে এমন সবচেয়ে বড় সংখ্যা খুঁজুন, যা n এর চেয়ে ছোট\n    >>> func(15)\n    5\n    \"\"\"\n","canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n","entry_point":"func"}
{"task_id":"HumanEval\/25","prompt":"from typing import List\n\n\ndef func(n: int) -> List[int]:\n    \"\"\" প্রদত্ত পূর্ণসংখ্যার মৌলিক গুণনীয়কগুলির তালিকা সর্বনিম্ন থেকে সর্বোচ্চ ক্রমে ফেরত দিন।\n    প্রতিটি গুণনীয়ক তার গুণনফলে যতবার উপস্থিত হয়েছে ততবার তালিকাভুক্ত করা উচিত।\n    ইনপুট সংখ্যাটি সমস্ত গুণনীয়কের গুণফলের সমান হতে হবে\n    >>> func(8)\n    [2, 2, 2]\n    >>> func(25)\n    [5, 5]\n    >>> func(70)\n    [2, 5, 7]\n    \"\"\"\n","canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n","entry_point":"func"}
{"task_id":"HumanEval\/26","prompt":"from typing import List\n\n\ndef func(numbers: List[int]) -> List[int]:\n    \"\"\" একটি পূর্ণসংখ্যার তালিকা থেকে, সমস্ত উপাদান সরান যা একাধিকবার ঘটে।\n    ইনপুটের মতো উপাদানগুলির ক্রম একই রাখুন।\n    >>> func([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n","canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n","entry_point":"func"}
{"task_id":"HumanEval\/27","prompt":"def func(string: str) -> str:\n    \"\"\" একটি নির্দিষ্ট স্ট্রিং এর জন্য, ছোট হাতের অক্ষরগুলিকে বড় হাতের অক্ষরে এবং বড় হাতের অক্ষরগুলিকে ছোট হাতের অক্ষরে পরিবর্তন করুন।\n    >>> func('Hello')\n    'hELLO'\n    \"\"\"","canonical_solution":"    return string.swapcase()\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n","entry_point":"func"}
{"task_id":"HumanEval\/28","prompt":"from typing import List\n\n\ndef func(strings: List[str]) -> str:\n    \"\"\" স্ট্রিংগুলির একটি তালিকা একটি একক স্ট্রিং এ জোড়া\n    >>> func([])\n    ''\n    >>> func(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n","canonical_solution":"    return ''.join(strings)\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n","entry_point":"func"}
{"task_id":"HumanEval\/29","prompt":"from typing import List\n\n\ndef func(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" একটি ইনপুট স্ট্রিং তালিকা থেকে কেবল সেই স্ট্রিংগুলি ফিল্টার করুন যা একটি নির্দিষ্ট উপসর্গ দিয়ে শুরু হয়।\n    >>> func([], 'a')\n    []\n    >>> func(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n","canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n","test":"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n","entry_point":"func"}
{"task_id":"HumanEval\/30","prompt":"\ndef func(l: list):\n    \"\"\"লিস্টে শুধুমাত্র ধনাত্মক সংখ্যাগুলি ফেরত দিন।\n    >>> func([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> func([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n","canonical_solution":"    return [e for e in l if e > 0]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/31","prompt":"def func(n):\n    \"\"\"যদি দেওয়া সংখ্যাটি মৌলিক হয় তাহলে true ফেরত দিন, অন্যথায় false ফেরত দিন।\n    >>> func(6)\n    False\n    >>> func(101)\n    True\n    >>> func(11)\n    True\n    >>> func(13441)\n    True\n    >>> func(61)\n    True\n    >>> func(4)\n    False\n    >>> func(1)\n    False\n    \"\"\"","canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/32","prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    একটি বহুপদীর সমীকরণের গুণাঙ্ক xs এবং বিন্দু x এ বহুপদীর মান নির্ণয় করে।\n    ফেরত দেয় xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef func(xs: list):\n    \"\"\" xs হল একটি বহুপদীর গুণাঙ্ক।\n    func এমন একটি x খুঁজে পায় যেখানে poly(x) = 0 হয়।\n    func শুধুমাত্র একটি শূন্য বিন্দু ফেরত দেয়, এমনকি যদি অনেকগুলি থাকে।\n    তাছাড়া, func শুধুমাত্র এমন গুণাঙ্কের তালিকা xs নেয় যার গুণাঙ্কের সংখ্যা জোড় এবং সর্বোচ্চ অশূন্য গুণাঙ্ক থাকে কারণ এটি একটি সমাধান নিশ্চিত করে।\n    >>> round(func([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(func([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n","canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n","entry_point":"func"}
{"task_id":"HumanEval\/33","prompt":"def func(l: list):\n    \"\"\"এই ফাংশনটি একটি তালিকা l নেয় এবং এমন একটি তালিকা l' ফেরত দেয় যেখানে\n    l' তালিকা l এর সাথে একই রকম যেসব সূচকে তিন দ্বারা বিভাজ্য নয়, এবং যেসব সূচকে তিন দ্বারা বিভাজ্য সেগুলির মান সমান\n    l এর সংশ্লিষ্ট সূচকের মানের সাথে, কিন্তু সাজানো।\n    >>> func([1, 2, 3])\n    [1, 2, 3]\n    >>> func([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n","canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n","entry_point":"func"}
{"task_id":"HumanEval\/34","prompt":"def func(l: list):\n    \"\"\"একটি লিস্টে সাজানো অনন্য উপাদানগুলি ফেরত দিন\n    >>> func([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"","canonical_solution":"    return sorted(list(set(l)))\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/35","prompt":"def func(l: list):\n    \"\"\"তালিকায় সর্বাধিক উপাদান ফেরত দিন।\n    >>> func([1, 2, 3])\n    3\n    >>> func([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"","canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n","entry_point":"func"}
{"task_id":"HumanEval\/36","prompt":"def func(n: int):\n    \"\"\"n এর চেয়ে কম সংখ্যাক পূর্ণসংখ্যাগুলিতে ৭ অঙ্কটি কতবার আসে তা ফেরত দিন, যেগুলি ১১ অথবা ১৩ দ্বারা বিভাজ্য।\n    >>> func(50)\n    0\n    >>> func(78)\n    2\n    >>> func(79)\n    3\n    \"\"\"","canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n","entry_point":"func"}
{"task_id":"HumanEval\/37","prompt":"def func(l: list):\n    \"\"\"এই ফাংশনটি একটি লিস্ট l নেয় এবং এমন একটি লিস্ট l' ফেরত দেয় যেখানে\n    l' বিজোড় সূচকগুলিতে l এর সাথে অভিন্ন, যখন এর মানগুলি জোড় সূচকগুলিতে সমান\n    l এর জোড় সূচকগুলির মানগুলির সাথে, কিন্তু সাজানো।\n    >>> func([1, 2, 3])\n    [1, 2, 3]\n    >>> func([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n","canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n","entry_point":"func"}
{"task_id":"HumanEval\/38","prompt":"def encode_cyclic(s: str):\n    \"\"\"\n    তিনটি অক্ষরের গ্রুপ সাইক্লিং করে এনকোড করা স্ট্রিং ফেরত দেয়।\n    \"\"\"\n    # স্ট্রিংকে তিনটি অক্ষরের গ্রুপে ভাগ করুন। প্রতিটি গ্রুপের দৈর্ঘ্য 3।\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # প্রতিটি গ্রুপের উপাদানগুলি সাইক্লিং করুন। যদি গ্রুপের উপাদান তিনটির চেয়ে কম হয় তবে নয়।\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef func(s: str):\n    \"\"\"\n    encode_cyclic ফাংশন দ্বারা এনকোড করা স্ট্রিং হিসেবে ইনপুট নেয়। ডিকোড করা স্ট্রিং ফেরত দেয়।\n    \"\"\"","canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n","entry_point":"func"}
{"task_id":"HumanEval\/39","prompt":"def func(n: int):\n    \"\"\"\n    func ফাংশনটি n-তম সংখ্যাটি ফিরিয়ে দেয় যা একটি ফিবোনাচ্চি সংখ্যা এবং এটি একটি মৌলিক সংখ্যা।\n    >>> func(1)\n    2\n    >>> func(2)\n    3\n    >>> func(3)\n    5\n    >>> func(4)\n    13\n    >>> func(5)\n    89\n    \"\"\"\n","canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n","entry_point":"func"}
{"task_id":"HumanEval\/40","prompt":"def func(l: list):\n    \"\"\"\n    func একটি পূর্ণসংখ্যার তালিকা ইনপুট হিসেবে নেয়।\n    যদি তালিকায় তিনটি পৃথক উপাদান থাকে যাদের যোগফল শূন্য হয়, তাহলে এটি True ফেরত দেয়,\n    অন্যথায় False ফেরত দেয়।\n\n    >>> func([1, 3, 5, 0])\n    False\n    >>> func([1, 3, -2, 1])\n    True\n    >>> func([1, 2, 3, 7])\n    False\n    >>> func([2, 4, -5, 3, 9, 7])\n    True\n    >>> func([1])\n    False\n    \"\"\"\n","canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/41","prompt":"def func(n: int):\n    \"\"\"\n    কল্পনা করুন একটি সড়ক যা একটি সম্পূর্ণ সোজা অনন্ত দীর্ঘ রেখা।\n    n সংখ্যক গাড়ি বাম থেকে ডানে চালিত হচ্ছে; একই সময়ে, ভিন্ন একটি সেট ন গাড়ি\n    ডান থেকে বামে চালিত হচ্ছে। দুই সেট গাড়ি প্রাথমিকভাবে একে অপর থেকে খুব দূরে শুরু করে।\n    সব গাড়ি একই গতিতে চলে। দুটি গাড়ির সংঘর্ষ বলা হয় যখন একটি গাড়ি যা বাম থেকে ডানে চলছে\n    একটি গাড়ির সাথে ধাক্কা খায় যা ডান থেকে বামে চলছে।\n    তবে, গাড়িগুলি অসীম দৃঢ় এবং শক্তিশালী; ফলস্বরূপ, তারা সংঘর্ষ না হওয়ার মতো তাদের পথ অনুসরণ করে চলতে থাকে।\n\n    এই ফাংশনটি এমন সংঘর্ষের সংখ্যা আউটপুট করে।\n    \"\"\"","canonical_solution":"    return n**2\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n","entry_point":"func"}
{"task_id":"HumanEval\/42","prompt":"def func(l: list):\n    \"\"\"প্রতিটি উপাদানকে 1 দ্বারা বৃদ্ধি করে এমন লিস্ট ফেরত দিন।\n    >>> func([1, 2, 3])\n    [2, 3, 4]\n    >>> func([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n","canonical_solution":"    return [(e + 1) for e in l]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/43","prompt":"\ndef func(l):\n    \"\"\"\n    func একটি পূর্ণসংখ্যার তালিকা ইনপুট হিসেবে নেয়।\n    তালিকায় দুটি পৃথক উপাদান থাকলে যাদের যোগফল শূন্য হয়, তাহলে এটি True ফেরত দেয়,\n    অন্যথায় False ফেরত দেয়।\n    >>> func([1, 3, 5, 0])\n    False\n    >>> func([1, 3, -2, 1])\n    False\n    >>> func([1, 2, 3, 7])\n    False\n    >>> func([2, 4, -5, 3, 5, 7])\n    True\n    >>> func([1])\n    False\n    \"\"\"\n","canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/44","prompt":"def func(x: int, base: int):\n    \"\"\"ইনপুট সংখ্যা x এর সাংখ্যিক ভিত্তি পরিবর্তন করুন base এ।\n    রূপান্তরের পরের স্ট্রিং প্রতিনিধিত্ব ফেরত দিন।\n    ভিত্তি সংখ্যাগুলি 10 এর চেয়ে কম।\n    >>> func(8, 3)\n    '22'\n    >>> func(8, 2)\n    '1000'\n    >>> func(7, 2)\n    '111'\n    \"\"\"","canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n","entry_point":"func"}
{"task_id":"HumanEval\/45","prompt":"\ndef func(a, h):\n    \"\"\"একটি বাহুর দৈর্ঘ্য এবং উচ্চতা দেওয়া হলে ত্রিভুজের ক্ষেত্রফল ফেরত দিন।\n    >>> func(5, 3)\n    7.5\n    \"\"\"\n","canonical_solution":"    return a * h \/ 2.0\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n","entry_point":"func"}
{"task_id":"HumanEval\/46","prompt":"def func(n: int):\n    \"\"\"Fib4 সংখ্যা ধারা হল একটি ফিবোনাচ্চি ধারার মতো অনুরূপ ধারা যা নিম্নলিখিতভাবে সংজ্ঞায়িত:\n    func(0) -> 0\n    func(1) -> 0\n    func(2) -> 2\n    func(3) -> 0\n    func(n) -> func(n-1) + func(n-2) + func(n-3) + func(n-4).\n    অনুগ্রহ করে পুনরাবৃত্তি ব্যবহার না করে func সংখ্যা ধারার n-তম উপাদানটি দক্ষতার সাথে গণনা করার জন্য একটি ফাংশন লিখুন।\n    >>> func(5)\n    4\n    >>> func(6)\n    8\n    >>> func(7)\n    14\n    \"\"\"","canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n","entry_point":"func"}
{"task_id":"HumanEval\/47","prompt":"\ndef func(l: list):\n    \"\"\"তালিকা l এর উপাদানগুলির মধ্যমা ফেরত দিন।\n    >>> func([3, 1, 2, 4, 5])\n    3\n    >>> func([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n","canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n","entry_point":"func"}
{"task_id":"HumanEval\/48","prompt":"def func(text: str):\n    \"\"\"\n    প্রদত্ত স্ট্রিংটি যদি প্যালিনড্রোম হয় তা পরীক্ষা করে\n    >>> func('')\n    True\n    >>> func('aba')\n    True\n    >>> func('aaaaa')\n    True\n    >>> func('zbcd')\n    False\n    \"\"\"\n","canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/49","prompt":"def func(n: int, p: int):\n    \"\"\"2^n কে p দ্বারা মডুলো করার ফলাফল ফেরত দিন (সংখ্যাতত্ত্বের বিষয়ে সচেতন থাকুন)।\n    >>> func(3, 5)\n    3\n    >>> func(1101, 101)\n    2\n    >>> func(0, 101)\n    1\n    >>> func(3, 11)\n    8\n    >>> func(100, 101)\n    1\n    \"\"\"\n","canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n","entry_point":"func"}
{"task_id":"HumanEval\/50","prompt":"\ndef encode_shift(s: str):\n    \"\"\"\n    প্রতিটি অক্ষরকে বর্ণমালায় ৫ ঘর সরিয়ে এনকোড করা স্ট্রিং ফেরত দেয়।\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef func(s: str):\n    \"\"\"\n    encode_shift ফাংশন দ্বারা এনকোড করা স্ট্রিং ইনপুট হিসেবে নেয়। ডিকোড করা স্ট্রিং ফেরত দেয়।\n    \"\"\"","canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n","entry_point":"func"}
{"task_id":"HumanEval\/51","prompt":"\ndef func(text):\n    \"\"\"\n    func হল এমন একটি ফাংশন যা একটি স্ট্রিং নেয় এবং স্বরবর্ণ ছাড়া স্ট্রিং ফেরত দেয়।\n    >>> func('')\n    ''\n    >>> func(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> func('abcdef')\n    'bcdf'\n    >>> func('aaaaa')\n    ''\n    >>> func('aaBAA')\n    'B'\n    >>> func('zbcd')\n    'zbcd'\n    \"\"\"\n","canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n","entry_point":"func"}
{"task_id":"HumanEval\/52","prompt":"def func(l: list, t: int):\n    \"\"\"তালিকা l এর সমস্ত সংখ্যা যদি সীমা t এর নিচে হয় তাহলে True ফেরত দিন।\n    >>> func([1, 2, 4, 10], 100)\n    True\n    >>> func([1, 20, 4, 10], 5)\n    False\n    \"\"\"","canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n","entry_point":"func"}
{"task_id":"HumanEval\/53","prompt":"\ndef func(x: int, y: int):\n    \"\"\"দুটি সংখ্যা x এবং y যোগ করুন\n    >>> func(2, 3)\n    5\n    >>> func(5, 7)\n    12\n    \"\"\"\n","canonical_solution":"    return x + y\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n","entry_point":"func"}
{"task_id":"HumanEval\/54","prompt":"def func(s0: str, s1: str):\n    \"\"\"\n    দুটি শব্দে একই অক্ষরগুলি আছে কিনা তা যাচাই করুন।\n    >>> func('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> func('abcd', 'dddddddabc')\n    True\n    >>> func('dddddddabc', 'abcd')\n    True\n    >>> func('eabcd', 'dddddddabc')\n    False\n    >>> func('abcd', 'dddddddabce')\n    False\n    >>> func('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n","canonical_solution":"    return set(s0) == set(s1)\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/55","prompt":"\ndef func(n: int):\n    \"\"\"n-তম ফিবোনাচ্চি সংখ্যা ফেরত দিন।\n    >>> func(10)\n    55\n    >>> func(1)\n    1\n    >>> func(8)\n    21\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n","entry_point":"func"}
{"task_id":"HumanEval\/56","prompt":"def func(brackets: str):\n    \"\"\" brackets হল একটি \"<\" এবং \">\" এর স্ট্রিং।\n    প্রতিটি খোলা বন্ধনীর সঠিক বন্ধ বন্ধনী থাকলে True ফেরত দিন।\n\n    >>> func(\"<\")\n    False\n    >>> func(\"<>\")\n    True\n    >>> func(\"<<><>>\")\n    True\n    >>> func(\"><<>\")\n    False\n    \"\"\"","canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n","entry_point":"func"}
{"task_id":"HumanEval\/57","prompt":"def func(l: list):\n    \"\"\"তালিকার উপাদানগুলি যদি একটানা বৃদ্ধিপ্রাপ্ত বা হ্রাসপ্রাপ্ত হয় তবে True ফেরত দিন।\n    >>> func([1, 2, 4, 20])\n    True\n    >>> func([1, 20, 4, 10])\n    False\n    >>> func([4, 1, 0, -10])\n    True\n    \"\"\"","canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/58","prompt":"def func(l1: list, l2: list):\n    \"\"\"দুটি তালিকার জন্য সাজানো অনন্য সাধারণ উপাদানগুলি ফেরত দিন।\n    >>> func([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> func([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"","canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/59","prompt":"def func(n: int):\n    \"\"\"n এর সবচেয়ে বড় মৌলিক গুণনীয়ক ফেরত দিন। ধরা হোক n > 1 এবং মৌলিক সংখ্যা নয়।\n    >>> func(13195)\n    29\n    >>> func(2048)\n    2\n    \"\"\"","canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n","entry_point":"func"}
{"task_id":"HumanEval\/60","prompt":"def func(n: int):\n    \"\"\"func হল এমন একটি ফাংশন যা 1 থেকে n পর্যন্ত সংখ্যাগুলির যোগফল করে।\n    >>> func(30)\n    465\n    >>> func(100)\n    5050\n    >>> func(5)\n    15\n    >>> func(10)\n    55\n    >>> func(1)\n    1\n    \"\"\"","canonical_solution":"    return sum(range(n + 1))\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n","entry_point":"func"}
{"task_id":"HumanEval\/61","prompt":"def func(brackets: str):\n    \"\"\" brackets হল একটি \"(\" এবং \")\" এর স্ট্রিং।\n    প্রতিটি খোলা বন্ধনীর সঠিক বন্ধ বন্ধনী থাকলে True ফেরত দিন।\n\n    >>> func(\"(\")\n    False\n    >>> func(\"()\")\n    True\n    >>> func(\"(()())\")\n    True\n    >>> func(\")(()\")\n    False\n    \"\"\"","canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n","entry_point":"func"}
{"task_id":"HumanEval\/62","prompt":"def func(xs: list):\n    \"\"\" xs হল একটি বহুপদীর গুণাঙ্কসমূহ।\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     এই বহুপদীর সমাকলন একই আকারে ফেরত দিন।\n    >>> func([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> func([1, 2, 3])\n    [2, 6]\n    \"\"\"\n","canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/63","prompt":"def func(n: int):\n    \"\"\"FibFib সংখ্যা ধারা হল একটি ফিবোনাচ্চি ধারার মতো অনুরূপ ধারা যা নিম্নলিখিতভাবে সংজ্ঞায়িত:\n    func(0) == 0\n    func(1) == 0\n    func(2) == 1\n    func(n) == func(n-1) + func(n-2) + func(n-3).\n    দয়া করে func সংখ্যা ধারার n-তম উপাদানটি দক্ষতার সাথে গণনা করার জন্য একটি ফাংশন লিখুন।\n    >>> func(1)\n    0\n    >>> func(5)\n    4\n    >>> func(8)\n    24\n    \"\"\"","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n","entry_point":"func"}
{"task_id":"HumanEval\/64","prompt":"FIX = \"\"\"\nআরও টেস্ট কেস যোগ করুন।\n\"\"\"\n\ndef func(s):\n    \"\"\"একটি শব্দ প্রতিনিধিত্ব করা স্ট্রিং নিয়ে একটি ফাংশন func লিখুন যা স্ট্রিংয়ে স্বরবর্ণের সংখ্যা ফেরত দেয়।\n    এই ক্ষেত্রে স্বরবর্ণ হল 'a', 'e', 'i', 'o', 'u'। এখানে, 'y' ও একটি স্বরবর্ণ,\n    কিন্তু শুধুমাত্র যখন এটি দেওয়া শব্দের শেষে থাকে।\n\n    উদাহরণ:\n    >>> func(\"abcde\")\n    2\n    >>> func(\"ACEDY\")\n    3\n    \"\"\"\n","canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/65","prompt":"def func(x, shift):\n    \"\"\"পূর্ণসংখ্যা x-এর অঙ্কগুলিকে বৃত্তাকারে সরান, অঙ্কগুলিকে ডানে shift দ্বারা সরিয়ে ফলাফলটি স্ট্রিং হিসেবে ফেরত দিন।\n    যদি shift > অঙ্কের সংখ্যা হয়, তাহলে অঙ্কগুলিকে উল্টানো অবস্থায় ফেরত দিন।\n    >>> func(12, 1)\n    \"21\"\n    >>> func(12, 2)\n    \"12\"\n    \"\"\"","canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/66","prompt":"def func(s):\n    \"\"\"কাজ\n    এমন একটি ফাংশন লিখুন যা ইনপুট হিসেবে একটি স্ট্রিং নেয় এবং শুধুমাত্র উপরের অক্ষরগুলির ASCII কোডের যোগফল ফেরত দেয়।\n\n    উদাহরণসমূহ:\n        func(\"\") => 0\n        func(\"abAB\") => 131\n        func(\"abcCd\") => 67\n        func(\"helloE\") => 69\n        func(\"woArBld\") => 131\n        func(\"aAaaaXa\") => 153\n    \"\"\"","canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/67","prompt":"def func(s,n):\n    \"\"\"\n    এই কাজে, আপনাকে একটি স্ট্রিং দেওয়া হবে যা একটি ফলের ঝুড়িতে বিতরণ করা আপেল এবং কমলা ফলের সংখ্যা প্রতিনিধিত্ব করে \n    এই ঝুড়িতে আপেল, কমলা এবং আম ফল রয়েছে। মোট কমলা এবং আপেলের সংখ্যা প্রতিনিধিত্ব করে এমন স্ট্রিং এবং ঝুড়িতে ফলের মোট সংখ্যা \n    প্রতিনিধিত্ব করে এমন একটি পূর্ণসংখ্যা দেওয়া হলে ঝুড়িতে আম ফলের সংখ্যা ফেরত দিন।\n    উদাহরণস্বরূপ:\n    func(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    func(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    func(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    func(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n","canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n","entry_point":"func"}
{"task_id":"HumanEval\/68","prompt":"def func(arr):\n    \"\"\"\n    \"একটি গাছের শাখা প্রতিনিধিত্বকারী একটি অ্যারে দেওয়া হলে, যেখানে নন-নেগেটিভ পূর্ণসংখ্যা নোড রয়েছে,\n    আপনার কাজ হল একটি নোড প্লাক করা এবং তা ফেরত দেওয়া।\n    প্লাক করা নোডটি হওয়া উচিত সবচেয়ে ছোট জোড় মানের নোড।\n    যদি একই সবচেয়ে ছোট জোড় মানের একাধিক নোড পাওয়া যায়, তাহলে সবচেয়ে ছোট ইনডেক্সের নোডটি ফেরত দিন।\n\n    প্লাক করা নোডটি একটি তালিকায় ফেরত দিতে হবে, [ সবচেয়ে ছোট মান, এর ইনডেক্স ],\n    যদি কোনো জোড় মান না থাকে অথবা দেওয়া অ্যারেটি খালি হয়, তাহলে [] ফেরত দিন।\n\n    উদাহরণ ১:\n        ইনপুট: [4,2,3]\n        আউটপুট: [2, 1]\n        ব্যাখ্যা: ২ এর সবচেয়ে ছোট জোড় মান আছে, এবং ২ এর সবচেয়ে ছোট ইনডেক্স আছে।\n\n    উদাহরণ ২:\n        ইনপুট: [1,2,3]\n        আউটপুট: [2, 1]\n        ব্যাখ্যা: ২ এর সবচেয়ে ছোট জোড় মান আছে, এবং ২ এর সবচেয়ে ছোট ইনডেক্স আছে। \n\n    উদাহরণ ৩:\n        ইনপুট: []\n        আউটপুট: []\n    \n    উদাহরণ ৪:\n        ইনপুট: [5, 0, 3, 0, 4, 2]\n        আউটপুট: [0, 1]\n        ব্যাখ্যা: ০ হল সবচেয়ে ছোট মান, কিন্তু দুটি শূন্য আছে,\n                     তাই আমরা প্রথম শূন্যটি বেছে নেব, যার সবচেয়ে ছোট ইনডেক্স আছে।\n\n    বাধাসমূহ:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n","canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/69","prompt":"def func(lst):\n    '''\n    আপনাকে একটি অ-খালি পজিটিভ পূর্ণসংখ্যার তালিকা দেওয়া হয়েছে। এমন সর্বোচ্চ পূর্ণসংখ্যা ফেরত দিন যা শূন্যের চেয়ে বড় \n    এবং যার ঘনত্ব সেই পূর্ণসংখ্যার মানের সমান বা তার চেয়ে বেশি। \n    একটি পূর্ণসংখ্যার ঘনত্ব হল তা তালিকায় কতবার উপস্থিত।\n    যদি এমন কোনো মান না থাকে, তাহলে -1 ফেরত দিন।\n    উদাহরণসমূহ:\n        func([4, 1, 2, 2, 3, 1]) == 2\n        func([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        func([5, 5, 4, 4, 4]) == -1\n    '''\n","canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n","test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n","entry_point":"func"}
{"task_id":"HumanEval\/70","prompt":"def func(lst):\n    '''\n    পূর্ণসংখ্যার একটি তালিকা দেওয়া হলে, তালিকাটি অদ্ভুত ক্রমে ফেরত দিন।\n    অদ্ভুত সাজানো, হল যখন আপনি সর্বনিম্ন মান দিয়ে শুরু করেন,\n    তারপর অবশিষ্ট পূর্ণসংখ্যাগুলির মধ্যে সর্বোচ্চ মান, তারপর সর্বনিম্ন এবং এভাবে চলতে থাকে।\n\n    উদাহরণসমূহ:\n    func([1, 2, 3, 4]) == [1, 4, 2, 3]\n    func([5, 5, 5, 5]) == [5, 5, 5, 5]\n    func([]) == []\n    '''\n","canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/71","prompt":"def func(a, b, c):\n    '''\n    একটি ত্রিভুজের তিনটি বাহুর দৈর্ঘ্য দেওয়া আছে। যদি তিনটি বাহু একটি বৈধ ত্রিভুজ গঠন করে, তাহলে ত্রিভুজের ক্ষেত্রফল দুই দশমিক স্থান পর্যন্ত গোলাকার করে ফেরত দিন। \n    অন্যথায় -1 ফেরত দিন।\n    তিনটি বাহু তখন একটি বৈধ ত্রিভুজ গঠন করে যখন যে কোনো দুই বাহুর যোগফল তৃতীয় বাহুর চেয়ে বেশি হয়।\n    উদাহরণ:\n    func(3, 4, 5) == 6.00\n    func(1, 2, 10) == -1\n    '''\n","canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n","entry_point":"func"}
{"task_id":"HumanEval\/72","prompt":"def func(q,w):\n    '''\n    এমন একটি ফাংশন লিখুন যা যদি অবজেক্ট q উড়তে পারে তাহলে True রিটার্ন করবে, অন্যথায় False রিটার্ন করবে।\n    অবজেক্ট q উড়তে পারবে যদি এটি ভারসাম্যপূর্ণ হয় (এটি একটি প্যালিনড্রোমিক তালিকা) এবং এর উপাদানগুলির যোগফল সর্বাধিক সম্ভাব্য ওজন w এর সমান বা কম।\n\n    উদাহরণ:\n    func([1, 2], 5) ➞ False \n    # 1+2 সর্বাধিক সম্ভাব্য ওজনের চেয়ে কম, কিন্তু এটি ভারসাম্যপূর্ণ নয়।\n\n    func([3, 2, 3], 1) ➞ False\n    # এটি ভারসাম্যপূর্ণ, কিন্তু 3+2+3 সর্বাধিক সম্ভাব্য ওজনের চেয়ে বেশি।\n\n    func([3, 2, 3], 9) ➞ True\n    # 3+2+3 সর্বাধিক সম্ভাব্য ওজনের চেয়ে কম, এবং এটি ভারসাম্যপূর্ণ।\n\n    func([3], 5) ➞ True\n    # 3 সর্বাধিক সম্ভাব্য ওজনের চেয়ে কম, এবং এটি ভারসাম্যপূর্ণ।\n    '''\n","canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/73","prompt":"def func(arr):\n    \"\"\"\n    পূর্ণসংখ্যা সম্বলিত একটি অ্যারে arr দেওয়া হলে, অ্যারেটিকে প্যালিনড্রোমিক করতে কতগুলি নূন্যতম উপাদান পরিবর্তন করা প্রয়োজন তা খুঁজে বের করুন। একটি প্যালিনড্রোমিক অ্যারে হল এমন একটি অ্যারে যা পেছন থেকে এবং সামনে থেকে পড়লে একই রকম মনে হয়। একটি পরিবর্তনে, আপনি একটি উপাদানকে অন্য যেকোনো উপাদানে পরিবর্তন করতে পারেন।\n\n    উদাহরণস্বরূপ:\n    func([1,2,3,5,4,7,9,6]) == 4\n    func([1, 2, 3, 4, 3, 2, 2]) == 1\n    func([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n","canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n","entry_point":"func"}
{"task_id":"HumanEval\/74","prompt":"def func(lst1, lst2):\n    '''\n    একটি ফাংশন লিখুন যা দুটি স্ট্রিং লিস্ট গ্রহণ করে এবং যে লিস্টে সমস্ত স্ট্রিংগুলিতে মোট অক্ষরের সংখ্যা অন্য লিস্টের চেয়ে কম তা ফেরত দেয়।\n\n    যদি দুটি লিস্টের অক্ষরের সংখ্যা সমান হয়, প্রথম লিস্টটি ফেরত দিন।\n\n    উদাহরণসমূহ\n    func([], []) ➞ []\n    func(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    func(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    func(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    func(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n","canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/75","prompt":"def func(a):\n    \"\"\"এমন একটি ফাংশন লিখুন যা প্রদত্ত সংখ্যাটি যদি ৩টি মৌলিক সংখ্যার গুণফল হয় তাহলে true ফেরত দেয় এবং অন্যথায় false ফেরত দেয়।\n    জেনে রাখুন যে (a) ১০০ এর চেয়ে কম। \n    উদাহরণ:\n    func(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"","canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n","test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/76","prompt":"def func(x, n):\n    \"\"\"আপনার কাজ হল এমন একটি ফাংশন লিখা যা সত্য ফেরত দেয় যদি একটি সংখ্যা x হয় n এর একটি সাধারণ ঘাত এবং অন্যান্য ক্ষেত্রে মিথ্যা।\n    x হল n এর একটি সাধারণ ঘাত যদি n**int=x হয়\n    উদাহরণস্বরূপ:\n    func(1, 4) => true\n    func(2, 2) => true\n    func(8, 2) => true\n    func(3, 2) => false\n    func(3, 1) => false\n    func(5, 3) => false\n    \"\"\"","canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/77","prompt":"def func(a):\n    '''\n    একটি ফাংশন লিখুন যা একটি পূর্ণসংখ্যা a নেয় এবং যদি এই পূর্ণসংখ্যাটি কোনো পূর্ণসংখ্যার ঘনফল হয় তাহলে True ফেরত দেয়।\n    মনে রাখবেন: আপনি ধরে নিতে পারেন ইনপুট সবসময় বৈধ।\n    উদাহরণসমূহ:\n    func(1) ==> True\n    func(2) ==> False\n    func(-1) ==> True\n    func(64) ==> True\n    func(0) ==> True\n    func(180) ==> False\n    '''\n","canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n","entry_point":"func"}
{"task_id":"HumanEval\/78","prompt":"def func(num):\n    \"\"\"আপনাকে এমন একটি ফাংশন লিখতে বলা হয়েছে যা একটি ষোড়শমিক সংখ্যা একটি স্ট্রিং হিসেবে গ্রহণ করে \n    এবং ষোড়শমিক অঙ্কগুলির মধ্যে কতগুলি মৌলিক সংখ্যা (প্রাইম নাম্বার, বা প্রাইম, হল এমন একটি প্রাকৃতিক সংখ্যা \n    যা ১ এর চেয়ে বড় এবং দুটি ছোট প্রাকৃতিক সংখ্যার গুণফল নয়) গণনা করে।\n    ষোড়শমিক অঙ্কগুলি হল ০, ১, ২, ৩, ৪, ৫, ৬, ৭, ৮, ৯, A, B, C, D, E, F।\n    মৌলিক সংখ্যাগুলি হল ২, ৩, ৫, ৭, ১১, ১৩, ১৭,...\n    সুতরাং আপনাকে নির্ধারণ করতে হবে নিম্নলিখিত অঙ্কগুলির সংখ্যা: ২, ৩, ৫, ৭, \n    B (=দশমিক ১১), D (=দশমিক ১৩)।\n    নোট: আপনি ধরে নিতে পারেন ইনপুট সবসময় সঠিক বা খালি স্ট্রিং, \n    এবং প্রতীক A,B,C,D,E,F সবসময় বড় হাতের অক্ষর।\n    উদাহরণসমূহ:\n    num = \"AB\" এর জন্য আউটপুট হওয়া উচিত ১।\n    num = \"1077E\" এর জন্য আউটপুট হওয়া উচিত ২।\n    num = \"ABED1A33\" এর জন্য আউটপুট হওয়া উচিত ৪।\n    num = \"123456789ABCDEF0\" এর জন্য আউটপুট হওয়া উচিত ৬।\n    num = \"2020\" এর জন্য আউটপুট হওয়া উচিত ২।\n    \"\"\"","canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n","entry_point":"func"}
{"task_id":"HumanEval\/79","prompt":"def func(decimal):\n    \"\"\"আপনাকে একটি দশমিক সংখ্যা দেওয়া হবে এবং আপনার কাজ হল তা বাইনারি ফরম্যাটে রূপান্তর করা। ফাংশনটি একটি স্ট্রিং রিটার্ন করবে, প্রতিটি অক্ষর একটি বাইনারি সংখ্যা প্রতিনিধিত্ব করবে। স্ট্রিংয়ের প্রতিটি অক্ষর '0' অথবা '1' হবে।\n\n    স্ট্রিংয়ের শুরুতে এবং শেষে 'db' নামে দুটি অতিরিক্ত অক্ষর থাকবে। অতিরিক্ত অক্ষরগুলি ফরম্যাটের সাথে সাহায্য করার জন্য রয়েছে।\n\n    উদাহরণসমূহ:\n    func(15)   # \"db1111db\" রিটার্ন করে\n    func(32)   # \"db100000db\" রিটার্ন করে\n    \"\"\"","canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/80","prompt":"def func(s):\n    \"\"\"আপনাকে একটি স্ট্রিং s দেওয়া হয়েছে।\n    আপনার কাজ হল চেক করা যে স্ট্রিংটি হ্যাপি কিনা।\n    একটি স্ট্রিং হ্যাপি হয় যদি এর দৈর্ঘ্য অন্তত ৩ হয় এবং প্রতি ৩টি পরপর অক্ষর আলাদা হয়\n    উদাহরণস্বরূপ:\n    func(a) => False\n    func(aa) => False\n    func(abcd) => True\n    func(aabb) => False\n    func(adb) => True\n    func(xyy) => False\n    \"\"\"","canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n","entry_point":"func"}
{"task_id":"HumanEval\/81","prompt":"def func(grades):\n    \"\"\"সেমিস্টারের শেষ সপ্তাহ এবং শিক্ষককে ছাত্রদের গ্রেড দিতে হবে।\n    শিক্ষক নিজের গ্রেডিং এর জন্য একটি এলগরিদম তৈরি করেছেন।\n    একমাত্র সমস্যা হল, তিনি গ্রেডিং এর জন্য ব্যবহৃত কোডটি হারিয়ে ফেলেছেন।\n    তিনি আপনাকে কিছু ছাত্রের জন্য GPA এর একটি তালিকা দিয়েছেন এবং আপনাকে একটি ফাংশন লিখতে হবে যা নিম্নলিখিত টেবিল অনুসারে অক্ষরের গ্রেডের একটি তালিকা আউটপুট করতে পারে:\n             GPA       |    লেটার গ্রেড\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    উদাহরণ:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"","canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/82","prompt":"def func(string):\n    \"\"\"একটি স্ট্রিং নিয়ে এমন একটি ফাংশন লিখুন যা স্ট্রিংটির দৈর্ঘ্য যদি মৌলিক সংখ্যা হয় তাহলে True ফেরত দেয় অথবা অন্যথায় False ফেরত দেয়\n    উদাহরণ\n    func('Hello') == True\n    func('abcdcba') == True\n    func('kittens') == True\n    func('orange') == False\n    \"\"\"","canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/83","prompt":"def func(n):\n    \"\"\"\n    একটি ধনাত্মক পূর্ণসংখ্যা n দেওয়া হলে, n-সংখ্যার ধনাত্মক পূর্ণসংখ্যাগুলির সংখ্যা গণনা করুন যেগুলি 1 দিয়ে শুরু হয় অথবা 1 দিয়ে শেষ হয়।\n    \"\"\"","canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/84","prompt":"def func(N):\n    \"\"\"একটি ধনাত্মক পূর্ণসংখ্যা N দেওয়া হলে, এর সংখ্যাসূচক অঙ্কগুলির যোগফল বাইনারিতে ফেরত দিন।\n    \n    উদাহরণ\n        N = 1000 এর জন্য, অঙ্কগুলির যোগফল হবে 1 এবং আউটপুট হবে \"1\"।\n        N = 150 এর জন্য, অঙ্কগুলির যোগফল হবে 6 এবং আউটপুট হবে \"110\"।\n        N = 147 এর জন্য, অঙ্কগুলির যোগফল হবে 12 এবং আউটপুট হবে \"1100\"।\n    \n    ভেরিয়েবলসমূহ:\n        @N পূর্ণসংখ্যা\n             বাধাসমূহ: 0 ≤ N ≤ 10000।\n    আউটপুট:\n         একটি বাইনারি সংখ্যার স্ট্রিং\n    \"\"\"","canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/85","prompt":"def func(lst):\n    \"\"\"একটি অ-খালি পূর্ণসংখ্যার তালিকা lst দেওয়া হলে, বিজোড় সূচীতে থাকা জোড় সংখ্যাগুলি যোগ করুন।\n\n\n    উদাহরণ:\n        func([4, 2, 6, 7]) ==> 2 \n    \"\"\"","canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n","entry_point":"func"}
{"task_id":"HumanEval\/86","prompt":"def func(s):\n    \"\"\"\n    একটি ফাংশন লিখুন যা একটি স্ট্রিং নেয় এবং এর একটি সাজানো সংস্করণ ফেরত দেয়।\n    স্ট্রিংয়ের সাজানো সংস্করণ হল এমন একটি স্ট্রিং যেখানে সমস্ত শব্দগুলি (স্পেস দ্বারা পৃথক)\n    একটি নতুন শব্দ দ্বারা প্রতিস্থাপিত হয় যেখানে সমস্ত অক্ষরগুলি অ্যাসকি মান অনুসারে\n    আরোহী ক্রমে সাজানো হয়।\n    মনে রাখবেন: আপনাকে বাক্যের শব্দের ক্রম এবং ফাঁকা জায়গাগুলি ধরে রাখতে হবে।\n\n    উদাহরণস্বরূপ:\n    func('Hi') ফেরত দেয় 'Hi'\n    func('hello') ফেরত দেয় 'ehllo'\n    func('Hello World!!!') ফেরত দেয় 'Hello !!!Wdlor'\n    \"\"\"\n","canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/87","prompt":"def func(lst, x):\n    \"\"\"\n    আপনাকে একটি 2 মাত্রিক ডেটা দেওয়া হয়েছে, যা নেস্টেড লিস্ট হিসেবে আছে,\n    যা ম্যাট্রিক্সের মতো, তবে ম্যাট্রিক্সের মতো নয়,\n    প্রতিটি সারিতে ভিন্ন সংখ্যক কলাম থাকতে পারে।\n    lst এবং পূর্ণসংখ্যা x দেওয়া হলে, লিস্টে x সংখ্যাগুলি খুঁজে বের করুন,\n    এবং টুপলের লিস্ট ফেরত দিন, [(x1, y1), (x2, y2) ...] যাতে\n    প্রতিটি টুপল একটি কোঅর্ডিনেট - (সারি, কলাম), 0 থেকে শুরু করে।\n    প্রথমে সারিগুলি আরোহী ক্রমে কোঅর্ডিনেট দ্বারা সাজান।\n    এছাড়াও, সারির কোঅর্ডিনেটগুলি কলাম অনুসারে অবরোহী ক্রমে সাজান।\n    \n    উদাহরণসমূহ:\n    func([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    func([], 1) == []\n    func([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n","canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/88","prompt":"def func(array):\n    \"\"\"\n    অ-নেতিবাচক পূর্ণসংখ্যার একটি অ্যারে দেওয়া হলে, দেওয়া অ্যারেটি সাজানোর পর একটি কপি রিটার্ন করুন,\n    যদি প্রথম ইনডেক্সের মান এবং শেষ ইনডেক্সের মানের যোগফল বিজোড় হয়, তাহলে দেওয়া অ্যারেটি আরোহী ক্রমে সাজান,\n    অথবা যদি যোগফল জোড় হয়, তাহলে অবরোহী ক্রমে সাজান।\n\n    মনে রাখবেন:\n    * দেওয়া অ্যারেটি পরিবর্তন করবেন না।\n\n    উদাহরণসমূহ:\n    * func([]) => []\n    * func([5]) => [5]\n    * func([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * func([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n","canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/89","prompt":"def func(s):\n    \"\"\"একটি ফাংশন তৈরি করুন func যা একটি স্ট্রিং আর্গুমেন্ট হিসেবে নেয় এবং\n    অক্ষরমালা ঘুরিয়ে এনক্রিপ্ট করা একটি স্ট্রিং ফেরত দেয়।\n    অক্ষরমালা এমনভাবে ঘুরানো উচিত যাতে অক্ষরগুলি\n    দুই গুণিত দুই স্থান নিচে সরে যায়।\n    উদাহরণস্বরূপ:\n    func('hi') ফেরত দেয় 'lm'\n    func('asdfghjkl') ফেরত দেয় 'ewhjklnop'\n    func('gf') ফেরত দেয় 'kj'\n    func('et') ফেরত দেয় 'ix'\n    \"\"\"","canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/90","prompt":"def func(lst):\n    \"\"\"\n    আপনাকে একটি পূর্ণসংখ্যার তালিকা দেওয়া হয়েছে।\n    এমন একটি ফাংশন func() লিখুন যা তালিকার ২য় সর্বনিম্ন উপাদানটি ফেরত দেয়।\n    যদি এমন কোনো উপাদান না থাকে, তাহলে None ফেরত দিন।\n    \n    func([1, 2, 3, 4, 5]) == 2\n    func([5, 1, 4, 3, 2]) == 2\n    func([]) == None\n    func([1, 1]) == None\n    \"\"\"","canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/91","prompt":"def func(S):\n    \"\"\"\n    আপনাকে একটি শব্দের স্ট্রিং দেওয়া হবে, এবং আপনার কাজ হল বিরক্তির সংখ্যা গণনা করা।\n    একটি বিরক্তি হল এমন একটি বাক্য যা \"I\" শব্দ দিয়ে শুরু হয়।\n    বাক্যগুলি '.' বা '?' বা '!' দ্বারা সীমাবদ্ধ।\n   \n    উদাহরণস্বরূপ:\n    >>> func(\"Hello world\")\n    0\n    >>> func(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n","canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/92","prompt":"def func(x, y, z):\n    '''\n    ৩টি সংখ্যা নেওয়ার জন্য একটি ফাংশন তৈরি করুন।\n    যদি তিনটি সংখ্যার মধ্যে একটি সংখ্যা অন্য দুটির যোগফলের সমান হয় এবং সব সংখ্যা পূর্ণসংখ্যা হয়, তাহলে true ফেরত দিন।\n    অন্যান্য ক্ষেত্রে false ফেরত দিন।\n    \n    উদাহরণসমূহ\n    func(5, 2, 7) ➞ True\n    \n    func(3, 2, 2) ➞ False\n\n    func(3, -2, 1) ➞ True\n    \n    func(3.6, -2.2, 2) ➞ False\n    '''\n","canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/93","prompt":"def func(message):\n    \"\"\"\n    এমন একটি ফাংশন লিখুন যা একটি বার্তা নেয়, এবং এমনভাবে এনকোড করে \n    যে এটি সমস্ত অক্ষরের কেস পরিবর্তন করে, এবং বার্তায় থাকা সমস্ত স্বরবর্ণকে \n    ইংরেজি বর্ণমালায় ঐ স্বরবর্ণের দুই জায়গা পরে আসা অক্ষর দিয়ে প্রতিস্থাপন করে। \n    শুধুমাত্র অক্ষর ধরে নিন।\n    \n    উদাহরণসমূহ:\n    >>> func('test')\n    'TGST'\n    >>> func('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n","canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/94","prompt":"def func(lst):\n    \"\"\"আপনাকে একটি পূর্ণসংখ্যার তালিকা দেওয়া হয়েছে।\n    আপনাকে সর্বোচ্চ মৌলিক মানটি খুঁজে বের করতে হবে এবং এর অঙ্কগুলির যোগফল ফেরত দিতে হবে।\n\n    উদাহরণস্বরূপ:\n    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] এর জন্য আউটপুট হওয়া উচিত 10\n    lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] এর জন্য আউটপুট হওয়া উচিত 25\n    lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] এর জন্য আউটপুট হওয়া উচিত 13\n    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] এর জন্য আউটপুট হওয়া উচিত 11\n    lst = [0,81,12,3,1,21] এর জন্য আউটপুট হওয়া উচিত 3\n    lst = [0,8,1,2,1,7] এর জন্য আউটপুট হওয়া উচিত 7\n    \"\"\"","canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n","entry_point":"func"}
{"task_id":"HumanEval\/95","prompt":"def func(dict):\n    \"\"\"\n    একটি অভিধান দেওয়া হলে, সমস্ত কী যদি ছোট হাতের অক্ষরের স্ট্রিং হয় অথবা সমস্ত কী যদি বড় হাতের অক্ষরের স্ট্রিং হয়, তাহলে True ফেরত দিন, নতুবা False ফেরত দিন।\n    যদি দেওয়া অভিধানটি খালি হয়, তাহলে ফাংশনটি False ফেরত দেবে।\n    উদাহরণসমূহ:\n    func({\"a\":\"apple\", \"b\":\"banana\"}) এর জন্য True ফেরত দেওয়া উচিত।\n    func({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) এর জন্য False ফেরত দেওয়া উচিত।\n    func({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) এর জন্য False ফেরত দেওয়া উচিত।\n    func({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) এর জন্য False ফেরত দেওয়া উচিত।\n    func({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) এর জন্য True ফেরত দেওয়া উচিত।\n    \"\"\"\n","canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n","entry_point":"func"}
{"task_id":"HumanEval\/96","prompt":"def func(n):\n    \"\"\"একটি ফাংশন বাস্তবায়ন করুন যা একটি অ-নেতিবাচক পূর্ণসংখ্যা নেয় এবং প্রথম n পূর্ণসংখ্যাগুলির একটি অ্যারে ফেরত দেয় যা মৌলিক সংখ্যা এবং n এর চেয়ে কম।\n    উদাহরণস্বরূপ:\n    func(5) => [2,3]\n    func(11) => [2,3,5,7]\n    func(0) => []\n    func(20) => [2,3,5,7,11,13,17,19]\n    func(1) => []\n    func(18) => [2,3,5,7,11,13,17]\n    \"\"\"","canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n","test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/97","prompt":"def func(a, b):\n    \"\"\"দুটি পূর্ণসংখ্যা নেওয়ার জন্য সম্পূর্ণ ফাংশনটি সম্পন্ন করুন এবং তাদের একক অঙ্কের গুণফল ফেরত দিন।\n    ইনপুট সবসময় বৈধ বলে ধরে নিন।\n    উদাহরণসমূহ:\n    func(148, 412) এর ফলাফল হওয়া উচিত 16।\n    func(19, 28) এর ফলাফল হওয়া উচিত 72।\n    func(2020, 1851) এর ফলাফল হওয়া উচিত 0।\n    func(14,-15) এর ফলাফল হওয়া উচিত 20।\n    \"\"\"","canonical_solution":"    return abs(a % 10) * abs(b % 10)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n","entry_point":"func"}
{"task_id":"HumanEval\/98","prompt":"def func(s):\n    \"\"\"\n    একটি স্ট্রিং s দেওয়া হলে, জোড় সূচকগুলিতে থাকা বড় হাতের স্বরবর্ণের সংখ্যা গণনা করুন।\n    \n    উদাহরণস্বরূপ:\n    func('aBCdEf') 1 ফেরত দেয়\n    func('abcdefg') 0 ফেরত দেয়\n    func('dBBE') 0 ফেরত দেয়\n    \"\"\"\n","canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/99","prompt":"def func(value):\n    '''\n    এমন একটি ফাংশন তৈরি করুন যা একটি মান (string) নেয় যা একটি সংখ্যা প্রতিনিধিত্ব করে\n    এবং এটির সাথে সবচেয়ে কাছের পূর্ণসংখ্যা ফেরত দেয়। যদি সংখ্যাটি দুটি পূর্ণসংখ্যার মধ্যে সমান দূরত্বে হয়,\n    তাহলে এটি শূন্য থেকে দূরে গোল করুন।\n\n    উদাহরণসমূহ\n    >>> func(\"10\")\n    10\n    >>> func(\"15.3\")\n    15\n\n    দ্রষ্টব্য:\n    শূন্য থেকে দূরে গোল করা মানে হল যদি প্রদত্ত সংখ্যাটি দুটি পূর্ণসংখ্যার মধ্যে সমান দূরত্বে হয়,\n    তাহলে আপনি যেটি ফেরত দেবেন সেটি হবে শূন্য থেকে সবচেয়ে দূরে। উদাহরণস্বরূপ func(\"14.5\") উচিত\n    15 ফেরত দেওয়া এবং func(\"-14.5\") উচিত -15 ফেরত দেওয়া।\n    '''\n","canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/100","prompt":"def func(n):\n    \"\"\"\n    একটি ধনাত্মক পূর্ণসংখ্যা n দেওয়া হলে, আপনাকে n স্তরের পাথরের একটি স্তূপ তৈরি করতে হবে।\n    প্রথম স্তরে n টি পাথর থাকবে।\n    পরবর্তী স্তরে পাথরের সংখ্যা হল:\n        - n যদি বিজোড় হয় তবে পরবর্তী বিজোড় সংখ্যা।\n        - n যদি জোড় হয় তবে পরবর্তী জোড় সংখ্যা।\n    প্রতিটি স্তরে পাথরের সংখ্যা একটি তালিকায় ফেরত দিন, যেখানে সূচক i তে থাকা উপাদানটি (i+1) স্তরে পাথরের সংখ্যা প্রতিনিধিত্ব করে।\n\n    উদাহরণ:\n    >>> func(3)\n    [3, 5, 7]\n    \"\"\"\n","canonical_solution":"    return [n + 2*i for i in range(n)]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/101","prompt":"def func(s):\n    \"\"\"\n    আপনাকে কমা বা স্পেস দ্বারা পৃথক করা শব্দের একটি স্ট্রিং দেওয়া হবে। আপনার কাজ হল\n    স্ট্রিংটিকে শব্দে বিভক্ত করা এবং শব্দগুলির একটি অ্যারে ফেরত দেওয়া।\n    \n    উদাহরণস্বরূপ:\n    func(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    func(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"","canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/102","prompt":"def func(x, y):\n    \"\"\"এই ফাংশনটি দুটি ধনাত্মক সংখ্যা x এবং y নেয় এবং [x, y] পরিসীমার মধ্যে থাকা সবচেয়ে বড় জোড় পূর্ণসংখ্যা ফেরত দেয়। যদি \n    এমন কোনো সংখ্যা না থাকে, তাহলে ফাংশনটি -1 ফেরত দেবে।\n\n    উদাহরণস্বরূপ:\n    func(12, 15) = 14\n    func(13, 12) = -1\n    \"\"\"\n","canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n","entry_point":"func"}
{"task_id":"HumanEval\/103","prompt":"def func(n, m):\n    \"\"\"আপনাকে দুটি ধনাত্মক পূর্ণসংখ্যা n এবং m দেওয়া হয়েছে, এবং আপনার কাজ হল n থেকে m পর্যন্ত পূর্ণসংখ্যাগুলির\n    গড় মান গণনা করা (n এবং m উভয়কেই অন্তর্ভুক্ত করে)। \n    উত্তরটি নিকটতম পূর্ণসংখ্যায় গোল করুন এবং তা বাইনারিতে রূপান্তর করুন।\n    যদি n বড় হয় m এর চেয়ে, তাহলে -1 ফেরত দিন।\n    উদাহরণ:\n    func(1, 5) => \"0b11\"\n    func(7, 5) => -1\n    func(10, 20) => \"0b1111\"\n    func(20, 33) => \"0b11010\"\n    \"\"\"\n","canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/104","prompt":"def func(x):\n    \"\"\"ধনাত্মক পূর্ণসংখ্যার একটি তালিকা x দেওয়া হলে, সমস্ত উপাদান যাদের কোনো জোড় অঙ্ক নেই তাদের একটি বাছাই করা তালিকা ফেরত দিন।\n\n    দ্রষ্টব্য: ফেরত দেওয়া তালিকাটি বাড়তি ক্রমে সাজানো হওয়া উচিত।\n    \n    উদাহরণ স্বরূপ:\n    >>> func([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> func([152, 323, 1422, 10])\n    []\n    \"\"\"\n","canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/105","prompt":"def func(arr):\n    \"\"\"\n    একটি পূর্ণসংখ্যার অ্যারে দেওয়া হলে, ১ থেকে ৯ পর্যন্ত সংখ্যাগুলি সাজান, তারপর সাজানো অ্যারেটি উল্টান, এবং তারপর প্রতিটি সংখ্যাকে তার সংশ্লিষ্ট নাম \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" দিয়ে প্রতিস্থাপন করুন।\n\n    উদাহরণ স্বরূপ:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> arr সাজান -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> arr উল্টান -> [8, 5, 4, 3, 2, 2, 1, 1]\n      ফেরত দিন [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      যদি অ্যারেটি খালি হয়, তাহলে একটি খালি অ্যারে ফেরত দিন:\n      arr = []\n      ফেরত দিন []\n    \n      যদি অ্যারেতে কোনো অদ্ভুত সংখ্যা থাকে তাহলে তা উপেক্ষা করুন:\n      arr = [1, -1 , 55] \n            -> arr সাজান -> [-1, 1, 55]\n            -> arr উল্টান -> [55, 1, -1]\n      ফেরত দিন = ['One']\n    \"\"\"","canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/106","prompt":"defunc func(n):\n    \"\"\" ফাংশন func টি বাস্তবায়ন করুন যা n কে প্যারামিটার হিসেবে নেয়,\n    এবং n আকারের একটি তালিকা ফেরত দেয়, যাতে ইনডেক্স i এর উপাদানের মান হয় i এর ফ্যাক্টোরিয়াল যদি i জোড় হয়\n    অথবা 1 থেকে i পর্যন্ত সংখ্যাগুলির যোগফল অন্যথায়।\n    i শুরু হয় 1 থেকে।\n    i এর ফ্যাক্টোরিয়াল হল 1 থেকে i পর্যন্ত সংখ্যাগুলির গুণফল (1 * 2 * ... * i)।\n    উদাহরণ:\n    func(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n","canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n","test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n","entry_point":"func"}
{"task_id":"HumanEval\/107","prompt":"def func(n):\n    \"\"\"\n    ধনাত্মক পূর্ণসংখ্যা n দেওয়া হলে, এমন একটি টুপল ফেরত দিন যাতে n সংখ্যার মধ্যে (১ থেকে n পর্যন্ত, সহিত) পড়ে এমন সম এবং বিজোড় পূর্ণসংখ্যা প্যালিনড্রোমের সংখ্যা থাকবে।\n\n    উদাহরণ ১:\n\n        ইনপুট: ৩\n        আউটপুট: (১, ২)\n        ব্যাখ্যা:\n        পূর্ণসংখ্যা প্যালিনড্রোম হল ১, ২, ৩। এর মধ্যে একটি সম এবং দুটি বিজোড়।\n\n    উদাহরণ ২:\n\n        ইনপুট: ১২\n        আউটপুট: (৪, ৬)\n        ব্যাখ্যা:\n        পূর্ণসংখ্যা প্যালিনড্রোম হল ১, ২, ৩, ৪, ৫, ৬, ৭, ৮, ৯, ১১। এর মধ্যে চারটি সম এবং ৬টি বিজোড়।\n\n    দ্রষ্টব্য:\n        ১. ১ <= n <= ১০^৩\n        ২. ফেরত দেওয়া টুপলে যথাক্রমে সম এবং বিজোড় পূর্ণসংখ্যা প্যালিনড্রোমের সংখ্যা থাকবে।\n    \"\"\"","canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/108","prompt":"def func(arr):\n    \"\"\"\n    একটি ফাংশন func লিখুন যা একটি পূর্ণসংখ্যার অ্যারে নেয় এবং যেসব উপাদানের সংখ্যার যোগফল > 0 তা ফেরত দেয়।\n    যদি কোনো সংখ্যা নেগেটিভ হয়, তাহলে তার প্রথম সাইনযুক্ত অঙ্কটি নেগেটিভ হবে:\n    যেমন -123 এর সাইনযুক্ত অঙ্ক হল -1, 2, এবং 3।\n    >>> func([]) == 0\n    >>> func([-1, 11, -11]) == 1\n    >>> func([1, 1, 2]) == 3\n    \"\"\"\n","canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/109","prompt":"def func(arr):\n    \"\"\"আমাদের কাছে N সংখ্যক পূর্ণসংখ্যা arr[1], arr[2], ..., arr[N] একটি অ্যারে 'arr' আছে।\n    অ্যারেতে সংখ্যাগুলি এলোমেলোভাবে সাজানো থাকবে। আপনার কাজ হল নির্ধারণ করা যে,\n    নিম্নলিখিত অপারেশন প্রদান করা অ্যারেতে সম্পাদন করে অ-হ্রাসমান ক্রমে সাজানো অ্যারে\n    পেতে সম্ভব কি না:\n        আপনি যেকোনো সংখ্যক ডান দিকে শিফট অপারেশন সম্পাদন করতে পারবেন।\n    \n    একটি ডান দিকে শিফট অপারেশন মানে হল অ্যারের সমস্ত উপাদানকে ডান দিকে একটি\n    অবস্থানে সরানো। অ্যারের শেষ উপাদানটি অ্যারের শুরুর অবস্থানে অর্থাৎ 0 তম সূচকে\n    সরানো হবে।\n\n    যদি উপরের অপারেশন সম্পাদন করে সাজানো অ্যারে পাওয়া সম্ভব হয় তাহলে True ফেরত\n    দিন নতুবা False ফেরত দিন।\n    যদি প্রদত্ত অ্যারে খালি হয় তাহলে True ফেরত দিন।\n\n    নোট: প্রদত্ত তালিকায় অনন্য উপাদান থাকার নিশ্চয়তা দেওয়া হয়েছে।\n\n    উদাহরণের জন্য:\n    \n    func([3, 4, 5, 1, 2])==>True\n    ব্যাখ্যা: 2 টি ডান শিফট অপারেশন সম্পাদন করে, প্রদত্ত অ্যারের জন্য অ-হ্রাসমান ক্রম\n                 অর্জন করা সম্ভব।\n    func([3, 5, 4, 1, 2])==>False\n    ব্যাখ্যা: যেকোনো সংখ্যক ডান শিফট অপারেশন সম্পাদন করে প্রদত্ত অ্যারের জন্য\n                অ-হ্রাসমান ক্রম পাওয়া সম্ভব নয়।\n                \n    \"\"\"","canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n","entry_point":"func"}
{"task_id":"HumanEval\/110","prompt":"def func(lst1, lst2):\n    \"\"\"এই সমস্যায়, আপনি দুটি সংখ্যার তালিকা নেওয়ার একটি ফাংশন বাস্তবায়ন করবেন,\n    এবং নির্ধারণ করবেন যে তাদের মধ্যে উপাদান বিনিময় করে কি lst1 কে শুধুমাত্র জোড় সংখ্যার তালিকা বানানো সম্ভব।\n    lst1 এবং lst2 এর মধ্যে বিনিময় করা উপাদানের সংখ্যার উপর কোনো সীমা নেই।\n    যদি lst1 এবং lst2 এর মধ্যে উপাদান বিনিময় করে lst1 এর সব উপাদানকে জোড় করা সম্ভব হয়, \"YES\" ফেরত দিন।\n    অন্যথায়, \"NO\" ফেরত দিন।\n    উদাহরণ স্বরূপ:\n    func([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    func([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    ধরা হচ্ছে যে ইনপুট তালিকাগুলি খালি নয়।\n    \"\"\"","canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/111","prompt":"def func(test):\n    \"\"\"একটি স্ট্রিং দেওয়া হলে যা স্পেস দ্বারা পৃথক করা ছোট হাতের অক্ষরের প্রতিনিধিত্ব করে, সবচেয়ে বেশি পুনরাবৃত্তি সহ অক্ষরের একটি অভিধান ফেরত দিন এবং সংশ্লিষ্ট গণনা ধারণ করে।\n    যদি একাধিক অক্ষরের একই ঘটনা ঘটে, তাদের সবাইকে ফেরত দিন।\n    \n    উদাহরণ:\n    func('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    func('a b b a') == {'a': 2, 'b': 2}\n    func('a b c a b') == {'a': 2, 'b': 2}\n    func('b b b b a') == {'b': 4}\n    func('') == {}\n\n    \"\"\"","canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/112","prompt":"def func(s,c):\n    \"\"\"কাজ\n    আমাদের দুটি স্ট্রিং s এবং c দেওয়া হয়েছে, আপনাকে s এর সমস্ত অক্ষর মুছে ফেলতে হবে যা c এর যেকোনো অক্ষরের সমান।\n    তারপর দেখতে হবে যে ফলাফল স্ট্রিংটি প্যালিনড্রোম কিনা।\n    একটি স্ট্রিংকে প্যালিনড্রোম বলা হয় যদি তা পিছন থেকে পড়লে সামনে থেকে পড়ার মতো একই হয়।\n    আপনাকে ফলাফল স্ট্রিং এবং সত্য\/মিথ্যা চেকের জন্য একটি টুপল রিটার্ন করতে হবে।\n    উদাহরণ\n    s = \"abcde\", c = \"ae\" এর জন্য, ফলাফল হওয়া উচিত ('bcd',False)\n    s = \"abcdef\", c = \"b\" এর জন্য, ফলাফল হওয়া উচিত ('acdef',False)\n    s = \"abcdedcba\", c = \"ab\" এর জন্য, ফলাফল হওয়া উচিত ('cdedc',True)\n    \"\"\"","canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n","test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n","entry_point":"func"}
{"task_id":"HumanEval\/113","prompt":"def func(lst):\n    \"\"\"একটি স্ট্রিংয়ের তালিকা দেওয়া হলে, যেখানে প্রতিটি স্ট্রিং শুধুমাত্র সংখ্যা দ্বারা গঠিত, একটি তালিকা ফেরত দিন।\n    আউটপুটের প্রতিটি উপাদান i হওয়া উচিত \"ইনপুটের i তম স্ট্রিংয়ে বিজোড় উপাদানের সংখ্যা\" যেখানে সমস্ত i গুলি ইনপুটের i তম স্ট্রিংয়ে বিজোড় সংখ্যার সংখ্যা দ্বারা প্রতিস্থাপিত হওয়া উচিত।\n\n    >>> func(['1234567'])\n    [\"ইনপুটের 4 তম স্ট্রিংয়ে বিজোড় উপাদানের সংখ্যা 4.\"]\n    >>> func(['3',\"11111111\"])\n    [\"ইনপুটের 1 তম স্ট্রিংয়ে বিজোড় উপাদানের সংখ্যা 1.\",\n     \"ইনপুটের 8 তম স্ট্রিংয়ে বিজোড় উপাদানের সংখ্যা 8.\"]\n    \"\"\"\n","canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/114","prompt":"def func(nums):\n    \"\"\"\n    পূর্ণসংখ্যা অ্যারে nums এর যেকোনো অ-খালি উপ-অ্যারের সর্বনিম্ন যোগফল খুঁজে বের করুন।\n    উদাহরণ\n    func([2, 3, 4, 1, 2, 4]) == 1\n    func([-1, -2, -3]) == -6\n    \"\"\"\n","canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n","entry_point":"func"}
{"task_id":"HumanEval\/115","prompt":"def func(grid, capacity):\n    import math\n    \"\"\"\n    আপনাকে একটি আয়তক্ষেত্রাকার কূপের গ্রিড দেওয়া হয়েছে। প্রতিটি সারি একটি একক কূপ প্রতিনিধিত্ব করে,\n    এবং প্রতিটি সারিতে ১ প্রতিনিধিত্ব করে একক পরিমাণ পানির।\n    প্রতিটি কূপের সাথে একটি সংশ্লিষ্ট বালতি আছে যা তার থেকে পানি বের করার জন্য ব্যবহৃত হয়,\n    এবং সব বালতির একই ধারণক্ষমতা আছে।\n    আপনার কাজ হল কূপগুলি খালি করার জন্য বালতিগুলি ব্যবহার করা।\n    আপনাকে কতবার বালতি নামাতে হবে তা আউটপুট দিন।\n\n    উদাহরণ ১:\n        ইনপুট: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        আউটপুট: 6\n\n    উদাহরণ ২:\n        ইনপুট: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        আউটপুট: 5\n    \n    উদাহরণ ৩:\n        ইনপুট: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        আউটপুট: 0\n\n    বাধাসমূহ:\n        * সব কূপের একই দৈর্ঘ্য আছে\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n","canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n","test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/116","prompt":"def func(arr):\n    \"\"\"\n    এই কাতায়, আপনাকে একটি অ-নেতিবাচক পূর্ণসংখ্যার অ্যারে সাজাতে হবে তাদের বাইনারি প্রতিনিধিত্বে একের সংখ্যা অনুসারে আরোহী ক্রমে।\n    একই সংখ্যক একের জন্য, দশমিক মান অনুসারে সাজান।\n\n    এটি এভাবে বাস্তবায়িত করতে হবে:\n    >>> func([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> func([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> func([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n","canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/117","prompt":"def func(s, n):\n    \"\"\"একটি স্ট্রিং s এবং একটি প্রাকৃতিক সংখ্যা n দেওয়া হলে, আপনাকে এমন একটি ফাংশন বাস্তবায়ন করার জন্য বলা হয়েছে যা স্ট্রিং s থেকে ঠিক n টি ব্যঞ্জনবর্ণ ধারণ করে এমন সমস্ত শব্দের একটি তালিকা ফেরত দেয়, যে ক্রমে এই শব্দগুলি s স্ট্রিংয়ে প্রদর্শিত হয়।\n    যদি স্ট্রিং s খালি হয় তাহলে ফাংশনটি একটি খালি তালিকা ফেরত দেবে।\n    মনে রাখবেন: আপনি ধরে নিতে পারেন ইনপুট স্ট্রিংটি শুধুমাত্র অক্ষর এবং স্পেস ধারণ করে।\n    উদাহরণসমূহ:\n    func(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    func(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    func(\"simple white space\", 2) ==> []\n    func(\"Hello world\", 4) ==> [\"world\"]\n    func(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"","canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n","entry_point":"func"}
{"task_id":"HumanEval\/118","prompt":"def func(word):\n    \"\"\"আপনাকে একটি শব্দ দেওয়া হয়েছে। আপনার কাজ হল সেই স্বরবর্ণটি খুঁজে বের করা যা শব্দের ডান দিক থেকে দুটি ব্যঞ্জনবর্ণের মধ্যে সবচেয়ে কাছে আছে (কেস সংবেদনশীল)।\n    \n    শুরু এবং শেষের স্বরবর্ণগুলি গণনা করা হয় না। উপরের শর্ত মেনে কোনো স্বরবর্ণ না পেলে খালি স্ট্রিং ফেরত দিন।\n\n    আপনি ধরে নিতে পারেন যে প্রদত্ত স্ট্রিংটি শুধুমাত্র ইংরেজি অক্ষর ধারণ করে।\n\n    উদাহরণ:\n    func(\"yogurt\") ==> \"u\"\n    func(\"FULL\") ==> \"U\"\n    func(\"quick\") ==> \"\"\n    func(\"ab\") ==> \"\"\n    \"\"\"","canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/119","prompt":"def func(lst):\n    '''\n    আপনাকে দুটি স্ট্রিং সম্বলিত একটি লিস্ট দেওয়া হয়েছে, উভয় স্ট্রিংই শুধুমাত্র খোলা বন্ধনী '(' অথবা বন্ধ বন্ধনী ')' দিয়ে গঠিত।\n    আপনার কাজ হল যাচাই করা যে কোনো ক্রমে দুটি স্ট্রিংকে জোড়া দিয়ে এমন একটি স্ট্রিং তৈরি করা সম্ভব কিনা যেটি ভালো হবে।\n    একটি স্ট্রিং S কে তখনই ভালো বলা হয় যদি এবং কেবল যদি S এর সমস্ত বন্ধনী সমতুল্য হয়। উদাহরণস্বরূপ: স্ট্রিং '(())()' ভালো, যেখানে স্ট্রিং '())' ভালো নয়।\n    যদি কোনো উপায়ে ভালো স্ট্রিং তৈরি করা সম্ভব হয় তাহলে 'Yes' রিটার্ন করুন, অন্যথায় 'No' রিটার্ন করুন।\n\n    উদাহরণসমূহ:\n    func(['()(', ')']) == 'Yes'\n    func([')', ')']) == 'No'\n    '''\n","canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n","entry_point":"func"}
{"task_id":"HumanEval\/120","prompt":"def func(arr, k):\n    \"\"\"\n    একটি পূর্ণসংখ্যা অ্যারে arr এবং একটি ধনাত্মক পূর্ণসংখ্যা k দেওয়া হলে, arr এর সর্বাধিক k সংখ্যাগুলি নিয়ে একটি সাজানো তালিকা ফেরত দিন যার দৈর্ঘ্য হবে k।\n\n    উদাহরণ ১:\n\n        ইনপুট: arr = [-3, -4, 5], k = 3\n        আউটপুট: [-4, -3, 5]\n\n    উদাহরণ ২:\n\n        ইনপুট: arr = [4, -4, 4], k = 2\n        আউটপুট: [4, 4]\n\n    উদাহরণ ৩:\n\n        ইনপুট: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        আউটপুট: [2]\n\n    মনে রাখবেন:\n        1. অ্যারের দৈর্ঘ্য [1, 1000] পরিসীমার মধ্যে হবে।\n        2. অ্যারের উপাদানগুলি [-1000, 1000] পরিসীমার মধ্যে হবে।\n        3. 0 <= k <= len(arr)\n    \"\"\"","canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n","entry_point":"func"}
{"task_id":"HumanEval\/121","prompt":"def func(lst):\n    \"\"\"একটি অ-খালি পূর্ণসংখ্যার তালিকা দেওয়া হলে, সমস্থানে থাকা সমস্ত বিজোড় উপাদানের যোগফল ফেরত দিন।\n    \n\n    উদাহরণসমূহ\n    func([5, 8, 7, 1]) ==> 12\n    func([3, 3, 3, 3, 3]) ==> 9\n    func([30, 13, 24, 321]) ==>0\n    \"\"\"\n","canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n","entry_point":"func"}
{"task_id":"HumanEval\/122","prompt":"def func(arr, k):\n    \"\"\"\n    একটি অ-খালি পূর্ণসংখ্যার অ্যারে arr এবং একটি পূর্ণসংখ্যা k দেওয়া হলে, arr এর প্রথম k টি উপাদানের মধ্যে সর্বাধিক দুই অঙ্ক বিশিষ্ট উপাদানগুলির যোগফল ফেরত দিন।\n\n    উদাহরণ:\n\n        ইনপুট: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        আউটপুট: 24 # 21 + 3 এর যোগফল\n\n    সীমাবদ্ধতা:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"","canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/123","prompt":"def func(n):\n    \"\"\"\n    ধনাত্মক পূর্ণসংখ্যা n দেওয়া হলে, collatz ধারার বিজোড় সংখ্যাগুলি সাজানো তালিকা আকারে ফেরত দিন।\n\n    Collatz অনুমান হল গণিতে একটি অনুমান যা একটি ধারা সম্পর্কে যা নিম্নলিখিতভাবে সংজ্ঞায়িত: যেকোনো ধনাত্মক পূর্ণসংখ্যা n দিয়ে শুরু করুন। তারপর প্রতিটি পদ পূর্ববর্তী পদ থেকে নিম্নলিখিতভাবে প্রাপ্ত হয়: যদি পূর্ববর্তী পদ জোড় হয়, পরবর্তী পদ হল পূর্ববর্তী পদের অর্ধেক। যদি পূর্ববর্তী পদ বিজোড় হয়, পরবর্তী পদ হল পূর্ববর্তী পদের তিন গুণ প্লাস ১। অনুমান হল যে n এর মান যাই হোক না কেন, ধারাটি সবসময় ১ এ পৌঁছাবে।\n\n    মনে রাখবেন: \n        ১. Collatz(1) হল [1]।\n        ২. ফেরত দেওয়া তালিকা বর্ধমান ক্রমে সাজানো।\n\n    উদাহরণ স্বরূপ:\n    func(5) ফেরত দেয় [1, 5] # ৫ এর জন্য collatz ধারা হল [5, 16, 8, 4, 2, 1], তাই বিজোড় সংখ্যাগুলি শুধুমাত্র ১ এবং ৫।\n    \"\"\"\n","canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/124","prompt":"def func(date):\n    \"\"\"আপনাকে একটি ফাংশন লিখতে হবে যা একটি দেওয়া তারিখের স্ট্রিং যাচাই করে এবং তারিখটি বৈধ হলে True অন্যথায় False প্রদান করে।\n    নিম্নলিখিত সমস্ত নিয়ম পূরণ হলে তারিখটি বৈধ:\n    1. তারিখের স্ট্রিংটি খালি নয়।\n    2. 1,3,5,7,8,10,12 মাসের জন্য দিনের সংখ্যা 1 এর কম নয় অথবা 31 দিনের বেশি নয়। এবং 4,6,9,11 মাসের জন্য দিনের সংখ্যা 1 এর কম নয় অথবা 30 দিনের বেশি নয়। এবং, 2 মাসের জন্য দিনের সংখ্যা 1 এর কম নয় অথবা 29 এর বেশি নয়।\n    3. মাসগুলি 1 এর কম অথবা 12 এর বেশি নয়।\n    4. তারিখটি এই ফরম্যাটে হতে হবে: mm-dd-yyyy\n\n    উদাহরণস্বরূপ:\n    func('03-11-2000') => True\n\n    func('15-01-2012') => False\n\n    func('04-0-2040') => False\n\n    func('06-04-2020') => True\n\n    func('06\/04\/2020') => False\n    \"\"\"","canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n","entry_point":"func"}
{"task_id":"HumanEval\/125","prompt":"def func(txt):\n    '''\n    একটি শব্দের স্ট্রিং দেওয়া হলে, স্পেস অনুযায়ী বিভক্ত করে শব্দের একটি তালিকা ফেরত দিন, যদি টেক্সটে কোনো স্পেস না থাকে তবে আপনাকে\n    কমা ',' অনুযায়ী বিভক্ত করতে হবে, যদি কোনো কমা না থাকে তবে আপনাকে বর্ণমালার বিজোড় ক্রমে থাকা লোয়ার-কেস অক্ষরের সংখ্যা ফেরত দিতে হবে,\n    ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    উদাহরণ\n    func(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    func(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    func(\"abcdef\") == 3 \n    '''\n","canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n","test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n","entry_point":"func"}
{"task_id":"HumanEval\/126","prompt":"def func(lst):\n    '''\n    একটি সংখ্যার তালিকা দেওয়া হলে, তা আরোহী ক্রমে সাজানো আছে কিনা তা ফেরত দিন। যদি তালিকায় একই সংখ্যার একাধিক ডুপ্লিকেট থাকে, \n    তাহলে False ফেরত দিন। ধরে নিন কোনো নেগেটিভ সংখ্যা নেই এবং শুধুমাত্র পূর্ণসংখ্যা আছে।\n\n    উদাহরণসমূহ\n    func([5]) ➞ True\n    func([1, 2, 3, 4, 5]) ➞ True\n    func([1, 3, 2, 4, 5]) ➞ False\n    func([1, 2, 3, 4, 5, 6]) ➞ True\n    func([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    func([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    func([1, 2, 2, 3, 3, 4]) ➞ True\n    func([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n","canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/127","prompt":"def func(interval1, interval2):\n    \"\"\"আপনাকে দুটি ইন্টারভাল দেওয়া হয়েছে,\n    প্রতিটি ইন্টারভাল হল এক জোড়া পূর্ণসংখ্যা। উদাহরণস্বরূপ, interval = (start, end) = (1, 2)।\n    দেওয়া ইন্টারভালগুলি বন্ধ যার অর্থ ইন্টারভাল (start, end)\n    উভয় start এবং end অন্তর্ভুক্ত করে।\n    প্রতিটি দেওয়া ইন্টারভালের জন্য, ধরা হয় যে এর start হল এর end এর সমান বা কম।\n    আপনার কাজ হল নির্ধারণ করা যে এই দুটি ইন্টারভালের ছেদের দৈর্ঘ্য কি একটি মৌলিক সংখ্যা।\n    উদাহরণস্বরূপ, ইন্টারভালগুলি (1, 3), (2, 4) এর ছেদ হল (2, 3)\n    যার দৈর্ঘ্য হল 1, যা একটি মৌলিক সংখ্যা নয়।\n    যদি ছেদের দৈর্ঘ্য একটি মৌলিক সংখ্যা হয়, \"YES\" ফেরত দিন,\n    অন্যথায়, \"NO\" ফেরত দিন।\n    যদি দুটি ইন্টারভাল ছেদ না করে, \"NO\" ফেরত দিন।\n\n\n    [input\/output] নমুনা:\n    func((1, 2), (2, 3)) ==> \"NO\"\n    func((-1, 1), (0, 4)) ==> \"NO\"\n    func((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"","canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/128","prompt":"def func(arr):\n    \"\"\"\n    আপনাকে একটি পূর্ণসংখ্যার অ্যারে arr দেওয়া হয়েছে এবং আপনাকে প্রতিটি সংখ্যার চিহ্নের গুণফল দ্বারা গুণিত পূর্ণসংখ্যার মানের যোগফল ফেরত দিতে হবে, যা 1, -1 অথবা 0 দ্বারা প্রতিনিধিত্ব করা হয়।\n    দ্রষ্টব্য: arr খালি হলে None ফেরত দিন।\n\n    উদাহরণ:\n    >>> func([1, 2, 2, -4]) == -9\n    >>> func([0, 1]) == 0\n    >>> func([]) == None\n    \"\"\"\n","canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/129","prompt":"def func(grid, k):\n    \"\"\"\n    একটি গ্রিড দেওয়া হলে যার N সারি এবং N কলাম (N >= 2) এবং একটি ধনাত্মক পূর্ণসংখ্যা k, \n    গ্রিডের প্রতিটি কোষে একটি মান রয়েছে। প্রতিটি পূর্ণসংখ্যা [1, N * N] পরিসীমায়\n    ঠিক একবার গ্রিডের কোষগুলিতে প্রদর্শিত হয়।\n\n    আপনাকে গ্রিডে k দৈর্ঘ্যের সর্বনিম্ন পথটি খুঁজে বের করতে হবে। আপনি যেকোনো কোষ থেকে শুরু করতে পারেন,\n    এবং প্রতিটি পদক্ষেপে আপনি প্রতিবেশী কোষগুলিতে যেতে পারেন,\n    অর্থাৎ, আপনি যে কোষগুলির সাথে একটি প্রান্ত ভাগ করেন সেগুলিতে যেতে পারেন।\n    দয়া করে মনে রাখবেন যে k দৈর্ঘ্যের একটি পথ মানে ঠিক k টি কোষ পরিদর্শন করা (অবশ্যই পৃথক নয়)।\n    আপনি গ্রিডের বাইরে যেতে পারবেন না।\n    একটি পথ A (k দৈর্ঘ্যের) একটি পথ B (k দৈর্ঘ্যের) থেকে কম বিবেচিত হয় যদি\n    A এবং B যে কোষগুলির মধ্য দিয়ে যায় তার মানের ক্রমানুসারে তালিকা তৈরি করার পরে (আমরা তাদের lst_A এবং lst_B বলি), lst_A ক্রমানুসারে lst_B এর চেয়ে কম,\n    অর্থাৎ, এমন একটি পূর্ণসংখ্যা সূচক i (1 <= i <= k) এর অস্তিত্ব রয়েছে যাতে lst_A[i] < lst_B[i] এবং যেকোনো j (1 <= j < i) এর জন্য আমরা পাই\n    lst_A[j] = lst_B[j]।\n    উত্তর অনন্য হওয়ার নিশ্চয়তা দেওয়া হয়েছে।\n    সর্বনিম্ন পথের মধ্য দিয়ে যাওয়া কোষের মানের ক্রমানুসারে তালিকা ফেরত দিন।\n\n    উদাহরণ:\n\n        ইনপুট: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        আউটপুট: [1, 2, 1]\n\n        ইনপুট: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        আউটপুট: [1]\n    \"\"\"","canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/130","prompt":"def func(n):\n    \"\"\"প্রত্যেকেই ফিবোনাচ্চি ধারা সম্পর্কে জানে, গত কয়েক শতাব্দীতে গণিতবিদরা এটি গভীরভাবে অধ্যয়ন করেছেন। তবে, যা মানুষ জানে না তা হল ট্রাইবোনাচ্চি ধারা।\n    ট্রাইবোনাচ্চি ধারা পুনরাবৃত্তি দ্বারা সংজ্ঞায়িত:\n    func(1) = 3\n    func(n) = 1 + n \/ 2, যদি n জোড় হয়।\n    func(n) = func(n - 1) + func(n - 2) + func(n + 1), যদি n বিজোড় হয়।\n    উদাহরণ স্বরূপ:\n    func(2) = 1 + (2 \/ 2) = 2\n    func(4) = 3\n    func(3) = func(2) + func(1) + func(4)\n           = 2 + 3 + 3 = 8 \n    আপনাকে একটি অ-নেতিবাচক পূর্ণসংখ্যা n দেওয়া হয়েছে, আপনাকে ট্রাইবোনাচ্চি ধারার প্রথম n + 1 সংখ্যার একটি তালিকা ফেরত দিতে হবে।\n    উদাহরণসমূহ:\n    func(3) = [1, 3, 2, 8]\n    \"\"\"","canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n","test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n","entry_point":"func"}
{"task_id":"HumanEval\/131","prompt":"def func(n):\n    \"\"\"একটি ধনাত্মক পূর্ণসংখ্যা n দেওয়া হলে, বিজোড় অঙ্কগুলির গুণফল ফেরত দিন।\n    সব অঙ্ক জোড় হলে 0 ফেরত দিন।\n    উদাহরণস্বরূপ:\n    func(1)  == 1\n    func(4)  == 0\n    func(235) == 15\n    \"\"\"","canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n","entry_point":"func"}
{"task_id":"HumanEval\/132","prompt":"def func(string):\n    '''\n    এমন একটি ফাংশন তৈরি করুন যা ইনপুট হিসেবে একটি স্ট্রিং নেয় যাতে শুধুমাত্র স্কোয়ার ব্র্যাকেট থাকে।\n    ফাংশনটি তখনই True রিটার্ন করবে যদি এবং কেবল যদি ব্র্যাকেটের একটি বৈধ উপক্রম থাকে\n    যেখানে উপক্রমের অন্তত একটি ব্র্যাকেট নেস্টেড হয়।\n\n    func('[[]]') ➞ True\n    func('[]]]]]]][[[[[]') ➞ False\n    func('[][]') ➞ False\n    func('[]') ➞ False\n    func('[[][]]') ➞ True\n    func('[[]][[') ➞ True\n    '''\n","canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/133","prompt":"def func(lst):\n    \"\"\"আপনাকে একটি সংখ্যার তালিকা দেওয়া হয়েছে।\n    আপনাকে দেওয়া তালিকায় বর্গকৃত সংখ্যাগুলির যোগফল ফেরত দিতে হবে,\n    প্রথমে তালিকার প্রতিটি উপাদানকে উপরের পূর্ণসংখ্যা(Ceiling) পর্যন্ত গোল করুন।\n    উদাহরণস্বরূপ:\n    lst = [1,2,3] এর জন্য আউটপুট হওয়া উচিত 14\n    lst = [1,4,9] এর জন্য আউটপুট হওয়া উচিত 98\n    lst = [1,3,5,7] এর জন্য আউটপুট হওয়া উচিত 84\n    lst = [1.4,4.2,0] এর জন্য আউটপুট হওয়া উচিত 29\n    lst = [-2.4,1,1] এর জন্য আউটপুট হওয়া উচিত 6\n    \n    \"\"\"","canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/134","prompt":"def func(txt):\n    '''\n    এমন একটি ফাংশন তৈরি করুন যা সত্য ফেরত দেয় যদি দেওয়া স্ট্রিংয়ের শেষ অক্ষরটি একটি বর্ণমালার অক্ষর হয় এবং এটি কোনো শব্দের অংশ নয়, অন্যথায় মিথ্যা।\n    দ্রষ্টব্য: \"শব্দ\" হল একটি গ্রুপ যা স্পেস দ্বারা পৃথক করা অক্ষরের সমষ্টি।\n\n    উদাহরণসমূহ:\n    func(\"apple pie\") ➞ False\n    func(\"apple pi e\") ➞ True\n    func(\"apple pi e \") ➞ False\n    func(\"\") ➞ False \n    '''\n","canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/135","prompt":"def func(arr):\n    \"\"\"এমন একটি ফাংশন তৈরি করুন যা এমন একটি উপাদানের সর্বোচ্চ সূচক ফেরত দেয় যা তার ঠিক আগের উপাদানের চেয়ে বড় নয় বা সমান নয়। যদি এমন কোনো উপাদান না থাকে তাহলে -1 ফেরত দিন। প্রদত্ত অ্যারেতে ডুপ্লিকেট মান থাকবে না।\n\n    উদাহরণসমূহ:\n    func([1,2,4,3,5]) = 3\n    func([1,2,3]) = -1\n    \"\"\"","canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n","entry_point":"func"}
{"task_id":"HumanEval\/136","prompt":"def func(lst):\n    '''\n    এমন একটি ফাংশন তৈরি করুন যা একটি টুপল (a, b) ফেরত দেয়, যেখানে 'a' হলো\n    নেতিবাচক পূর্ণসংখ্যাগুলির মধ্যে সবচেয়ে বড় এবং 'b' হলো\n    ধনাত্মক পূর্ণসংখ্যাগুলির মধ্যে সবচেয়ে ছোট।\n    যদি কোনো নেতিবাচক বা ধনাত্মক পূর্ণসংখ্যা না থাকে, তাদের None হিসেবে ফেরত দিন।\n\n    উদাহরণসমূহ:\n    func([2, 4, 1, 3, 5, 7]) == (None, 1)\n    func([]) == (None, None)\n    func([0]) == (None, None)\n    '''\n","canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n","entry_point":"func"}
{"task_id":"HumanEval\/137","prompt":"def func(a, b):\n    \"\"\"\n    এমন একটি ফাংশন তৈরি করুন যা পূর্ণসংখ্যা, ভাসমান সংখ্যা অথবা বাস্তব সংখ্যা প্রতিনিধিত্ব করা স্ট্রিং নেয়, এবং দেওয়া ভেরিয়েবল টাইপে বড় ভেরিয়েবলটি ফেরত দেয়।\n    যদি মানগুলি সমান হয় তবে None ফেরত দিন।\n    দ্রষ্টব্য: যদি বাস্তব সংখ্যা একটি স্ট্রিং হিসাবে উপস্থাপিত হয়, তবে ভাসমান বিন্দু হতে পারে . অথবা ,\n\n    func(1, 2.5) ➞ 2.5\n    func(1, \"2,3\") ➞ \"2,3\"\n    func(\"5,1\", \"6\") ➞ \"6\"\n    func(\"1\", 1) ➞ None\n    \"\"\"\n","canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/138","prompt":"def func(n):\n    \"\"\"প্রদত্ত সংখ্যা n ঠিক ৪টি ধনাত্মক জোড় সংখ্যার যোগফল হিসেবে লেখা যায় কিনা তা মূল্যায়ন করুন\n    উদাহরণ\n    func(4) == False\n    func(6) == False\n    func(8) == True\n    \"\"\"","canonical_solution":"    return n%2 == 0 and n >= 8\n","test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n","entry_point":"func"}
{"task_id":"HumanEval\/139","prompt":"def func(n):\n    \"\"\"ব্রাজিলিয়ান ফ্যাক্টোরিয়াল নিম্নরূপ সংজ্ঞায়িত:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    যেখানে n > 0\n\n    উদাহরণ স্বরূপ:\n    >>> func(4)\n    288\n\n    ফাংশনটি একটি পূর্ণসংখ্যা ইনপুট হিসেবে গ্রহণ করবে এবং এই পূর্ণসংখ্যার বিশেষ ফ্যাক্টোরিয়াল ফেরত দেবে।\n    \"\"\"","canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/140","prompt":"def func(text):\n    \"\"\"\n    একটি স্ট্রিং text দেওয়া হলে, এতে থাকা সমস্ত স্পেসকে আন্ডারস্কোর দিয়ে প্রতিস্থাপন করুন,\n    এবং যদি একটি স্ট্রিংয়ে 2 এর বেশি পরপর স্পেস থাকে,\n    তাহলে সমস্ত পরপর স্পেসগুলিকে - দিয়ে প্রতিস্থাপন করুন\n    \n    func(\"Example\") == \"Example\"\n    func(\"Example 1\") == \"Example_1\"\n    func(\" Example 2\") == \"_Example_2\"\n    func(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n","canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/141","prompt":"def func(file_name):\n    \"\"\"একটি ফাংশন তৈরি করুন যা একটি ফাইলের নাম প্রতিনিধিত্ব করে এমন একটি স্ট্রিং নেয়, এবং যদি ফাইলের নাম বৈধ হয় তবে 'Yes' রিটার্ন করে, অন্যথায় 'No' রিটার্ন করে।\n    একটি ফাইলের নামকে তখনই বৈধ বিবেচনা করা হয় যদি এবং কেবল যদি নিম্নলিখিত শর্তগুলি পূরণ হয়:\n    - ফাইলের নামে তিনটির বেশি সংখ্যা ('0'-'9') থাকা উচিত নয়।\n    - ফাইলের নামে ঠিক একটি ডট '.' থাকতে হবে।\n    - ডটের আগের সাবস্ট্রিংটি খালি না হওয়া উচিত, এবং এটি ল্যাটিন বর্ণমালার ('a'-'z' এবং 'A'-'Z') একটি অক্ষর দিয়ে শুরু হতে হবে।\n    - ডটের পরের সাবস্ট্রিংটি এইগুলির একটি হতে হবে: ['txt', 'exe', 'dll']\n    উদাহরণ:\n    func(\"example.txt\") # => 'Yes'\n    func(\"1example.dll\") # => 'No' (নামটি ল্যাটিন বর্ণমালার অক্ষর দিয়ে শুরু হতে হবে)\n    \"\"\"","canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n","entry_point":"func"}
{"task_id":"HumanEval\/142","prompt":"def func(lst):\n    \"\"\"\n    এই ফাংশনটি একটি পূর্ণসংখ্যার তালিকা নেবে। তালিকার সমস্ত প্রবেশগুলির জন্য, ফাংশনটি পূর্ণসংখ্যা প্রবেশটিকে বর্গ করবে যদি তার সূচকটি 3 এর একটি গুণক হয় এবং পূর্ণসংখ্যা প্রবেশটিকে ঘন করবে যদি তার সূচকটি 4 এর একটি গুণক হয় এবং 3 এর গুণক না হয়। ফাংশনটি তালিকার সেই প্রবেশগুলিকে পরিবর্তন করবে না যাদের সূচকগুলি 3 বা 4 এর গুণক নয়। তারপর ফাংশনটি সমস্ত প্রবেশের যোগফল ফেরত দেবে।\n    \n    উদাহরণস্বরূপ:\n    lst = [1,2,3] এর জন্য আউটপুট হওয়া উচিত 6\n    lst = [] এর জন্য আউটপুট হওয়া উচিত 0\n    lst = [-1,-5,2,-1,-5] এর জন্য আউটপুট হওয়া উচিত -126\n    \"\"\"","canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n","entry_point":"func"}
{"task_id":"HumanEval\/143","prompt":"def func(sentence):\n    \"\"\"\n    আপনাকে একটি বাক্য প্রতিনিধিত্বকারী একটি স্ট্রিং দেওয়া হয়েছে,\n    বাক্যটিতে কিছু শব্দ রয়েছে যা স্পেস দ্বারা পৃথক করা হয়েছে,\n    এবং আপনাকে এমন একটি স্ট্রিং ফেরত দিতে হবে যা মূল বাক্যের শব্দগুলি ধারণ করে,\n    যাদের দৈর্ঘ্য মৌলিক সংখ্যা,\n    নতুন স্ট্রিংয়ে শব্দগুলির ক্রম মূলটির মতোই হতে হবে।\n\n    উদাহরণ ১:\n        ইনপুট: sentence = \"This is a test\"\n        আউটপুট: \"is\"\n\n    উদাহরণ ২:\n        ইনপুট: sentence = \"lets go for swimming\"\n        আউটপুট: \"go for\"\n\n    বাধ্যবাধকতা:\n        * 1 <= len(sentence) <= 100\n        * sentence শুধুমাত্র অক্ষর ধারণ করে\n    \"\"\"","canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/144","prompt":"def func(x, n):\n    \"\"\"আপনার কাজ হল এমন একটি ফাংশন বাস্তবায়ন করা যা x * n এক্সপ্রেশনটিকে সরলীকরণ করবে। ফাংশনটি তখন True রিটার্ন করবে যখন x * n পূর্ণ সংখ্যায় পরিণত হয় এবং অন্যথায় False রিটার্ন করবে। x এবং n উভয়ই ভগ্নাংশের স্ট্রিং প্রতিনিধিত্ব করে, এবং নিম্নলিখিত ফরম্যাট অনুসরণ করে, <উপরিমাণ>\/<হরমাণ> যেখানে উপরিমাণ এবং হরমাণ উভয়ই ধনাত্মক পূর্ণ সংখ্যা।\n\n    আপনি ধরে নিতে পারেন যে x এবং n উভয়ই বৈধ ভগ্নাংশ এবং হরমাণ শূন্য নয়।\n\n    func(\"1\/5\", \"5\/1\") = True\n    func(\"1\/6\", \"2\/1\") = False\n    func(\"7\/10\", \"10\/2\") = False\n    \"\"\"","canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n","entry_point":"func"}
{"task_id":"HumanEval\/145","prompt":"def func(nums):\n    \"\"\"\n    একটি ফাংশন লিখুন যা প্রদত্ত পূর্ণসংখ্যার তালিকাকে তাদের অঙ্কের যোগফল অনুসারে আরোহী ক্রমে সাজায়।\n    মনে রাখবেন: যদি একই অঙ্কের যোগফল সহ বেশ কয়েকটি আইটেম থাকে,\n    তাদেরকে মূল তালিকায় তাদের সূচক অনুসারে সাজান।\n\n    উদাহরণ স্বরূপ:\n    >>> func([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> func([]) == []\n    \"\"\"\n","canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/146","prompt":"def func(nums):\n    \"\"\"একটি ফাংশন লিখুন যা সংখ্যার একটি অ্যারে ইনপুট হিসেবে নেয় এবং অ্যারেতে এমন উপাদানের সংখ্যা ফেরত দেয় \n    যেগুলো ১০ এর চেয়ে বড় এবং একটি সংখ্যার প্রথম এবং শেষ অঙ্ক উভয়ই বিজোড় (১, ৩, ৫, ৭, ৯)।\n    উদাহরণস্বরূপ:\n    func([15, -73, 14, -15]) => 1 \n    func([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n","canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n","entry_point":"func"}
{"task_id":"HumanEval\/147","prompt":"def func(n):\n    \"\"\"\n    আপনাকে একটি ধনাত্মক পূর্ণসংখ্যা n দেওয়া হয়েছে। আপনাকে n দৈর্ঘ্যের একটি পূর্ণসংখ্যা অ্যারে a তৈরি করতে হবে।\n        প্রতিটি i (1 ≤ i ≤ n) এর জন্য, a[i] এর মান হবে i * i - i + 1।\n        এমন ত্রয়ী (a[i], a[j], a[k]) এর সংখ্যা ফেরত দিন যেখানে i < j < k,\n    এবং a[i] + a[j] + a[k] 3 এর একটি গুণিতক।\n\n    উদাহরণ :\n        ইনপুট: n = 5\n        আউটপুট: 1\n        ব্যাখ্যা: \n        a = [1, 3, 7, 13, 21]\n        একমাত্র বৈধ ত্রয়ী হল (1, 7, 13)।\n    \"\"\"","canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n","test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n","entry_point":"func"}
{"task_id":"HumanEval\/148","prompt":"def func(planet1, planet2):\n    '''\n    আমাদের সৌরজগতে আটটি গ্রহ রয়েছে: সূর্যের কাছাকাছি গ্রহটি হল বুধ, তারপরেরটি হল শুক্র, এরপর পৃথিবী, মঙ্গল, বৃহস্পতি, শনি, ইউরেনাস, নেপচুন।\n    এমন একটি ফাংশন লিখুন যা দুটি গ্রহের নাম planet1 এবং planet2 হিসেবে string আকারে নেয়।\n    ফাংশনটি এমন একটি টুপল ফেরত দেবে যা সূর্যের কাছাকাছি থেকে সাজানো planet1 এবং planet2 এর কক্ষপথের মধ্যে অবস্থিত সমস্ত গ্রহগুলি ধারণ করবে।\n    যদি planet1 অথবা planet2 সঠিক গ্রহের নাম না হয়, তাহলে ফাংশনটি একটি খালি টুপল ফেরত দেবে।\n    উদাহরণ\n    func(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    func(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    func(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n","canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n","entry_point":"func"}
{"task_id":"HumanEval\/149","prompt":"def func(lst):\n    \"\"\"একটি ফাংশন লিখুন যা একটি স্ট্রিংয়ের তালিকা প্যারামিটার হিসাবে গ্রহণ করে,\n    এটি থেকে বিষম দৈর্ঘ্যের স্ট্রিংগুলি মুছে দেয়,\n    এবং সাজানো ক্রমে ফলাফলের তালিকাটি ফেরত দেয়,\n    তালিকাটি সবসময় স্ট্রিংয়ের একটি তালিকা এবং কখনও সংখ্যার একটি অ্যারে নয়,\n    এবং এতে ডুপ্লিকেট থাকতে পারে।\n    তালিকার ক্রম প্রতিটি শব্দের দৈর্ঘ্য অনুসারে আরোহণ করা উচিত, এবং আপনি\n    সেই নিয়ম অনুসারে সাজানো তালিকা ফেরত দেওয়া উচিত।\n    দুটি শব্দের একই দৈর্ঘ্য থাকলে, তালিকাটি বর্ণানুক্রমিকভাবে সাজান।\n    ফাংশনটি সাজানো ক্রমে স্ট্রিংয়ের একটি তালিকা ফেরত দেওয়া উচিত।\n    আপনি ধরে নিতে পারেন যে সমস্ত শব্দের দৈর্ঘ্য একই হবে।\n    উদাহরণস্বরূপ:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"","canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n","entry_point":"func"}
{"task_id":"HumanEval\/150","prompt":"def func(n, x, y):\n    \"\"\"একটি সাধারণ প্রোগ্রাম যা n যদি একটি মৌলিক সংখ্যা হয় তাহলে x এর মান ফেরত দেবে এবং অন্যথায় y এর মান ফেরত দেবে।\n\n    উদাহরণসমূহ:\n    func(7, 34, 12) == 34 এর জন্য\n    func(15, 8, 5) == 5 এর জন্য\n    \n    \"\"\"","canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n","entry_point":"func"}
{"task_id":"HumanEval\/151","prompt":"def func(lst):\n    '''\n    একটি সংখ্যার তালিকা দেওয়া হলে, তালিকার মধ্যে যে সংখ্যাগুলি বিজোড় তাদের বর্গের যোগফল ফেরত দিন। নেতিবাচক বা পূর্ণসংখ্যা নয় এমন সংখ্যাগুলি উপেক্ষা করুন।\n    \n    func([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    func([-1, -2, 0]) == 0\n    func([9, -2]) == 81\n    func([0]) == 0  \n    \n    যদি ইনপুট তালিকা খালি হয়, তাহলে 0 ফেরত দিন।\n    '''","canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/152","prompt":"def func(game, guess):\n    \"\"\"আমরা সবাই সেই অনুভূতি মনে রাখি যখন কোনো দীর্ঘপ্রতীক্ষিত ঘটনার ফলাফল অবশেষে জানা যায়। সেই মুহূর্তে আপনার যে অনুভূতি ও চিন্তা হয় তা অবশ্যই লিপিবদ্ধ করা এবং তুলনা করা যায়।\n    আপনার কাজ হল নির্ধারণ করা যে কোনো ব্যক্তি কতগুলি ম্যাচের ফলাফল সঠিকভাবে অনুমান করেছেন।\n    আপনাকে সমান দৈর্ঘ্যের দুটি স্কোর এবং অনুমানের অ্যারে দেওয়া হয়েছে, যেখানে প্রতিটি সূচক একটি ম্যাচ দেখায়।\n    প্রতিটি অনুমান কতটা বেশি বা কম ছিল তা নির্দেশ করে একই দৈর্ঘ্যের একটি অ্যারে ফেরত দিন। যদি তারা সঠিকভাবে অনুমান করে থাকে, তাহলে মানটি হবে 0, এবং যদি না হয়, তাহলে মানটি হবে অনুমান এবং স্কোরের মধ্যে পার্থক্যের পরিমাণ।\n    \n    \n    উদাহরণ:\n\n    func([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    func([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"","canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/153","prompt":"def func(class_name, extensions):\n    \"\"\"আপনাকে একটি ক্লাসের নাম (একটি স্ট্রিং) এবং একটি এক্সটেনশনের তালিকা দেওয়া হবে।\n    এক্সটেনশনগুলি ক্লাসে অতিরিক্ত ক্লাস লোড করার জন্য ব্যবহৃত হবে। এক্সটেনশনের শক্তি নিম্নরূপ: ধরা যাক CAP হল এক্সটেনশনের নামে বড় হাতের অক্ষরের সংখ্যা, এবং SM হল ছোট হাতের অক্ষরের সংখ্যা, শক্তি দেওয়া হয় CAP - SM অনুপাত দ্বারা।\n    আপনাকে সবচেয়ে শক্তিশালী এক্সটেনশনটি খুঁজে বের করে এই ফরম্যাটে একটি স্ট্রিং রিটার্ন করতে হবে: ClassName.StrongestExtensionName।\n    যদি একই শক্তির দুই বা ততোধিক এক্সটেনশন থাকে, আপনাকে তালিকায় প্রথমে আসা একটিকে বেছে নিতে হবে।\n    উদাহরণস্বরূপ, যদি আপনাকে \"Slices\" নামের ক্লাস এবং এক্সটেনশনের তালিকা: ['SErviNGSliCes', 'Cheese', 'StuFfed'] দেওয়া হয়, তাহলে আপনাকে 'Slices.SErviNGSliCes' রিটার্ন করতে হবে কারণ 'SErviNGSliCes' সবচেয়ে শক্তিশালী এক্সটেনশন (এর শক্তি -1)।\n    উদাহরণ:\n    func('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA' এর জন্য\n    \"\"\"","canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n","entry_point":"func"}
{"task_id":"HumanEval\/154","prompt":"def func(a , b):\n    \"\"\"আপনাকে ২টি শব্দ দেওয়া হয়েছে। আপনাকে সত্য ফেরত দিতে হবে যদি দ্বিতীয় শব্দ বা এর যেকোনো রোটেশন প্রথম শব্দের একটি সাবস্ট্রিং হয়।\n    func(\"abcd\",\"abd\") => False\n    func(\"hello\",\"ell\") => True\n    func(\"whassup\",\"psus\") => False\n    func(\"abab\",\"baa\") => True\n    func(\"efef\",\"eeff\") => False\n    func(\"himenss\",\"simen\") => True\n\n    \"\"\"","canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/155","prompt":"def func(num):\n    \"\"\"একটি পূর্ণসংখ্যা দেওয়া হলে, একটি টুপল ফেরত দিন যাতে যথাক্রমে জোড় এবং বিজোড় সংখ্যার অঙ্কের সংখ্যা থাকবে।\n\n     উদাহরণ:\n        func(-12) ==> (1, 1)\n        func(123) ==> (1, 2)\n    \"\"\"","canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/156","prompt":"def func(number):\n    \"\"\"\n    একটি ধনাত্মক পূর্ণসংখ্যা দেওয়া হলে, তার রোমান সংখ্যা সমতুল্য একটি স্ট্রিং হিসেবে পান,\n    এবং এটি ছোট হাতের অক্ষরে ফেরত দিন।\n    বিধিনিষেধ: 1 <= num <= 1000\n\n    উদাহরণসমূহ:\n    >>> func(19) == 'xix'\n    >>> func(152) == 'clii'\n    >>> func(426) == 'cdxxvi'\n    \"\"\"\n","canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/157","prompt":"def func(a, b, c):\n    '''\n    একটি ত্রিভুজের তিনটি বাহুর দৈর্ঘ্য দেওয়া আছে। যদি তিনটি বাহু একটি সমকোণ ত্রিভুজ গঠন করে, তাহলে True ফেরত দিন, অন্যথায় False।\n    একটি সমকোণ ত্রিভুজ হল এমন একটি ত্রিভুজ যার একটি কোণ সমকোণ বা ৯০ ডিগ্রি।\n    উদাহরণ:\n    func(3, 4, 5) == True\n    func(1, 2, 3) == False\n    '''\n","canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n","entry_point":"func"}
{"task_id":"HumanEval\/158","prompt":"def func(words):\n    \"\"\"একটি ফাংশন লিখুন যা স্ট্রিংসের একটি তালিকা গ্রহণ করে।\n    তালিকাটি বিভিন্ন শব্দ ধারণ করে। সর্বাধিক সংখ্যক অনন্য অক্ষর সম্বলিত শব্দটি ফেরত দিন। যদি একাধিক স্ট্রিংসে সর্বাধিক সংখ্যক অনন্য অক্ষর থাকে, তাহলে যেটি অভিধানিক ক্রমে প্রথমে আসে সেটি ফেরত দিন।\n\n    func([\"name\", \"of\", \"string\"]) == \"string\"\n    func([\"name\", \"enam\", \"game\"]) == \"enam\"\n    func([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"","canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n","entry_point":"func"}
{"task_id":"HumanEval\/159","prompt":"def func(number, need, remaining):\n    \"\"\"\n    তুমি একটি ক্ষুধার্ত খরগোশ, এবং তুমি ইতিমধ্যে কিছু গাজর খেয়ে ফেলেছ, কিন্তু এখন তোমার দিনের খাবার সম্পূর্ণ করতে আরও গাজর খেতে হবে।\n    তুমি তোমার খাবারের পর মোট খাওয়া গাজরের সংখ্যা এবং খাবারের পর বাকি থাকা গাজরের সংখ্যা নিয়ে একটি অ্যারে ফেরত দেবে।\n    যদি পর্যাপ্ত গাজর না থাকে, তুমি বাকি সব গাজর খেয়ে ফেলবে, কিন্তু তবুও ক্ষুধার্ত থাকবে।\n    \n    উদাহরণ:\n    * func(5, 6, 10) -> [11, 4]\n    * func(4, 8, 9) -> [12, 1]\n    * func(1, 10, 10) -> [11, 0]\n    * func(2, 11, 5) -> [7, 0]\n    \n    ভেরিয়েবলসমূহ:\n    @number : পূর্ণসংখ্যা\n        তুমি যে সংখ্যক গাজর খেয়েছ।\n    @need : পূর্ণসংখ্যা\n        তুমি যে সংখ্যক গাজর খেতে চাও।\n    @remaining : পূর্ণসংখ্যা\n        স্টকে যে সংখ্যক গাজর বাকি আছে।\n    \n    বিধিনিষেধ:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    মজা করো :)\n    \"\"\"\n","canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/160","prompt":"def func(operator, operand):\n    \"\"\"\n    দুটি তালিকা operator এবং operand দেওয়া আছে। প্রথম তালিকায় মৌলিক বীজগণিতিক অপারেশন এবং \n    দ্বিতীয় তালিকায় পূর্ণসংখ্যার তালিকা আছে। দেওয়া দুটি তালিকা ব্যবহার করে বীজগণিতিক \n    এক্সপ্রেশন তৈরি করুন এবং এই এক্সপ্রেশনের মূল্যায়ন ফেরত দিন।\n\n    মৌলিক বীজগণিতিক অপারেশনগুলি:\n    যোগ ( + )\n    বিয়োগ ( - )\n    গুণ ( * )\n    ফ্লোর বিভাজন ( \/\/ )\n    ঘাতাঙ্ক ( ** )\n\n    উদাহরণ:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    নোট:\n        operator তালিকার দৈর্ঘ্য হল operand তালিকার দৈর্ঘ্য থেকে এক কম।\n        Operand হল অ-নেতিবাচক পূর্ণসংখ্যার তালিকা।\n        Operator তালিকায় অন্তত একটি অপারেটর এবং operand তালিকায় অন্তত দুটি অপারেন্ড থাকতে হবে।\n\n    \"\"\"","canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
{"task_id":"HumanEval\/161","prompt":"def func(s):\n    \"\"\"আপনাকে একটি স্ট্রিং s দেওয়া হয়েছে।\n    যদি s[i] একটি অক্ষর হয়, তাহলে এর কেস উল্টে দিন লোয়ার থেকে আপার অথবা উল্টোভাবে,\n    অন্যথায় এটিকে যেমন আছে তেমনি রাখুন।\n    যদি স্ট্রিংটিতে কোনো অক্ষর না থাকে, তাহলে স্ট্রিংটিকে উল্টে দিন।\n    ফাংশনটির উদ্দেশ্য হল ফলাফল হিসেবে প্রাপ্ত স্ট্রিংটি ফেরত দেওয়া।\n    উদাহরণ\n    func(\"1234\") = \"4321\"\n    func(\"ab\") = \"AB\"\n    func(\"#a@C\") = \"#A@c\"\n    \"\"\"","canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n","entry_point":"func"}
{"task_id":"HumanEval\/162","prompt":"def func(text):\n    \"\"\"\n    একটি স্ট্রিং 'text' দেওয়া হলে, এর md5 হ্যাশ সমতুল্য স্ট্রিং ফেরত দিন।\n    যদি 'text' একটি খালি স্ট্রিং হয়, তাহলে None ফেরত দিন।\n\n    >>> func('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"","canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n","entry_point":"func"}
{"task_id":"HumanEval\/163","prompt":"def func(a, b):\n    \"\"\"\n    দুটি ধনাত্মক পূর্ণসংখ্যা a এবং b দেওয়া হলে, a এবং b এর মধ্যে সমসংখ্যা সংখ্যাগুলি আরোহী ক্রমে ফেরত দিন।\n\n    উদাহরণস্বরূপ:\n    func(2, 8) => [2, 4, 6, 8]\n    func(8, 2) => [2, 4, 6, 8]\n    func(10, 14) => []\n    \"\"\"\n","canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n","entry_point":"func"}
